<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Message Receipts</title>
  <abstract>This specification defines an XMPP protocol extension for message receipts, whereby the sender of a message can request notification that it has been received by the intended recipient.</abstract>
  &LEGALNOTICE;
  <number>0184</number>
  <status>Draft</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
  </dependencies>
  <supersedes>
    <spec>XEP-0022 (in part)</spec>
  </supersedes>
  <supersededby/>
  <shortname>receipts</shortname>
  <schemaloc>
    <url>http://xmpp.org/schemas/receipts.xsd</url>
  </schemaloc>
  &stpeter;
  &hildjj;
  <revision>
    <version>1.1</version>
    <date>2010-03-31</date>
    <initials>psa</initials>
    <remark>
      <ul>
        <li>Clarified the level of reliability that this protocol provides and, most importantly, does not provide.</li>
        <li>Explicitly discouraged dependence on receipts unless some other protocol is used to negotiate the use of message receipts.</li>
        <li>Provided explicit recommendations about when and when not to request receipts.</li>
        <li>Relaxed the business rules to allow inclusion of receipt requests even to the bare JID and even if the sender does not yet know whether the intended recipient supports this protocol.</li>
        <li>Added 'id' attribute to &lt;received/&gt; element for tracking purposes.</li>
        <li>Removed text about XEP-0155 negotiation.</li>
      </ul>
    </remark>
  </revision>
  <revision>
    <version>1.0</version>
    <date>2007-09-26</date>
    <initials>psa</initials>
    <remark><p>Per a vote of the XMPP Council, advanced to Draft.</p></remark>
  </revision>
  <revision>
    <version>0.4</version>
    <date>2007-05-30</date>
    <initials>psa</initials>
    <remark><p>Per Council feedback, modified to use dedicated namespace (not AMP).</p></remark>
  </revision>
  <revision>
    <version>0.3</version>
    <date>2006-11-06</date>
    <initials>psa</initials>
    <remark><p>Removed reliability features, which belong at a different level.</p></remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2006-09-21</date>
    <initials>psa</initials>
    <remark><p>Added two more scenarios; defined business rule about not sending to bare JIDs; specified security consideration regarding presence leaks.</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2006-04-11</date>
    <initials>psa</initials>
    <remark><p>Initial version.</p></remark>
  </revision>
  <revision>
    <version>0.0.2</version>
    <date>2006-04-07</date>
    <initials>psa</initials>
    <remark><p>Added text and examples for service discovery; added text and examples for chat session negotiation; added recommendations regarding message processing, retries, etc.</p></remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2006-03-27</date>
    <initials>psa</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>

<section1 topic='Introduction' anchor='intro'>
  <p>While &xep0079; provides message acknowledgements at the server level, it does not extend that model all the way to the client. <note>Naturally, message receipts can be combined with the rules specified in <cite>Advanced Message Processing</cite> for more complete reporting.</note> However, sometimes client-level acknowledgements are needed, for example to provide "receipts". This document defines a mechanism for XMPP message receipts, which are functionally equivalent to the "delivered" or "displayed" event in &xep0022;, which this specification in part obsoletes. <note>This specification does not distinguish between delivery and presentation, as was done in the message events protocol, in part because no existing clients make the distinction.</note></p>
  <p>Note: This extension is functionally equivalent to an <cite>Advanced Message Processing</cite> rule of "receipt" but uses a dedicated namespace to simplify processing by end user clients and intermediate routers.</p>
</section1>

<section1 topic='Requirements' anchor='reqs'>
  <p>This document addresses the following requirements:</p>
  <ol>
    <li>Enable a sender to request notification that an XMPP message stanza has been received.</li>
    <li>Enable a recipient to provide message receipts if desired.</li>
  </ol>
</section1>

<section1 topic='What This Protocol Provides' anchor='what'>
  <p>This document defines a protocol that enables a sender to ask the recipient to return a receipt for a message. Although the return of a message receipt lets the sender know that the message has been delivered, there are many reasons why the sender might not receive a receipt immediately or at all, including but not limited to the following:</p>
  <ul>
    <li>The sender addressed the message to the recipient's bare JID &LOCALBARE; and therefore does not know if the recipient even supports message receipts.</li>
    <li>The sender has not bothered to determine whether the recipient supports message receipts.</li>
    <li>The recipient (or the particular intended resource to which the sender addressed the message) does not in fact support message receipts.</li>
    <li>The intended resource supports message receipts but the recipient's server delivers the message to another resource that does not support message receipts.</li>
    <li>The recipient's client receives the message but experiences a malfunction before generating a receipt.</li>
    <li>The recipient returns a receipt but the receipt is lost on the way back from the recipient to the sender (e.g., because of connectivity issues or software failures at any hop).</li>
    <li>The recipient simply does not wish to return a receipt for the sent message.</li>
  </ul>
  <p>Because of these significant limitations, this protocol does not provide complete or even partial reliability or guaranteed delivery. Therefore, the sender SHOULD NOT impute any meaning to the lack of a receipt unless it has established with the recipient that receipt requests will be honored; however, methods for doing so are out of scope for this specification and it is NOT RECOMMENDED to take any particular action (such as resending a message) without such methods. <note>This protocol merely provides a building block that could be used in conjunction with other protocols to asymptotically approach the eventual goal of messaging reliability and guaranteed delivery.</note></p>
</section1>

<section1 topic='When to Request Receipts' anchor='when'>
  <p>A sender <em>could</em> request receipts on any non-error message (chat, groupchat, headline, or normal) no matter if the recipient's address is a bare JID &LOCALBARE; or a full JID &LOCALFULL;. Whether it is <em>appropriate</em> or <em>advisable</em> to do so it another question. This section provides recommendations about when and when not to request receipts, and what results to expect in each scenario.</p>
  <section2 topic='Bare JID' anchor='when-bare'>
    <p>If the sender knows only the recipient's bare JID, it cannot cannot determine (via disco or caps) whether the intended recipient supports message receipts. In this case, the sender MAY request a receipt when sending a message of type "chat", "headline", or "normal" to the recipient's bare JID. However, the sender MUST NOT depend on receiving a receipt.</p>
  </section2>
  <section2 topic='Full JID' anchor='when-full'>
    <p>If the sender knows a full JID for the recipient (e.g., via presence), it SHOULD attempt to determine (via disco or caps) whether the client at that full JID supports message receipts before attempting to request receipts.</p>
    <p>If the sender determines that the recipient's client does not support message receipts then it SHOULD NOT request a receipt when sending a message to that full JID and MUST NOT depend on receiving a receipt.</p>
    <p>If the sender determines that the recipient's client supports message receipts then it MAY request a receipt when sending a message of type "chat", "headline", or "normal" to that full JID. However, even in this case the sender SHOULD NOT depend on receiving a receipt.</p>
  </section2>
  <section2 topic='Groupchat' anchor='when-groupchat'>
    <p>It is NOT RECOMMENDED to request a receipt when sending a message of type "groupchat" in a &xep0045; room because the logic for determining when a message is truly "received" by all of the room occupants is complex and because the sender would receive one receipt from each occupant of the room, thus significantly increasing the number of messages sent through the room.</p>
  </section2>
</section1>

<section1 topic='Determining Support' anchor='disco'>
  <p>If an entity supports message receipts, it MUST report that by including a &xep0030; feature of "urn:xmpp:receipts" in response to disco#info requests:</p>
  <example caption="Initial Service Discovery information request"><![CDATA[
<iq from='northumberland@shakespeare.lit/westminster'
    id='disco1'
    to='kingrichard@royalty.england.lit/throne'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
  ]]></example>
  <example caption="Service Discovery information response"><![CDATA[
<iq from='kingrichard@royalty.england.lit/throne'
    id='disco1'
    to='northumberland@shakespeare.lit/westminster'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <feature var='urn:xmpp:receipts'/>
  </query>
</iq>
  ]]></example>
  <p>Support can also be determined via &xep0115; a.k.a. "caps".</p>
</section1>

<section1 topic='Protocol Format' anchor='format'>
  <p>In order to make it possible for senders to request and for recipients to generate message receipts, we define a dedicated protocol extension qualified by the 'urn:xmpp:receipts' namespace.</p>
  <p>There are two allowable elements in this namespace:</p>
  <ul>
    <li>&lt;request/&gt; -- included by a sending entity that wishes to know if the message has been received.</li>
    <li>&lt;received/&gt; -- included by a receiving entity that wishes to inform the sending entity that the message has been received.</li>
  </ul>
  <p>Specifically, the receiving entity shall return a &lt;received/&gt; notice if it has received and processed the message. The term "processed" is understood to include presentation to a human user if appropriate or any other application-specific client-side processing, including generation of an error response if the application determines that the message contents cannot be handled.</p>
  <p>The following is an example of a message that includes a request for return receipt.</p>
  <example caption='A message with receipt requested'><![CDATA[
<message
    from='northumberland@shakespeare.lit/westminster'
    id='richard2-4.1.247'
    to='kingrichard@royalty.england.lit/throne'>
  <body>My lord, dispatch; read o'er these articles.</body>
  <request xmlns='urn:xmpp:receipts'/>
</message>
  ]]></example>
  <p class='box'>Note: A sender MUST include an 'id' attribute on every message that requests a receipt, so that the sender can properly track the receipt.</p>
  <p>The recipient shall generate a receipt if and only if it supports the protocol defined herein and it is configured to return receipts, either globally or for this recipient (otherwise it MUST NOT return a receipt and SHOULD NOT return an error).</p>
  <example caption='A message receipt'><![CDATA[
<message
    from='kingrichard@royalty.england.lit/throne'
    id='bi29sg183b4v'
    to='northumberland@shakespeare.lit/westminster'>
  <received xmlns='urn:xmpp:receipts' id='richard2-4.1.247'/>
</message>
  ]]></example>
  <p>The &lt;received/&gt; element SHOULD be the only child of the &MESSAGE; stanza and SHOULD include an 'id' attribute that echoes the 'id' attribute of the sent message.</p>
</section1>

<section1 topic='Security Considerations' anchor='security'>
  <p>It is possible for a recipient to leak its presence when returning message receipts; therefore, a recipient SHOULD NOT return message receipts to senders who are not otherwise authorized to view its presence.</p>
</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>No interaction with &IANA; is necessary as a result of this document.</p>
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Protocol Namespaces' anchor='ns'>
    <p>The &REGISTRAR; includes "urn:xmpp:receipts" in its registry of protocol namespaces (see &NAMESPACES;).</p>
  </section2>
</section1>

<section1 topic='XML Schema' anchor='schema'>
  <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:receipts'
    xmlns='urn:xmpp:receipts'
    elementFormDefault='qualified'>

  <xs:annotation>
    <xs:documentation>
      The protocol documented by this schema is defined in
      XEP-0184: http://xmpp.org/extensions/xep-0184.html
    </xs:documentation>
  </xs:annotation>

  <xs:element name='received'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:empty'>
          <xs:attribute name='id' type='xs:string' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='request' type='empty'/>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
  ]]></code>
</section1>

<section1 topic='Acknowledgements' anchor='ack'>
  <p>Thanks to Joe Kemp, Kevin Smith, Remko Tronçon, and Matthew Wild for their input.</p>
</section1>

</xep>
