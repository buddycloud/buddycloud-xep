<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Jingle SOCKS5 Bytestreams Transport Method</title>
  <abstract>This specification defines a Jingle transport method that results in sending data via the SOCKS5 Bytestreams (S5B) protocol defined in XEP-0065. Essentially this transport method reuses XEP-0065 semantics for sending the data and defines native Jingle methods for starting and ending an S5B session.</abstract>
  &LEGALNOTICE;
  <number>xxxx</number>
  <status>ProtoXEP</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0030</spec>
    <spec>XEP-0065</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>jingle-s5b</shortname>
  &stpeter;
  <author>
    <firstname>Dirk</firstname>
    <surname>Meyer</surname>
    <email>dmeyer@tzi.de</email>
    <jid>dmeyer@jabber.org</jid>
  </author>
  <revision>
    <version>0.0.3</version>
    <date>2009-02-18</date>
    <initials>psa</initials>
    <remark><p>Clarified order of events to be consistent with raw-udp and ice-udp.</p></remark>
  </revision>
  <revision>
    <version>0.0.2</version>
    <date>2009-02-11</date>
    <initials>dm</initials>
    <remark><p>Add additional text to use NAT assisting protocols and allow the responder to also send &lt;streamhost/&gt; information. This change required the introduction of streamhost-used and streamhost-error.</p></remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2009-02-10</date>
    <initials>psa</initials>
    <remark><p>Rough draft.</p></remark>
  </revision>
</header>

<section1 topic='Introduction' anchor='intro'>
  <p>&xep0166; defines a framework for negotiating and managing data sessions over XMPP. In order to provide a flexible framework, the base Jingle specification defines neither data transport methods nor application formats, leaving that up to separate specifications. The current document defines a transport method for establishing and managing data exchanges between XMPP entities using the existing SOCKS5 Bytestreams (S5B) protocol specified in &xep0065;. This "jingle-s5b" method results in a streaming transport method suitable for use in Jingle application types where packet loss cannot be tolerated (e.g., file transfer).</p>
  <p>It is RECOMMENDED that a client offers as much &lt;streamhost/&gt; elements with itself as StreamHost as possible. This includes opening the TCP port on all available interfaces the user wants to use (e.g. maybe not an expensive UMTS link), both the IPv4 and IPv6 of that interface (if available), and using an assisting NAT protocol if possible. If the client knows it is behind and the router announces UPnP IGD or NAT-PMP support, the client SHOULD map the open port to the external interface of the router and include the public IP address and port information in the &lt;streamhost/&gt; offers. To increase the chance of success without using a proxy, this specification allows the responder to also send offers.</p>
</section1>

<section1 topic='Protocol' anchor='protocol'>
  <para>The basic flow is as follows.</para>
  <code><![CDATA[
Romeo                               Juliet
  |                                  |
  |  session-initiate                |
  |  (with S5B info)                 |
  |--------------------------------->|
  |  ack                             |
  |<---------------------------------|
  |  session-accept                  |
  |  (with S5B info)                 |
  |<---------------------------------|
  |  ack                             |
  |--------------------------------->|
  |  streamhost transport-info       |
  |<---------------------------------|
  |  ack                             |
  |--------------------------------->|
  |  streamhost-used transport-info  |
  |--------------------------------->|
  |  ack                             |
  |<---------------------------------|
  |  S5B "SESSION"                   |
  |<================================>|
  |  session-terminate               |
  |<---------------------------------|
  |  ack                             |
  |--------------------------------->|
  |                                  |
  ]]></code>
  <p>This flow is illustrated in the following examples (to prevent confusion these use a "stub" transport instead of a real application type).</p>
  <p>First the initiator sends a Jingle session-initiate request that contains one or more transport candidates, which in jingle-s5b are XEP-0065 streamhosts.</p>
  <example caption="Initiator sends session-initiate (stub)"><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='xn28s7gk'
    to='juliet@capulet.lit/balcony'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'>
          action='session-initiate'
          initiator='romeo@montague.lit/orchard'
          sid='a73sjjvkla37jfea'>
    <content creator='initiator' name='stub'>
      <description xmlns='urn:xmpp:jingle:apps:stub:0'/>
      <transport xmlns='urn:xmpp:jingle:transports:s5b:0'
                 sid='vj3hs98y'
        	 mode='tcp'>
        <streamhost
            jid='romeo@montague.lit/orchard'
            host='192.168.4.1'
            port='5086'/>
        <streamhost
            jid='streamhostproxy.example.net'
            host='24.24.24.1'
            zeroconf='_jabber.bytestreams'/>
      </transport>
    </content>
  </jingle>
</iq>
  ]]></example>
  <p>The responder immediately acknowledges receipt.</p>
  <example caption="Responder acknowledges session-initiate"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='xn28s7gk'
    to='romeo@montague.lit/orchard'
    type='result'/>
  ]]></example>
  <p>Depending on the application type, a user agent controlled by a human user might need to wait for the user to affirm a desire to proceed with the session before continuing. When the user agent has received such affirmation (or if the user agent can automatically proceed for any reason, e.g. because no human intervention is expected or because a human user has configured the user agent to automatically accept sessions with a given entity), it returns a Jingle session-accept message. This message MUST contain a &TRANSPORT; element qualified by the 'urn:xmpp:jingle:transports:s5b:0' namespace, which SHOULD in turn contain one &lt;streamhost/&gt; element for each SOCKS5 Bytestreams candidate generated by or known to the responder, but MAY instead be empty if the responder does not wish to offer any streamhosts or wishes to send each candidate as the payload of a transport-info message.</p>
  <p>Note: If the responder sends streamhost candidates, the chances of a successful connection are increased. For example, the initiator might be behind a NAT or might have no access to a proxy, whereas the responder might have a public IP address, might know about a streamhost proxy, or might have NAT penetration support like NAT-PMP in the router.</p>
  <p>In the following example, Juliet's client is the StreamHost and opens one port. The provided &lt;streamhost/&gt; elements are the (private) IPv4 address of the interface, a (public) IPv6 address, and the public IPv4 address created by mapping the private IP address/port using NAT-PMP.</p>
  <example caption="Responder sends session-accept with streamhost candidates"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='hwd987h'
    to='romeo@montague.lit/orchard'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'>
          action='session-accept'
          initiator='romeo@montague.lit/orchard'
          sid='a73sjjvkla37jfea'>
    <content creator='initiator' name='stub'>
      <description xmlns='urn:xmpp:jingle:apps:stub:0'/>
      <transport xmlns='urn:xmpp:jingle:transports:s5b:0'
                 sid='vj3hs98y'
        	 mode='tcp'>
        <streamhost
            jid='juliet@capulet.lit/balcony'
            host='192.169.1.10'
            port='6539'/>
        <streamhost
            jid='juliet@capulet.lit/balcony'
            host='134.102.201.180'
            port='16453'/>
        <streamhost
            jid='juliet@capulet.lit/balcony'
            host='2001:638:708:30c9:219:d1ff:fea4:a17d'
            port='6539'/>
      </transport>
    </content>
  </jingle>
</iq>
  ]]></example>
  <p>The initiator acknowledges receipt and tries to connect to the offered StreamHosts.</p>
  <example caption="Initiator acknowledges streamhost transport-info"><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='hwd987h'
    to='juliet@capulet.lit/balcony'
    type='result'/>
  ]]></example>
  <p>Once one client has successfully created a connection with a StreamHost, it sends the &lt;streamhost-used/&gt; element defined in XEP-0065 to the peer; as a result, both clients will stop trying to connect to other candidates. <note>If both clients happen to send the streamhost-used message at the same time (two connections are open), the StreamHost chosen by the initiator wins (consistent with the rules in <cite>XEP-0166</cite>) and the responder closes the streamhost connection it was able to establish.</note></p>
  <example caption="Initiator sends streamhost-used in Jingle transport-info"><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='hjdi8'
    to='juliet@capulet.lit/balcony'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'>
          action='transport-info'
          initiator='romeo@montague.lit/orchard'
          sid='a73sjjvkla37jfea'>
    <content creator='initiator' name='stub'>
      <transport xmlns='urn:xmpp:jingle:transports:s5b:0'
                 sid='vj3hs98y'
        	 mode='tcp'>
        <streamhost-used
            jid='juliet@capulet.lit/balcony'
            host='134.102.201.180'
            port='16453'/>
      </transport>
    </content>
  </jingle>
</iq>
  ]]></example>
  <p>The peer immediately acknowledges receipt.</p>
  <example caption="Responder acknowledges streamhost-used message"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='hjdi8'
    to='romeo@montague.lit/orchard'
    type='result'/>
  ]]></example>
  <p>The initiator can then immediately begin sending data over the SOCKS5 bytestream as described in XEP-0065 (in fact the streamhost is bidirectional, so the responder can use it as well).</p>
  <p>Once the parties have finished using the bytestream (e.g., because a complete file has been sent), either party can send a Jingle session-terminate action.</p>
  <example caption="Initiator terminates the session"><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='hz81vf48'
    to='juliet@capulet.lit/balcony'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'
          action='session-terminate'
          initiator='romeo@montague.lit/orchard'
          sid='a73sjjvkla37jfea'>
    <reason><success/></reason>
  </jingle>
</iq>
  ]]></example>
  <p>The other party then acknowledges the session-terminate and the Jingle session is finished.</p>
  <example caption="Responder acknowledges session-terminate"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='hz81vf48'
    to='romeo@montague.lit/orchard'
    type='result'/>
  ]]></example>
</section1>

<section1 topic='Fallback to IBB' anchor='fallback'>
  <p>The session flow is as follows.</p>
  <code><![CDATA[
Romeo                               Juliet
  |                                  |
  |  session-initiate                |
  |  (with S5B info)                 |
  |--------------------------------->|
  |  ack                             |
  |<---------------------------------|
  |  session-accept                  |
  |  (with S5B info)                 |
  |<---------------------------------|
  |  [ SOCKS5 failure! ]             |
  |x--------------------------------x|
  |  transport-replace (IBB)         |
  |--------------------------------->|
  |  ack                             |
  |<---------------------------------|
  |  IBB "SESSION"                   |
  |=================================>|
  |  terminate                       |
  |<---------------------------------|
  |  ack                             |
  |--------------------------------->|
  |                                  |
  ]]></code>
  <p>The protocol flow is as follows.</p>
  <p>First the initiator sends a Jingle session-initiate, in this case with a transport of SOCKS5 Bytestreams.</p>
  <example caption="Initiator sends session-initiate"><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='jingle1'
    to='juliet@capulet.lit/balcony'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'
          action='session-initiate'
          initiator='romeo@montague.lit/orchard'
          sid='851ba2'>
    <content creator='initiator' name='a-file-offer'>
      <description xmlns='urn:xmpp:jingle:apps:stub:0'/>
      <transport xmlns='urn:xmpp:jingle:transports:s5b:0'
                 sid='vj3hs98y' 
        	 mode='tcp'>
        <streamhost 
            jid='romeo@montague.lit/orchard' 
            host='192.168.4.1' 
            port='5086'/>
        <streamhost 
            jid='streamer.shakespeare.lit' 
            host='24.24.24.1' 
            zeroconf='_jabber.bytestreams'/>
      </transport>
    </content>
  </jingle>
</iq>
  ]]></example>
  <p>The responder acknowledges receipt of the session-initiate and sends a session-accept.</p>
  <example caption="Responder acknowledges session-initiate"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='jingle1'
    to='romeo@montague.lit/orchard'
    type='result'/>
  ]]></example>
  <example caption="Responder sends session-accept with streamhost candidates"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='hwd987h'
    to='romeo@montague.lit/orchard'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'>
          action='session-accept'
          initiator='romeo@montague.lit/orchard'
          sid='a73sjjvkla37jfea'>
    <content creator='initiator' name='stub'>
      <description xmlns='urn:xmpp:jingle:apps:stub:0'/>
      <transport xmlns='urn:xmpp:jingle:transports:s5b:0'
                 sid='vj3hs98y'
        	 mode='tcp'>
        <streamhost
            jid='juliet@capulet.lit/balcony'
            host='192.169.1.10'
            port='6539'/>
        <streamhost
            jid='juliet@capulet.lit/balcony'
            host='134.102.201.180'
            port='16453'/>
        <streamhost
            jid='juliet@capulet.lit/balcony'
            host='2001:638:708:30c9:219:d1ff:fea4:a17d'
            port='6539'/>
      </transport>
    </content>
  </jingle>
</iq>
  ]]></example>
  <p>The initiator acknowledges receipt and tries to connect to the offered StreamHosts.</p>
  <example caption="Initiator acknowledges streamhost transport-info"><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='hwd987h'
    to='juliet@capulet.lit/balcony'
    type='result'/>
  ]]></example>
  <p>If initiator or responder is unable to connect to any of the StreamHosts, it MUST send a &lt;streamhost-error/&gt; transport-info to the peer.</p>
  <example caption="Responder was unable to connect to any StreamHosts"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='jfd75jk'
    to='romeo@montague.lit/orchard'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'
          action='transport-info'
          initiator='romeo@montague.lit/orchard'
          responder='juliet@capulet.lit/balcony'
          sid='a73sjjvkla37jfea'>
    <content creator='initiator' name='stub'>
      <transport xmlns='urn:xmpp:jingle:transports:s5b:0'
                 sid='vj3hs98y'
        	 mode='tcp'>
        <streamhost-error/>
      </transport>
    </content>
  </jingle>
</iq>
  ]]></example>
  <p>The peer immediately acknowledges receipt.</p>
  <example caption="Initiator acknowledges streamhost-error"><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='jfd75jk'
    to='juliet@capulet.lit/balcony'
    type='result'/>
  ]]></example>
  <p>If the initiator receives such an error message from the responder and was also unable to connect to any StreamHosts (or did not receive any from the responder), it MUST either terminate the Jingle session with a Jingle reason of &lt;connectivity-error/&gt; or replace the transport by something else using the transport-replace action. Typically the fallback option is &xep0047;. Therefore the initiator sends a transport-replace action including a transport of IBB.</p>
    <example caption="Initiator replaces transport with IBB"><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='hs92n57'
    to='juliet@capulet.lit/balcony'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'
          action='transport-replace'
          initiator='romeo@montague.lit/orchard'
          sid='851ba2'>
    <content creator='initiator' name='a-file-offer'>
      <transport xmlns='urn:xmpp:jingle:transports:ibb:0'
                 block-size='4096'
                 sid='ch3d9s71'/>
    </content>
  </jingle>
</iq>
    ]]></example>
    <p>The responder then acknowledges the transport-replace action.</p>
    <example caption="Responder acknowledges transport-replace"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='hs92n57'
    to='romeo@montague.lit/orchard'
    type='result'/>
    ]]></example>
    <p>If the transport replacement is acceptable, the responder then sends a transport-accept action to the initiator (if not, the responder sends a transport-reject action).</p>
    <example caption="Responder sends session-accept"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='is71ns63'
    to='romeo@montague.lit/orchard'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'
          action='transport-accept'
          initiator='romeo@montague.lit/orchard'
          sid='851ba2'>
    <content creator='initiator' name='a-file-offer'>
      <transport xmlns='urn:xmpp:jingle:transports:ibb:0'
                 block-size='4096'
                 sid='ch3d9s71'/>
    </content>
  </jingle>
</iq>
    ]]></example>
    <p>The initiator acknowledges the Jingle transport-accept action.</p>
    <example caption="Initiator acknowledges transport-accept"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='is71ns63'
    to='romeo@montague.lit/orchard'
    type='result'/>
    ]]></example>
    <p>Now the initiator sends data using In-Band Bytestreams as defined in <cite>XEP-0047</cite>.</p>
</section1>

<section1 topic='Processing Rules and Usage Guidelines' anchor='rules'>
  <p>The same processing rules and usage guidelines defined in XEP-0065 apply to the Jingle S5B Transport Method. Additional implementation suggestions are:</p>
  <ol>
    <li>A client should try the offered StreamHosts in the given order.</li>
    <li>If more than one &lt;streamhost/&gt; element is present a client should wait 200ms before trying the next one.</li>
    <li>If the JID of a StreamHosts is not the one of the peer it indicates the usage of a proxy. If the client had offered direct connection information it MAY want to wait a little bit longer than 200ms before trying the first proxy to allow the peer to connect without the usage of a proxy.</li>
    <li>A client should NOT wait for a TCP timeout on connect. If it is unable to connect to any StreamHost within 5 seconds it should send the streamhost-error.</li>
  </ol>
</section1>

<section1 topic='Security Considerations' anchor='security'>
  <p>The same security considerations defined in XEP-0065 apply to the Jingle S5B Transport Method.</p>
</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document requires no interaction with &IANA;.</p>
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Jingle Transport Methods' anchor='registrar-transports'>
    <p>The XMPP Registrar shall add to its registry of Jingle transport methods a definition for the "jingle-s5b" transport method. The registry submission is as follows:</p>
    <code><![CDATA[
<transport>
  <name>s5b</name>
  <desc>A method for exchanging data over SOCKS5 Bytestreams.</desc>
  <type>streaming</type>
  <doc>XEP-xxxx</doc>
</transport>
    ]]></code>
  </section2>
</section1>

<section1 topic='Schema' anchor='schema'>
  <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:jingle:transports:s5b:0'
    xmlns='urn:xmpp:jingle:transports:s5b:0'
    elementFormDefault='qualified'>

  <xs:element name='transport'>
    <xs:complexType>
      <xs:choice>
        <xs:element ref='streamhost' minOccurs='0' maxOccurs='unbounded'/>
      </xs:choice>
      <xs:attribute name='sid' type='xs:string' use='optional'/>
      <xs:attribute name='mode' use='optional' default='tcp'>
        <xs:simpleType>
          <xs:restriction base='xs:NCName'>
            <xs:enumeration value='tcp'/>
            <xs:enumeration value='udp'/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <xs:element name='streamhost'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='jid' type='xs:string' use='required'/>
          <xs:attribute name='host' type='xs:string' use='required'/>
          <xs:attribute name='zeroconf' type='xs:string' use='optional'/>
          <xs:attribute name='port' type='xs:string' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='streamhost-used'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='jid' type='xs:string' use='required'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='streamhost-error'/>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
  ]]></code>
</section1>
</xep>
