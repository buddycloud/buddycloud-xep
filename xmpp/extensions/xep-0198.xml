<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Stream Management</title>
  <abstract>This specification defines an XMPP protocol extension for active management of an XML stream between two XMPP entities, including features for stanza acknowledgements, stream resumption, and throttling notifications.</abstract>
  &LEGALNOTICE;
  <number>0198</number>
  <status>Draft</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <dependencies>
    <spec>XMPP Core</spec>
  </dependencies>
  <supersedes>None</supersedes>
  <supersededby>None</supersededby>
  <shortname>sm</shortname>
  <schemaloc>
    <url>http://xmpp.org/schemas/sm.xsd</url>
  </schemaloc>
  &infiniti;
  &hildjj;
  &stpeter;
  &fabio;
  <revision>
    <version>1.1</version>
    <date>2010-03-05</date>
    <initials>psa/jk</initials>
    <remark><p>Corrected value of 'h' so that zero means no stanzas have yet been handled; clarified distinction between a cleanly closed stream and an unfinished stream.</p></remark>
  </revision>
  <revision>
    <version>1.0</version>
    <date>2009-06-17</date>
    <initials>psa</initials>
    <remark><p>Per a vote of the XMPP Council, advanced specification from Experimental to Draft.</p></remark>
  </revision>
  <revision>
    <version>0.10</version>
    <date>2009-06-11</date>
    <initials>psa</initials>
    <remark><p>Editorial review.</p></remark>
  </revision>
  <revision>
    <version>0.9</version>
    <date>2009-06-03</date>
    <initials>psa</initials>
    <remark>
      <ul>
        <li>Specified that the value of the 'h' attribute starts at zero, not one.</li>
        <li>Specified that the 'h' attribute is an unsignedInt and that it loops back to zero when reaching 2^32.</li>
        <li>Added security consideration regarding session resumption and removed security consideration regarding proxies.</li>
        <li>Clarified the meaning of handled as defining which entity has responsibility for a stanza.</li>
        <li>Corrected schema and examples.</li>
      </ul>
    </remark>
  </revision>
  <revision>
    <version>0.8</version>
    <date>2009-04-09</date>
    <initials>ff/jk/jjh/psa</initials>
    <remark>
      <ul>
        <li>Added &lt;t/&gt; element for throttling notifications, including 'stanzas' attribute for dynamic adjustment of the stanzas window.</li>
        <li>Simplified protocol by making the sequence number increment per stanza and removing the u attribute (which is now unnecessary).</li>
        <li>Removed 'h' attribute from &lt;r/&gt; element.</li>
        <li>Added 'max' and 'stanzas' attributes to both &lt;enable/&gt; and &lt;enabled/&gt; elements, and removed those attributes from the &lt;sm/&gt; element.</li>
        <li>Incremented the protocol version from 1 to 2.</li>
        <li>Added in-depth usage scenarios.</li>
      </ul>
    </remark>
  </revision>
  <revision>
    <version>0.7</version>
    <date>2009-03-30</date>
    <initials>jjh/psa</initials>
    <remark><p>Removed pings (use XEP-0199, whitespace pings, or TCP keepalives instead); removed section on throttling, since it is unworkable.</p></remark>
  </revision>
  <revision>
    <version>0.6</version>
    <date>2009-03-19</date>
    <initials>psa</initials>
    <remark>
      <ul>
        <li>Incremented protocol version from 0 to 1.</li>
        <li>Changed attribute names from c (?) and b (?) to u (unacknowledged) and h (handled).</li>
        <li>Added stanzas attribute to specify maximum number of stanzas between acking requests.</li>
        <li>More clearly defined error handling using &lt;failed/&gt; element plus stanza error conditions.</li>
        <li>Defined error handling for &lt;ping/&gt; element by allowing stanza error conditions in &lt;pong/&gt; element.</li>
        <li>More clearly specified maximum reconnect time.</li>
        <li>Added detailed scenarios for basic acking and for outbound and inbound throttling.</li>
      </ul>
    </remark>
  </revision>
  <revision>
    <version>0.5</version>
    <date>2008-09-29</date>
    <initials>psa</initials>
    <remark><p>Removed recommendation to use namespace prefixes; modified namespace to incorporate namespace versioning.</p></remark>
  </revision>
  <revision>
    <version>0.4</version>
    <date>2008-09-08</date>
    <initials>jjh/jk/psa</initials>
    <remark><p>Added support for session resumption; re-organized the document; changed name to stream management; changed provisional namespace.</p></remark>
  </revision>
  <revision>
    <version>0.3</version>
    <date>2007-10-03</date>
    <initials>jk</initials>
    <remark><p>Updates per devcon discussion.</p></remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2007-04-05</date>
    <initials>jk</initials>
    <remark><p>Require c attribute on &lt;r/&gt; element. Describe minimal implementation. Switch to standard temporary namespace.</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2006-11-21</date>
    <initials>psa</initials>
    <remark><p>Initial published version.</p></remark>
  </revision>
  <revision>
    <version>0.0.3</version>
    <date>2006-11-08</date>
    <initials>jk</initials>
    <remark>New version, using sequence numbers.</remark>
  </revision>
  <revision>
    <version>0.0.2</version>
    <date>2004-12-11</date>
    <initials>jk</initials>
    <remark>Further clarification, allow acking many stanzas at once.</remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2004-08-09</date>
    <initials>jk</initials>
    <remark>First draft.</remark>
  </revision>
</header>

<section1 topic='Introduction' anchor='intro'>
  <p>&xmppcore; defines the fundamental streaming XML technology used by XMPP (i.e., stream establishment and termination including authentication and encryption). However, the core XMPP specification does not provide tools for actively managing a "live" XML stream.</p>
  <p>The basic concept behind stream management is that the initiating entity (either a client or a server) and the receiving entity (a server) can exchange "commands" for active management of the stream. The following stream management features are of particular interest because they are expected to improve network reliability and the end-user experience:</p>
  <ul>
    <li>Acks -- the ability to know if a stanza or series of stanzas has been received by one's peer.</li>
    <li>Resumption -- the ability to quickly resume a stream that has been terminated.</li>
    <li>Throttling -- the ability for the receiving entity to inform the initiating entity that rate limiting is in force.</li>
  </ul>
  <p>Stream management implements these features using short XML elements at the root stream level. These elements are not "stanzas" in the XMPP sense (i.e., not &IQ;, &MESSAGE;, or &PRESENCE; stanzas as defined in &rfc3920;) and are not counted or acked in stream management, since they exist for the purpose of managing stanzas themselves.</p>
  <p>Stream management is used at the level of an XML stream. To check TCP connectivity underneath a given stream, it is RECOMMENDED to use &xep0199;, whitespace keepalives (see Section 5.7.3 of &rfc3920bis;), or TCP keepalives. By constrast with stream management, &xep0079; and &xep0184; define acks that are sent end-to-end over multiple streams; these facilities are useful in special scenarios but are unnecessary for checking of a direct stream between two XMPP entities.</p>
  <p>(Examples prepended by "C:" are sent by a client and examples prepended by "S:" are sent by a server. Stream management can be used server-to-server but most of the examples in this specification show its use between a client and a server.)</p>
</section1>

<section1 topic='Stream Feature' anchor='feature'>
  <p>After negotiating use of TLS and authenticating via SASL, the receiving entity returns a new stream header to the intiating entity along with stream features, where the features include an &lt;sm/&gt; element qualified by the 'urn:xmpp:sm:2' namespace &VNOTE;.</p>
  <p>The stream management feature MUST NOT be offered unless the initiating entity has been authenticated (e.g., by means of SASL, &xep0078;, or &xep0220;).</p>
  <example caption='Server sends new stream header along with stream features'><![CDATA[
S: <stream:stream
       from='example.com'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'
       version='1.0'>

S: <stream:features>
     <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'>
       <required/>
     </bind>
     <sm xmlns='urn:xmpp:sm:2'>
       <optional/>
     </sm>
   </stream:features>
  ]]></example>
</section1>

<section1 topic='Enabling Stream Management' anchor='enable'>
  <p>To enable use of stream management, the initiating entity sends an &lt;enable/&gt; command to the receiving entity.</p>
  <example caption='Client enables stream management'><![CDATA[
C: <enable xmlns='urn:xmpp:sm:2'/>
  ]]></example>
  <p>If the initiating entity wants to be allowed to resume the stream, it includes a boolean 'resume' attribute, which defaults to false &BOOLEANNOTE;. For information about resuming a previous session, see the <link url='#resumption'>Resumption</link> section of this document.</p>
  <p>The &lt;enable/&gt; element MAY include a 'max' attribute to specify the initiating entity's preferred maximum resumption time in seconds.</p>
  <p>The &lt;enable/&gt; element MAY include a 'stanzas' attribute to specify the initiating entity's preferred number of stanzas between acks.</p>
  <p>Upon receiving the enable request, the receiving entity MUST reply with an &lt;enabled/&gt; element or a &lt;failed/&gt; element qualified by the 'urn:xmpp:sm:2' namespace. The &lt;failed/&gt; element indicates that there was a problem establishing the stream management "session". The &lt;enabled/&gt; element indicates successful establishment of the stream management session.</p>
  <example caption='Server enables stream management'><![CDATA[
S: <enabled xmlns='urn:xmpp:sm:2'/>
  ]]></example>
  <p>The parties can then the use stream management features defined below.</p>
  <p>If the receiving entity allows session resumption, it MUST include a 'resume' attribute set to a value of "true" or "1".</p>
  <example caption='Server enables stream management with session resumption'><![CDATA[
S: <enabled xmlns='urn:xmpp:sm:2' id='some-long-sm-id' resume='true'/>
  ]]></example>
  <p>The &lt;enabled/&gt; element MAY include a 'max' attribute to specify the receiving entity's preferred maximum resumption time.</p>
  <p>The &lt;enabled/&gt; element MAY include a 'stanzas' attribute to specify the receiving entity's preferred number of stanzas between acks.</p>
  <p>For client-to-server connections, the client SHOULD NOT attempt to enable stream management until after it has completed Resource Binding <em>unless it is resuming a previous session</em> (see <link url='#resumption'>Resumption</link>). The server MAY enforce this order and return a &lt;failed/&gt; element in response (see <link url='#errors'>Error Handling</link>).</p>
  <example caption='Server returns error if client attempts to enable stream management before resource binding'><![CDATA[
S: <failed xmlns='urn:xmpp:sm:2'>
     <unexpected-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
   </failed>
  ]]></example>
</section1>
  
<section1 topic='Acks' anchor='acking'>
  <p>After enabling stream management, the initiating or receiving entity can send ack elements at any time over the stream. An ack element is one of the following:</p>
  <ul>
    <li>The &lt;a/&gt; element is used to <strong>answer</strong> a request for acknowledgement or to send an unrequested ack.</li>
    <li>The &lt;r/&gt; element is used to <strong>request</strong> acknowledgement of received stanzas.</li>
  </ul>
  <p>The following attribute is defined:</p>
  <ul>
    <li>The 'h' attribute identifies the last <strong>handled</strong> stanza (i.e., the last stanza that the receiver will acknowledge as having received).</li>
  </ul>
  <p>An &lt;a/&gt; element MUST possess an 'h' attribute.</p>
  <p>An &lt;r/&gt; element SHOULD NOT possess any attributes.</p>
  <p class='def'><strong>Definition:</strong> Acknowledging a previously-received ack element indicates that the stanza(s) sent since then have been "handled" by the receiver. By "handled" we mean that the receiver has accepted responsibility for a stanza or stanzas (e.g., to process the stanza(s) directly, deliver the stanza(s) to a local entity such as another connected client on the same server, or route the stanza(s) to a remote entity at a different server); until a stanza has been affirmed as handled by the receiver, that stanza is the responsibility of the sender (e.g., to resend it or generate an error if it is never affirmed as handled by the receiver).</p>
  <p>Note: The value of 'h' starts at zero before any stanzas are handled, is incremented to one for the first stanza handled, and is incremented again with each subsequent stanza handled. In the unlikely case that the number of stanzas handled during a stream management session exceeds the number of digits that can be represented by the unsignedInt datatype as specified in &w3xmlschema2; (i.e., 2<span class='super'>32</span>), the value of 'h' shall be reset from 2<span class='super'>32</span>-1 back to zero (rather than being incremented to 2<span class='super'>32</span>).</p>
  <p>The following example shows a message sent by the client, a request for acknowledgement, and an ack of the stanza.</p>
  <example caption='Simple stanza acking'><![CDATA[
C: <message from='laurence@example.net/churchyard'
            to='juliet@example.com'
            xml:lang='en'>
     <body>
       I'll send a friar with speed, to Mantua, 
       with my letters to thy lord.
     </body>
   </message>

C: <r xmlns='urn:xmpp:sm:2'/>

S: <a xmlns='urn:xmpp:sm:2' h='0'/>
  ]]></example>
  <p>When an &lt;r/&gt; element ("request") is received, the recipient MUST acknowledge it by sending an &lt;a/&gt; element to the sender containing a value of 'h' that is equal to the number of stanzas handled by the recipient of the &lt;r/&gt; element. The response SHOULD be sent as soon as possible after receiving the &lt;r/&gt; element, and MUST NOT be withheld for any condition other than a timeout. For example, a client with a slow connection might want to collect many stanzas over a period of time before acking, and a server might want to throttle incoming stanzas. The sender does not have to wait for an ack to continue sending stanzas. Because acks indicate stanza acceptance, a server that is throttling stanzas MUST delay the response until the client is no longer being penalized (but SHOULD notify the client that it is throttling incoming stanzas, as described under <link url='#throttling'>Throttling</link>).</p>
  <p>When a party returns an ack in response to an &lt;r/&gt; element or receives such an ack, it SHOULD keep a record of the 'h' value returned as the sequence number of the last handled stanza for the current stream (and discard the previous 'h' value).</p>
  <p>If a stream ends and it is not resumed within the time specified in the original &lt;enabled/&gt; element, the sequence number and any associated state MAY be discarded by both parties. Before the session state is discarded, implementations SHOULD take alternative action regarding any unhandled stanzas (i.e., stanzas sent after the most recent 'h' value):</p>
  <ul>
    <li>A server SHOULD treat unacknowledged stanzas in the same way that it would treat a stanza sent to an unavailable resource, by either returning an error to the sender or committing the stanza to offline storage.</li>
    <li>A user-oriented client SHOULD try to silently resend the stanzas upon reconnection or inform the user of the failure via appropriate user-interface elements.</li>
  </ul>
</section1>

<section1 topic='Resumption' anchor='resumption'>
  <p>It can happen that an XML stream is terminated unexpectedly (e.g., because of network outages). In this case, it is desirable to quickly resume the former stream rather than complete the tedious process of stream establishment, roster retrieval, and presence broadcast.</p>
  <p>To request that the stream will be resumable, when enabling stream management the initiating entity MUST add a 'resume' attribute to the &lt;enable/&gt; element with a value of "true" or "1" &BOOLEANNOTE;.</p>
  <example caption='Client enables stream management'><![CDATA[
C: <enable xmlns='urn:xmpp:sm:2' resume='true'/>
  ]]></example>
  <p>If the receiving entity will allow the stream to be resumed, it MUST include a 'resume' attribute set to "true" or "1" on the &lt;enabled/&gt; element and MUST include an 'id' attribute that specifies an identifier for the stream.</p>
  <example caption='Server allows stream resumption'><![CDATA[
S: <enabled xmlns='urn:xmpp:sm:2' id='some-long-sm-id' resume='true'/>
  ]]></example>
  <p class='def'><strong>Definition:</strong> The 'id' attribute defines a unique identifier for purposes of stream management (an "SM-ID"). The SM-ID MUST be generated by the receiving entity (server). The initiating entity MUST consider the SM-ID to be opaque and therefore MUST NOT assign any semantic meaning to the SM-ID. The receiving entity MAY encode any information it deems useful into the SM-ID, such as the full JID &LOCALFULL; of a connected client (e.g., the full JID plus a nonce value). Any characters allowed in an XML attribute are allowed. The SM-ID MUST NOT be reused for simultaneous or subsequent sessions (but the server need not ensure that SM-IDs are unique for all time, only for as long as the server is continuously running). The SM-ID SHOULD NOT be longer than 4000 bytes.</p>
  <p>If the stream is terminated unexpectedly, the initiating entity would then open a TCP connection to the receiving entity. The order of events is as follows:</p>
  <ol start='1'>
    <li>Initiating entity sends initial stream header.</li>
    <li>Receiving entity sends response stream header.</li>
    <li>Receiving entity sends stream features.</li>
    <li>Initiating entity sends STARTTLS request.</li>
    <li>Receiving entity informs initiating entity to proceed with the TLS negotiation.</li>
    <li>The parties complete a TLS handshake. (Note: When performing session resumption and also utilizing TLS, it is RECOMMENDED to take advantage of TLS session resumption to further optimize the resumption of the XML stream.)</li>
    <li>Initiating entity sends new initial stream header.</li>
    <li>Receiving entity sends response stream header.</li>
    <li>Receiving entity sends stream features, requiring SASL negotiation and offering appropriate SASL mechanisms. (Note: If the server considers the information provided during TLS session resumption to be sufficient authentication, it MAY offer the SASL EXTERNAL mechanism; for details, refer to &sasltls;.)</li>
    <li>The parties complete SASL negotiation.</li>
    <li>Initiating entity sends new initial stream header.</li>
    <li>Receiving entity sends response stream header.</li>
    <li>Receiving entity sends stream features, offering the SM feature.</li>
    <li>Initiating entity requests resumption of the former stream.</li>
  </ol>
  <p>To request resumption of the former stream, the initiating entity sends a &lt;resume/&gt; element qualified by the 'urn:xmpp:sm:2' namespace. The &lt;resume/&gt; element MUST include a 'previd' attribute whose value is the SM-ID of the former stream and MAY include an 'h' attribute that identifies the sequence number of the last handled stanza sent over the former stream from the receiving entity to the initiating entity (if stream management was being used in both directions); if there is no such sequence number for the former stream, the 'h' attribute MUST NOT be included.</p>
  <example caption='Stream resumption request'><![CDATA[
C: <resume xmlns='urn:xmpp:sm:2' 
           h='some-sequence-number'
           previd='some-long-sm-id'/>
  ]]></example>
  <p>If the receiving entity can resume the former stream, it MUST return a &lt;resumed/&gt; element that includes a 'previd' attribute set to the SM-ID of the former stream. The &lt;resumed/&gt; element MAY also include an 'h' attribute set to the sequence number of the last handled stanza sent over the former stream from the initiating entity to the receiving entity; if there is no such sequence number for the former stream, the 'h' attribute MUST NOT be included.</p>
  <example caption='Stream resumed'><![CDATA[
S: <resumed xmlns='urn:xmpp:sm:2' 
            h='another-sequence-number'
            previd='some-long-sm-id'/>
  ]]></example>
  <p>If the receiving entity does not support session resumption, it MUST return a &lt;failed/&gt; element, which SHOULD include an error condition of &feature;. If the receiving entity does not recognize the 'previd' as an earlier session (e.g., because the former session has timed out), it MUST return a &lt;failed/&gt; element, which SHOULD include an error condition of &notfound;. In both of these failure cases, the receiving entity SHOULD allow the initiating entity to bind a resource at this point rather than forcing the initiating entity to restart the stream negotiation process and re-authenticate.</p>
  <p>If the former stream is resumed and the receiving entity still has the stream for the previously-identified session open at this time, the old stream SHOULD be terminated.</p>
  <p>When a session is resumed, the parties proceed as follows:</p>
  <ul>
    <li>Both parties SHOULD retransmit any stanzas that were not handled during the previous session, based on the sequence number reported by the peer.</li>
    <li>A reconnecting client SHOULD NOT request the roster, because any roster changes that occurred while the client was disconnected will be sent to the client after the stream management session resumes.</li>
    <li>The client SHOULD NOT resend presence stanzas in an attempt to restore its former presence state, since this state will have been retained by the server.</li>
    <li>Both parties SHOULD NOT try to re-establish state information (e.g., &xep0030; information).</li>
  </ul>
</section1>

<section1 topic='Throttling' anchor='throttling'>
  <p>When a server acts as a receiving entity for an XML stream, it might throttle the stream (i.e., impose rate limiting) if the initiating entity (a client or a server) attempts to send too much traffic over the stream (e.g., a very large number of stanzas, or a lesser number of stanzas that are relatively large). The formulas for determining when rate limiting shall be imposed are implementation-specific; however, nearly all XMPP server implementations include support for such throttling (often called "karma"). Therefore it would be helpful if the receiving entity could inform the initiating entity that the stream has been voluntarily throttled by the receiving entity. <note>Some forms of "throttling" can occur naturally at the TCP layer without being voluntarily imposed by the receiving entity; the receiving entity cannot inform the initiating entity about such throttling.</note> It can do so by sending a &lt;t/&gt; element to the receiving entity:</p>
  <example caption='Throttling notification'><![CDATA[
S: <t xmlns='urn:xmpp:sm:2'/>
  ]]></example>
  <p>Note: Sending a throttling notification to the stream peer does not necessarily indicate that the entity is throwing away all stanzas, only that the entity has voluntarily slowed its processing of incoming stanzas.</p>
  <p>The throttling notification MAY include a 'stanzas' attribute so that the receiving entity can inform the initiating entity of changes to the maximum number of stanzas between acks. This enables the receiving entity to dynamically adjust stanza acking in response to network conditions or stream usage.</p>
  <example caption='Throttling notification with acking adjustment'><![CDATA[
S: <t xmlns='urn:xmpp:sm:2' stanzas='5'/>
  ]]></example>
  <p>If the number of unacknowledged stanzas is greater than or equal to the value of the 'stanzas' attribute, a throttled peer MUST NOT send any further stanzas.</p>
  <p>If an entity sets the value of 'stanzas' to zero, it has stopped reading from the stream entirely.</p>
  <p>For as long as the initiating entity is throttled, the receiving entity SHOULD periodically send a throttling notification to the initiating entity (e.g., every 30 seconds) to obviate the need for pings generated by the initating entity (which the receiving entity will ignore because the initiating entity is throttled).</p>
</section1>

<section1 topic='Error Handling' anchor='errors'>
  <p>If an error occurs with regard to an &lt;enable/&gt; or &lt;resume/&gt; element, the receiving entity MUST return a &lt;failed/&gt; element. This element SHOULD contain an error condition, which MUST be one of the stanza error conditions defined in &rfc3920bis;.</p>
  <p>An example follows.</p>
  <example caption='Server returns error'><![CDATA[
S: <failed xmlns='urn:xmpp:sm:2'>
     <unexpected-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
   </failed>
  ]]></example>
  <p>Stream management errors SHOULD be considered recoverable; however, misuse of stream management MAY result in termination of the stream.</p>
</section1>

<section1 topic='Stream Closure' anchor='closure'>
  <p>A cleanly closed stream differs from an unfinished stream. If a client wishes to cleanly close its stream and end its session, it MUST send a &lt;/stream:stream&gt; so that the server can send unavailable presence on the client's behalf.</p>
  <p>If the stream is not cleanly closed then the server SHOULD consider the stream to be unfinished (even if the client closes its TCP connection to the server) and SHOULD maintain the session on behalf of the client for a limited amount of time. The client can send whatever presence it wishes before leaving the stream in an unfinished state.</p>
</section1>

<section1 topic='Scenarios' anchor='scenarios'>
  <p>The following scenarios illustrate several different uses of stream management. The examples are that of a client and a server, but stream management can also be used for server-to-server streams.</p>

  <section2 topic='Basic Acking Scenario' anchor='scenarios-basic'>
    <p>The Stream Management protocol can be used to improve reliability using acks without the ability to resume a session. A basic implementation would do the following:</p>
    <ul>
      <li>As an initiating entity, send &lt;enable/&gt; with no attributes, and ignore the attributes on the &lt;enabled/&gt; response.</li>
      <li>As a receiving entity, ignore the attributes on the &lt;enable/&gt; element received, and respond via &lt;enabled/&gt; with no attributes.</li>
      <li>When receiving an &lt;r/&gt; element, immediately respond via an &lt;a/&gt; element where the value of 'h' returned is the sequence number of the last handled stanza.</li>
      <li>Keep an integer X for this stream session, initially set to zero. When about to send a stanza, first put the stanza (paired with the current value of X) in an "unacknowleged" queue. Then send the stanza over the wire with &lt;r/&gt; to request acknowledgement of that outbound stanza, and increment X by 1. When receiving an &lt;r/&gt; or &lt;a/&gt; element with an 'h' attribute, all stanzas whose paired value (X at the time of queueing) is less than or equal to the value of 'h' can be removed from the unacknowledged queue.</li>
    </ul>
    <p>This is enough of an implementation to minimally satisfy the peer, and allows basic tracking of each outbound stanza. If the stream connection is broken, the application has a queue of unacknowledged stanzas that it can choose to handle appropriately (e.g., warn a human user or silently send after reconnecting).</p>
    <p>The following examples illustrate basic acking (here the client automatically acks each stanza it has received from the server, without first being prompted via an &lt;r/&gt; element).</p>
    <p>First, after authentication and resource binding, the client enables stream management.</p>
    <example caption='Client enables stream management'><![CDATA[
C: <enable xmlns='urn:xmpp:sm:2'/>
    ]]></example>
    <p>The server then enables stream management.</p>
  <example caption='Server enables stream management'><![CDATA[
S: <enabled xmlns='urn:xmpp:sm:2'/>
    ]]></example>
    <p>The client then retrieves its roster and immediately sends an &lt;r/&gt; element to request acknowledgement.</p>
    <example caption='Client sends a stanza and requests acknowledgement'><![CDATA[
C: <iq id='ls72g593' type='get'>
     <query xmlns='jabber:iq:roster'/>
   </iq>

C: <r xmlns='urn:xmpp:sm:2'/>
    ]]></example>
    <p>The server immediately sends an &lt;a/&gt; element to acknowledge handling of the stanza and then returns the roster.</p>
    <example caption='Server acknowledges handling of client stanza and sends a stanza'><![CDATA[
S: <a xmlns='urn:xmpp:sm:2' h='1'/>

S: <iq id='ls72g593' type='result'>
     <query xmlns='jabber:iq:roster'>
       <item jid='juliet@capulet.lit'/>
       <item jid='benvolio@montague.lit'/>
     </query>
   </iq>

    ]]></example>
    <p>The client then acknowledges receipt of the server's stanza, sends initial presence, and immediately sends an &lt;r/&gt; element to request acknowledgement, incrementing by one its internal representation of how many stanzas have been handled by the server.</p>
    <example caption='Client sends a stanza and requests acknowledgement'><![CDATA[
C: <a xmlns='urn:xmpp:sm:2' h='0'/>

C: <presence/>

C: <r xmlns='urn:xmpp:sm:2'/>
    ]]></example>
    <p>The server immediately sends an &lt;a/&gt; element to acknowledge handling of the stanza and then broadcasts the user's presence (including to the client itself as shown below).</p>
    <example caption='Server acknowledges handling of client stanza and sends a stanza'><![CDATA[
S: <a xmlns='urn:xmpp:sm:2' h='2'/>

S: <presence from='romeo@montague.lit/orchard' 
             to='romeo@montague.lit/orchard'/>
    ]]></example>
    <p>The client then acks the server's second stanza and sends an outbound message followed by an &lt;r/&gt; element.</p>
    <example caption='Client sends a stanza and requests acknowledgement'><![CDATA[
C: <a xmlns='urn:xmpp:sm:2' h='1'/>

C: <message to='juliet@capulet.lit'>
     <body>ciao!</body>
   </message>

C: <r xmlns='urn:xmpp:sm:2'/>
    ]]></example>
    <p>The server immediately sends an &lt;a/&gt; element to acknowledge handling of the stanza and then routes the stanza to the remote contact (not shown here because the server does not send a stanza to the client).</p>
    <example caption='Server acknowledges handling of the stanza'><![CDATA[
S: <a xmlns='urn:xmpp:sm:2' h='3'/>
    ]]></example>
    <p>And so on.</p>
  </section2>

  <section2 topic='Efficient Acking Scenario' anchor='scenarios-efficient'>
    <p>The basic acking scenario is wasteful because the client requested an ack for each stanza. A more efficient approach is to periodically request acks (e.g., every 5 stanzas) in accordance with the 'stanzas' attribute value provided by the receiving entity on the &lt;enabled/&gt; element. This is shown schematically in the following pseudo-XML.</p>
    <example caption='An efficient session'><![CDATA[
C: <enable/>
S: <enabled stanzas='5'/>
C: <message/>
C: <message/>
C: <message/>
C: <message/>
C: <message/>
C: <r/>
S: <a h='4'/>
C: <message/>
C: <message/>
C: <message/>
C: <message/>
C: <message/>
C: <r/>
S: <a h='9'/>
    ]]></example>
  </section2>

  <section2 topic='Throttling Scenario' anchor='scenarios-throttle'>
    <p>As mentioned, many servers will impose rate limiting on clients that send large amounts of traffic. In the following scenario, we assume that the first three messages sent by the client are rather large, so the server voluntarily throttles the client. The server then sends throttling notifications every 30 seconds, dynamically adjusting the maximum number of stanzas between acks as a rough indicator of how serious the throttling is.</p>
    <example caption='A session with throttling'><![CDATA[
C: <enable/>
S: <enabled stanzas='10'/>
C: <message/>
C: <message/>
C: <message/>

   [throttling kicks in]

S: <t stanzas='3'/>

   [client requests an ack for the first three messages, but
   does not send any more messages until throttling ends]

C: <r/>

   [client still throttled, server ignores <r/> for now]

   [30 seconds go by]

S: <t/>

   [30 seconds go by]

S: <t/>

   [backlog starts to ease, server adjusts 'stanzas' value]

S: <t stanzas='5'/>

   [client sends another message just because it can]

C: <message/>

   [server has handled the first 3 messages so it finally replies to <r/>]

S: <a h='2'/>
C: <message/>
C: <message/>
C: <message/>
C: <message/>

   [client has sent 5 messages so requests an ack]

C: <r/>

   [throttling is over, server replies to 2nd <r/> and sets 'stanzas' back to 10]

S: <a h='7'/>
S: <t stanzas='10'/>
    ]]></example>
  </section2>

</section1>

<section1 topic='Security Considerations' anchor='security'>
  <p>As noted, a receiving entity MUST NOT allow an initiating entity to resume a stream management session until after the initiating entity has authenticated (for some value of "authentication"); this helps to prevent session hijacking.</p>
</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>This XEP requires no interaction with &IANA;. </p>
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Protocol Namespaces' anchor='registrar-ns'>
    <p>This specification defines the following XML namespace:</p>
    <ul>
      <li>urn:xmpp:sm:2</li>
    </ul>
    <p>The &REGISTRAR; includes the foregoing namespace in its registry at &NAMESPACES;, as described in Section 4 of &xep0053;.</p>
  </section2>
  <section2 topic='Protocol Versioning' anchor='registrar-versioning'>
    &NSVER;
  </section2>
  <section2 topic='Stream Features' anchor='registrar-stream'>
    <p>The XMPP Registrar includes 'urn:xmpp:sm:2' in its registry of stream features at &STREAMFEATURES;.</p>
  </section2>
</section1>

<section1 topic='XML Schemas' anchor='schemas'>
  <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:sm:2'
    xmlns='urn:xmpp:sm:2'
    elementFormDefault='qualified'>

  <xs:annotation>
    <xs:documentation>
      The protocol documented by this schema is defined in
      XEP-0198: http://www.xmpp.org/extensions/xep-0198.html
    </xs:documentation>
  </xs:annotation>

  <xs:import namespace='urn:ietf:params:xml:ns:xmpp-stanzas'
             schemaLocation='http://xmpp.org/schemas/stanzaerror.xsd'/>

  <xs:element name='a'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='h' 
                        type='xs:integer' 
                        use='required'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='enable'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='max' 
                        type='xs:positiveInteger' 
                        use='optional'/>
          <xs:attribute name='resume' 
                        type='xs:boolean'
                        use='optional'
                        default='false'/>
          <xs:attribute name='stanzas' 
                        type='xs:unsignedShort' 
                        use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='enabled'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='id' 
                        type='xs:string'
                        use='optional'/>
          <xs:attribute name='max' 
                        type='xs:positiveInteger' 
                        use='optional'/>
          <xs:attribute name='resume' 
                        type='xs:boolean'
                        use='optional'
                        default='false'/>
          <xs:attribute name='stanzas' 
                        type='xs:unsignedShort' 
                        use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='failed'>
    <xs:complexType>
      <xs:sequence xmlns:err='urn:ietf:params:xml:ns:xmpp-stanzas' 
                   minOccurs='0'
                   maxOccurs='1'>
        <xs:group ref='err:stanzaErrorGroup'/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name='r'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='h' 
                        type='xs:integer' 
                        use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='resume' type='resumptionElementType'/>

  <xs:element name='resumed' type='resumptionElementType'/>

  <xs:element name='sm'>
    <xs:complexType>
      <xs:choice>
        <xs:element name='optional' type='empty'/>
        <xs:element name='required' type='empty'/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name='t'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='stanzas' 
                        type='xs:unsignedShort' 
                        use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:complexType name='resumptionElementType'>
    <xs:simpleContent>
      <xs:extension base='empty'>
        <xs:attribute name='h' 
                      type='xs:unsignedInt' 
                      use='optional'/>
        <xs:attribute name='previd' 
                      type='xs:string' 
                      use='optional'/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
  ]]></code>
</section1>

<section1 topic='Acknowledgements' anchor='ack'>
  <p>Thanks to Dave Cridland, Jack Erwin, Philipp Hancke, Curtis King, Tobias Markmann, Alexey Melnikov, Pedro Melo, Robin Redeker, Mickaël Rémond, and Matthew Wild for their feedback.</p>
</section1>

</xep>
