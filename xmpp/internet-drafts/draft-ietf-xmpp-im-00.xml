<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc compact="yes"?>
<?rfc strict="yes"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<rfc category="std" docName="draft-ietf-xmpp-im-00" ipr="trust200902" obsoletes="3921">

  <front>
    <title abbrev="XMPP IM">Extensible Messaging and Presence Protocol (XMPP): Instant Messaging and Presence</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization>Cisco</organization>
      <address>
        <email>psaintan@cisco.com</email>
      </address>
    </author>
    <date year="2009" month="June" day="1"/>
    <area>Applications</area>
    <keyword>XMPP</keyword>
    <keyword>Extensible Messaging and Presence Protocol</keyword>
    <keyword>Jabber</keyword>
    <keyword>IM</keyword>
    <keyword>Instant Messaging</keyword>
    <keyword>Presence</keyword>
    <keyword>XML</keyword>
    <keyword>Extensible Markup Language</keyword>
    <abstract>
      <t>This document defines extensions to core features of the Extensible Messaging and Presence Protocol (XMPP) that provide basic instant messaging (IM) and presence functionality in conformance with RFC 2779.</t>
      <t>This document obsoletes RFC 3921.</t>
    </abstract>
  </front>

  <middle>

  <section title="Introduction" anchor="intro">
    <section title="Overview" anchor="intro-overview">
      <t>The Extensible Messaging and Presence Protocol (XMPP) is an application profile of the Extensible Markup Language <xref target="XML"/> for streaming XML data in close to real time between any two (or more) network-aware entities.  XMPP is typically used to exchange messages, share presence information, and engage in structured request-response interactions.  The core features of XMPP defined in <xref target="xmpp-core"/> provide the building blocks for many types of near-real-time applications, which can be layered on top of the core by sending application-specific data qualified by particular XML namespaces (refer to <xref target="XML-NAMES"/>).  This document defines XMPP extensions that provide the basic functionality expected of an instant messaging (IM) and presence application as defined in <xref target="IMP-REQS"/>.</t>
      <t>As a result of extensive implementation and deployment experience with XMPP since 2004, as well as more formal interoperability testing carried out under the auspices of the XMPP Standards Foundation (XSF), this document reflects consensus from the XMPP developer community regarding XMPP's basic instant messaging and presence features.  In particular, this document incorporates the following backward-compatible changes from RFC 3921:</t>
      <t>
        <list style='symbols'>
          <t>Incorporated corrections and errata</t>
          <t>Added examples throughout</t>
          <t>Clarified and more completely specified matters that were underspecified</t>
          <t>Removed the protocol for session establishment, which was deemed unnecessary</t>
          <t>Modified error handling related to presence stanzas to more seamlessly repair lack of synchronization in subscription states between rosters located at different servers</t>
          <t>Added optional server support for pre-approved presence subscriptions</t>
          <t>Added optional 'parent' attribute to &lt;thread/&gt; element</t>
          <t>Transferred documentation for the communications blocking protocol from this specification to a separate specification</t>
        </list>
      </t>
      <t>Therefore, this document defines the basic instant messaging and presence features of XMPP 1.0, thus obsoleting RFC 3921.</t>
    </section>
    <section title="Requirements" anchor="intro-requirements">
      <t>Traditionally, instant messaging applications have combined the following factors:</t>
      <t>
        <list style='numbers'>
          <t><iref item='Roster'/>The central point of focus is a list of one's contacts or "buddies" (in XMPP this list is called a ROSTER).</t>
          <t>The purpose of using such an application is to exchange relatively brief text messages with particular contacts in close to real time -- often relatively large numbers of such messages in rapid succession, in the form of a one-to-one CHAT SESSION as described under <xref target='message-chat'/>.</t>
          <t><iref item='Presence'/>The catalyst for exchanging messages is PRESENCE -- i.e., information about the network availability of particular contacts (thus knowing who is online and available for a one-to-one chat session).</t>
          <t>Presence information is provided only to contacts that one has authorized by means of an explicit agreement called a PRESENCE SUBSCRIPTION.</t>
        </list>
      </t>
      <t>Thus at a high level this document assumes that a user must be able to complete the following use cases:</t>
      <t><list style="symbols">
        <t>Manage items in one's contact list</t>
        <t>Exchange messages with one's contacts</t>
        <t>Exchange presence information with one's contacts</t>
        <t>Manage presence subscriptions to and from one's contacts</t>
      </list></t>
      <t>Detailed definitions of these functionality areas are contained in RFC 2779 <xref target="IMP-REQS"/>, and the interested reader is referred to that document regarding the requirements addressed herein.  While the XMPP instant messaging and presence extensions specified herein meet the requirements of RFC 2779, they were not designed explicitly with that specification in mind, since the base protocol evolved through an open development process within the Jabber open-source community before RFC 2779 was written.  Although XMPP protocol extensions addressing many other functionality areas have been defined in the XMPP Standards Foundation's XEP series (e.g., multi-user text chat as specified in <xref target='XEP-0045'/>), such extensions are not specified in this document because they are not mandated by RFC 2779.</t>
      <t><list style='empty'><t>Note: RFC 2779 stipulates that presence services must be separable from instant messaging services and vice-versa; i.e., it must be possible to use the protocol to provide a presence service, an instant messaging service, or both.  Although the text of this document assumes that implementations and deployments will want to offer a unified instant messaging and presence service, there is no requirement that a service must offer both a presence service and an instant messaging service, and the protocol makes it possible to offer separate and distinct services for presence and for instant messaging.  (For example, a presence-only service could return a &lt;service-unavailable/&gt; stanza error if a client attempt to send a &lt;message/&gt; stanza.)</t></list></t>
    </section>
    <section title="Functional Summary" anchor="intro-summary">
      <t>This non-normative section provides a developer-friendly, functional summary of XMPP-based instant messaging and presence features; consult the sections that follow for a normative definition of these features.</t>
      <t><xref target="xmpp-core"/> specifies how an XMPP client connects to an XMPP server.  In particular, it specifies the preconditions that must be fulfilled before a client is allowed to send XML stanzas (the basic unit of meaning in XMPP) to other entities on an XMPP network.  These preconditions comprise negotiation of the XML stream and include XML stream establishment, optional channel encryption via Transport Layer Security <xref target='TLS'/>, mandatory authentication via Simple Authentication and Security Layer <xref target='SASL'/>, and binding of a resource to the stream for client addressing.  The reader is referred to <xref target="xmpp-core"/> for details regarding these preconditions, and knowledge of <xref target="xmpp-core"/> is assumed herein.</t>
      <t><list style='empty'><t>Note: <xref target='RFC3921'/> specified one additional precondition: formal establishment of an instant messaging and presence session.  Implementation and deployment experience has shown that this additional step is unnecessary.  However, for backward compatibility an implementation SHOULD still offer that feature and note in the stream feature that negotiation of the feature is discretionary (via the &lt;optional/&gt; child element).  This enables older software to connect while saving newer software to skip a round trip.</t></list></t>
      <t>Upon fulfillment of the preconditions specified in <xref target="xmpp-core"/>, an XMPP client has a long-lived XML stream with an XMPP server, which enables the user controlling that client to send and receive a potentially unlimited number of XML stanzas over the stream.  Such a stream can be used to exchange messages, share presence information, and engage in structured request-response interactions in close to real time.  After negotiation of the XML stream, the typical flow for an instant messaging and presence session is as follows:</t>
      <t>
        <list style='numbers'>
          <t>Retrieve one's roster.  (See <xref target='roster-login'/>.)</t>
          <t>Send initial presence to the server for broadcasting to all subscribed contacts, thus "going online" from the perspective of XMPP communication.  (See <xref target='presence-initial'/>.)</t>
          <t>Exchange messages, manage presence subscriptions, perform roster updates, and in general process and generate other XML stanzas with particular semantics throughout the life of the session.  (See <xref target='message'/>, <xref target='sub'/>, <xref target='roster'/>, and <xref target='iq'/>.)</t>
          <t>Terminate the session when desired by sending unavailable presence and closing the underlying XML stream. (See <xref target='presence-unavailable'/>.)</t>
        </list>
      </t>
    </section>
    <section title="Conventions" anchor="intro-conventions">
      <t>This document inherits the terminology defined in <xref target="xmpp-core"/>.</t>
      <t>The following keywords are to be interpreted as described in <xref target="TERMS"/>: "MUST", "SHALL", "REQUIRED"; "MUST NOT", "SHALL NOT"; "SHOULD", "RECOMMENDED"; "SHOULD NOT", "NOT RECOMMENDED"; "MAY", "OPTIONAL".</t>
      <t>For convenience, this document employs the term "user" to refer to the owner of an XMPP account; however, account owners need not be human persons and can be bots, devices, or other non-human applications.</t>
      <t>Following the "XML Notation" used in <xref target="IRI"/> to represent characters that cannot be rendered in ASCII-only documents, some examples in this document use the form "&amp;#x...." as a notational device to represent Unicode characters (e.g., the string "&amp;#x0159;" stands for the Unicode character LATIN SMALL LETTER R WITH CARON).</t>
      <t>In examples, lines have been wrapped for improved readability, "[...]" means elision, and the following prepended strings are used (these prepended strings are not to be sent over the wire):</t>
      <t>
        <list style='symbols'>
          <t>C: = client</t>
          <t>CC: = contact's client</t>
          <t>CS: = contact's server</t>
          <t>S: = server</t>
          <t>UC: = user's client</t>
          <t>US: = user's server</t>
        </list>
      </t>
    </section>
    <section title="Acknowledgements" anchor="intro-ack">
      <t>The editor of this document finds it impossible to appropriately acknowledge the many individuals who have provided comments regarding the protocols defined herein.  However, thanks are due to those who have who have provided implementation feedback, bug reports, requests for clarification, and suggestions for improvement since the publication of the RFC this document supersedes.  The editor has endeavored to address all such feedback, but is solely responsible for any remaining errors and ambiguities.</t>
    </section>
    <section title="Discussion Venue" anchor="intro-discuss">
      <t>The document editor and the broader XMPP developer community welcome discussion and comments related to the topics presented in this document.  The preferred forum is the &lt;standards@xmpp.org&gt; mailing list, for which archives and subscription information are available at <eref target='http://mail.jabber.org/mailman/listinfo/standards'/>.</t>
    </section>
  </section>

  <section title="Managing the Roster" anchor="roster">
    <t>In XMPP, one's roster contains any number of specific contacts.  A user's roster is stored by the user's server on the user's behalf so that the user can access roster information from any resource.</t>
    <section title="Syntax and Semantics" anchor="roster-syntax">
      <t>Rosters are managed using IQ stanzas, specifically by means of a &lt;query/&gt; child element qualified by the 'jabber:iq:roster' namespace.  The detailed syntax and semantics are defined in the following sections.</t>
      <section title="Roster Items" anchor="roster-syntax-items">
        <t>The &lt;query/&gt; element MAY contain one or more &lt;item/&gt; children, each describing a unique ROSTER ITEM or "contact".</t>
        <t>The syntax of the &lt;item/&gt; element is described in the following sections.</t>
        <section title="Ask Attribute" anchor="roster-syntax-items-ask">
          <t>The 'ask' attribute is used to specify certain subscription sub-states; for details, see <xref target='sub-request-outbound'/>.</t>
          <t>Inclusion of the 'ask' attribute is OPTIONAL.</t>
        </section>
        <section title="Jid Attribute" anchor="roster-syntax-items-jid">
          <t>The 'jid' attribute specifies the Jabber Identifier (JID) that uniquely identifies the roster item.</t>
          <t>Inclusion of the 'jid' attribute is REQUIRED.</t>
        </section>
        <section title="Name Attribute" anchor="roster-syntax-items-name">
          <t>The 'name' attribute specifies the "handle" to be associated with the JID, as determined by the user (not the contact).  Although the value of the 'name' attribute MAY have meaning to a human user, it is opaque to the server.  However, the 'name' attribute MAY be used by the server for matching purposes within the context of various XMPP extensions, in which case the values MUST be compared only after application of the Resourceprep profile of stringprep as defined in <xref target='xmpp-core'/>.</t>
          <t>Inclusion of the 'name' attribute is OPTIONAL.</t>
        </section>
        <section title="Subscription Attribute" anchor="roster-syntax-items-subscription">
          <t>The 'subscription' attribute is OPTIONAL; see <xref target='roster-syntax-subscription'/>.</t>
          <t>Inclusion of the 'subscription' attribute is OPTIONAL.</t>
        </section>
        <section title="Group Element" anchor="roster-syntax-items-group">
          <t>The &lt;group/&gt; child element specifies a category or "bucket" into which the roster item is to be grouped by a client.  An &lt;item/&gt; element MAY contain more than one &lt;group/&gt; element, so that roster groups are not exclusive.  Although the XML character data of the &lt;group/&gt; element MAY have meaning to a human user, it is opaque to the server.  However, the &lt;group/&gt; element MAY be used by the server for matching purposes within the context of various XMPP extensions, in which case the data MUST be compared only after application of the Resourceprep profile of stringprep as defined in <xref target='xmpp-core'/>.</t>
          <t>Inclusion of the &lt;group/&gt; child element is OPTIONAL.</t>
        </section>
      </section>
      <section title="Roster Get" anchor="roster-syntax-actions-get">
        <t><iref item='Roster Get'/>A ROSTER GET is a client's request for the server to send the roster; syntactically it is an IQ stanza of type "get" sent from client to server and containing a &lt;query/&gt; element qualified by the 'jabber:iq:roster' namespace, where the &lt;query/&gt; element MUST NOT contain any &lt;item/&gt; child elements.</t>
        <figure>
          <artwork><![CDATA[
C: <iq from='juliet@example.com/balcony' 
       id='rg1'
       type='get'>
    <query xmlns='jabber:iq:roster'/>
  </iq>
          ]]></artwork>
        </figure>
        <t>The expected outcome of sending a roster get is for the server to return a roster result.</t>
      </section>
      <section title="Roster Set" anchor="roster-syntax-actions-set">
        <t><iref item='Roster Set'/>A ROSTER SET is a client's request for the server to modify (i.e., create, update, or delete) a roster item; syntactically it is an IQ stanza of type "set" sent from client to server and containing a &lt;query/&gt; element qualified by the 'jabber:iq:roster' namespace.</t>
        <t>The following rules apply to roster sets:</t>
        <t>
          <list style='numbers'>
            <t>The &lt;query/&gt; element MUST contain one and only one &lt;item/&gt; element.</t>
            <t>The server MUST ignore any value of the 'subscription' attribute other than "remove" (see <xref target='roster-syntax-subscription'/>).</t>
            <t>The server MUST ignore any 'to' address specified on the IQ stanza and MUST handle the IQ stanza as if it included no 'to' attribute.</t>
          </list>
        </t>
        <figure>
          <artwork><![CDATA[
C: <iq from='juliet@example.com/balcony' 
       id='rs1'
       type='set'>
    <query xmlns='jabber:iq:roster'>
      <item jid='nurse@example.com'/>
    </query>
  </iq>
          ]]></artwork>
        </figure>
      </section>
      <section title="Roster Push" anchor="roster-syntax-actions-push">
        <t><iref item='Roster Push'/>A ROSTER PUSH is a newly created, updated, or deleted roster item that is sent from the server to the client; syntactically it is an IQ stanza of type "set" sent from server to client and containing a &lt;query/&gt; element qualified by the 'jabber:iq:roster' namespace.</t>
        <t>The following rules apply to roster pushes:</t>
        <t>
          <list style='numbers'>
            <t>The &lt;query/&gt; element in a roster push MUST contain one and only one &lt;item/&gt; element.</t>
            <t>A receiving client MUST ignore the stanza unless it has no 'from' attribute (i.e., implicitly from the user's bare JID) or it has a 'from' attribute whose value matches the user's bare JID &lt;user@domain&gt;.</t>
          </list>
        </t>
        <figure>
          <artwork><![CDATA[
S: <iq id='a78b4q6ha463'
       to='juliet@example.com/chamber'
       type='set'>
    <query xmlns='jabber:iq:roster'>
      <item jid='nurse@example.com'/>
    </query>
  </iq>
          ]]></artwork>
        </figure>
        <t>As mandated by the semantics of the IQ stanza as defined in <xref target="xmpp-core"/>, each resource that receives a roster push MUST reply with an IQ stanza of type "result" (or "error").</t>
        <figure>
          <artwork><![CDATA[
C: <iq from='juliet@example.com/balcony'
       id='a78b4q6ha463'
       type='result'/>

C: <iq from='juliet@example.com/chamber'
       id='a78b4q6ha463'
       type='result'/>
          ]]></artwork>
        </figure>
        <t><list style='empty'><t>Note: There is no error case for client processing of roster pushes; if the server receives an IQ of type "error" in response to a roster push it SHOULD ignore the error.</t></list></t>
      </section>
      <section title="Roster Result" anchor="roster-syntax-actions-result">
        <t><iref item='Roster Result'/>A ROSTER RESULT is the server's response to a roster get; syntactically it is an IQ stanza of type "result" sent from server to client and containing a &lt;query/&gt; element qualified by the 'jabber:iq:roster' namespace.</t>
        <t>The &lt;query/&gt; element in a roster result contains one &lt;item/&gt; element for each contact and therefore can contain more than one &lt;item/&gt; element.</t>
        <figure>
          <artwork><![CDATA[
S: <iq id='rg1'
       to='juliet@example.com/chamber'
       type='result'>
    <query xmlns='jabber:iq:roster'>
      <item jid='nurse@example.com'/>
      <item jid='romeo@example.net'/>
    </query>
  </iq>
          ]]></artwork>
        </figure>
        <t>If there are no contacts in the roster, then the server MUST return an IQ-result containing a child &lt;query/&gt; element that in turn contains no &lt;item/&gt; children (e.g., the server MUST NOT return an empty &lt;iq/&gt; stanza element).</t>
        <figure>
          <artwork><![CDATA[
S: <iq to='juliet@example.com/chamber' 
       id='roster_result'
       type='result'>
    <query xmlns='jabber:iq:roster'/>
  </iq>
          ]]></artwork>
        </figure>
      </section>
      <section title="Subscription Attribute" anchor="roster-syntax-subscription">
        <t>The state of the presence subscription in relation to a roster item is captured in the 'subscription' attribute of the &lt;item/&gt; element.  Allowable subscription-related values for this attribute are:</t>
        <t>
          <list style="symbols">
            <t>"none" -- the user does not have a subscription to the contact's presence, and the contact does not have a subscription to the user's presence</t>
            <t>"to" -- the user has a subscription to the contact's presence, but the contact does not have a subscription to the user's presence</t>
            <t>"from" -- the contact has a subscription to the user's presence, but the user does not have a subscription to the contact's presence</t>
            <t>"both" -- both the user and the contact have subscriptions to each other's presence (also called a "mutual subscription")</t>
          </list>
        </t>
        <t>In a roster result, the client MUST ignore values of the 'subscription' attribute other than "none", "to", "from", or "both".</t>
        <t>In a roster push, the client MUST ignore values of the 'subscription' attribute other than "none", "to", "from", "both", or "remove".</t>
        <t>In a roster set, the value of the 'subscription' attribute MAY be included with a value of "remove", which indicates that the item is to be removed from the roster; the server MUST ignore all values of the 'subscription' attribute other than "remove".</t>
      </section>
    </section>

    <section title="Retrieving the Roster on Login" anchor="roster-login">
      <t>Upon authenticating with a server and binding a resource (thus becoming a connected resource), a client SHOULD request the roster before sending initial presence (however, because receiving the roster is not necessarily desirable for all resources, e.g., a connection with limited bandwidth, the client's request for the roster is not mandatory).  After a connected resource sends initial presence (see <xref target='presence-initial'/>), it is referred to as an available resource.  If a connected resource or available resource requests the roster, it is referred to as an INTERESTED RESOURCE.  The server MUST send roster pushes to all interested resources.</t>
      <t><list style='empty'><t>Note: Presence subscription requests are sent to available resources, whereas the roster pushes associated with subscription state changes are sent to interested resources.  Therefore if a resource wishes to receive both subscription requests and roster pushes, it MUST both send initial presence and request the roster.</t></list></t>
      <t>A client requests the roster by sending a roster get over its stream to the server.</t>
      <figure>
        <artwork><![CDATA[
C: <iq from='juliet@example.com/balcony' 
       id='roster_1'
       type='get'>
     <query xmlns='jabber:iq:roster'/>
   </iq>
        ]]></artwork>
      </figure>
      <figure>
        <artwork><![CDATA[
S: <iq id='roster_1'
       to='juliet@example.com/balcony'
       type='result'> 
     <query xmlns='jabber:iq:roster'>
       <item jid='romeo@example.net'
             name='Romeo'
             subscription='both'>
         <group>Friends</group>
       </item>
       <item jid='mercutio@example.com'
             name='Mercutio'
             subscription='from'/>
       <item jid='benvolio@example.net'
             name='Benvolio'
             subscription='both'/>
     </query>
   </iq>
        ]]></artwork>
      </figure>
      <t>If the server cannot process the roster get, it MUST return an appropriate stanza error as described in <xref target='xmpp-core'/> (such as &lt;service-unavailable/&gt; if the roster namespace is not supported or &lt;internal-server-error/&gt; if the server experiences trouble processing or returning the roster).</t>
    </section>

    <section title="Adding a Roster Item" anchor="roster-add">
      <section title="Request" anchor="roster-add-request">
        <t>At any time, a client can add an item to the roster.  This is done by sending a roster set containing a new item.</t>
        <figure>
          <artwork><![CDATA[
C: <iq from='juliet@example.com/balcony'
       id='roster_2'
       type='set'>
     <query xmlns='jabber:iq:roster'>
       <item jid='nurse@example.com'
             name='Nurse'>
         <group>Servants</group>
       </item>
     </query>
   </iq>
          ]]></artwork>
        </figure>
        <t><list style='empty'><t>Note: When a user adds a contact for the purpose of tracking the user's presence subscription to a contact, the user's client SHOULD send a presence subscription request to the contact before generating any roster set related to the contact.  This enables the user's server to enforce any policies relevant to presence subscriptions (e.g., a prohibition on presence subscriptions to full JIDs).  For details, see <xref target='sub'/>.</t></list></t>
      </section>
      <section title="Success Case" anchor="roster-add-success">
        <t>If the server can successfully process the roster set (i.e., if none of the error cases occurs), it MUST create the roster item in persistent storage.</t>
        <t>The server MUST then return an IQ stanza of type "result" to the connected resource that sent the roster set.</t>
        <figure>
          <artwork><![CDATA[
S: <iq id='roster_2'
       to='juliet@example.com/balcony'
       type='result'/>
          ]]></artwork>
        </figure>
        <t>The server MUST also send a roster push containing the new roster item to all of the user's interested resources, including the resource that generated the roster set.</t>
        <figure>
          <artwork><![CDATA[
S: <iq to='juliet@example.com/balcony'
       id='a78b4q6ha463'
       type='set'>
     <query xmlns='jabber:iq:roster'>
       <item jid='nurse@example.com'
             name='Nurse'
             subscription='none'>
         <group>Servants</group>
       </item>
     </query>
   </iq>

S: <iq to='juliet@example.com/chamber'
       id='a78b4q6ha464'
       type='set'>
     <query xmlns='jabber:iq:roster'>
       <item jid='nurse@example.com'
             name='Nurse'
             subscription='none'>
         <group>Servants</group>
       </item>
     </query>
   </iq>
          ]]></artwork>
        </figure>
        <t>As mandated by the semantics of the IQ stanza as defined in <xref target="xmpp-core"/>, each resource that receives a roster push MUST reply with an IQ stanza of type "result" (or "error").</t>
        <figure>
          <artwork><![CDATA[
C: <iq from='juliet@example.com/balcony'
       id='a78b4q6ha463'
       type='result'/>

C: <iq from='juliet@example.com/chamber'
       id='a78b4q6ha464'
       type='result'/>
          ]]></artwork>
        </figure>
      </section>
      <section title="Error Cases" anchor="roster-add-errors">
        <t>If the server cannot successfully process the roster set, it MUST return a stanza error.  The following error cases are defined (naturally, other stanza errors can occur, such as &lt;internal-server-error/&gt;).</t>
        <t>The server SHOULD return a &lt;bad-request/&gt; stanza error to the client if the roster set violates any of the following conditions:</t>
        <t>
          <list style='numbers'>
            <t>The &lt;query/&gt; element contains more than one &lt;item/&gt; child element.</t>
            <t>The &lt;item/&gt; element contains more than one &lt;group/&gt; element, but there are duplicate groups (where duplicates are determined using the Resourceprep profile of stringprep as defined in <xref target='xmpp-core'/>).</t>
          </list>
        </t>
        <t>The server SHOULD return a &lt;not-acceptable/&gt; stanza error to the client if the roster set violates any of the following conditions:</t>
        <t>
          <list style='numbers'>
            <t>The value of the 'name' attribute is greater than a server-configured limit.</t>
            <t>The XML character data of the &lt;group/&gt; element is of zero length.</t>
            <t>The XML character data of the &lt;group/&gt; element is greater than a server-configured limit.</t>
          </list>
        </t>
        <t>Alternatively, the server MAY ignore the foregoing violations and process the roster set as best as possible (e.g., process only the first &lt;item/&gt; element, ignore duplicate &lt;group/&gt; elements, place the roster item in no group or a default group if the &lt;group/&gt; element is empty, and truncate 'name' attributes and &lt;group/&gt; elements that are too long).</t>
        <figure>
          <preamble>Error: Roster set contains more than one item</preamble>
          <artwork><![CDATA[
C: <iq from='juliet@example.com/balcony'
       id='roster_3'
       type='set'>
     <query xmlns='jabber:iq:roster'>
       <item jid='nurse@example.com'
             name='Nurse'>
         <group>Servants</group>
       </item>
       <item jid='mother@example.com'
             name='Mom'>
         <group>Family</group>
       </item>
     </query>
   </iq>

S: <iq id='roster_3'
       to='juliet@example.com/balcony'
       type='error'>
    <error type='modify'>
      <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    </error>
  </iq>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Error: Roster set contains item with oversized handle</preamble>
          <artwork><![CDATA[
C: <iq from='juliet@example.com/balcony'
       id='roster_4'
       type='set'>
     <query xmlns='jabber:iq:roster'>
       <item jid='nurse@example.com'
             name='[ ... some-very-long-handle ... ]'>
         <group>Servants</group>
       </item>
     </query>
   </iq>

S: <iq id='roster_4'
       to='juliet@example.com/balcony'
       type='error'>
     <error type='modify'>
       <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Error: Roster set contains duplicate groups</preamble>
          <artwork><![CDATA[
C: <iq from='juliet@example.com/balcony'
       id='roster_5'
       type='set'>
     <query xmlns='jabber:iq:roster'>
       <item jid='nurse@example.com'
             name='Nurse'>
         <group>Servants</group>
         <group>Servants</group>
       </item>
     </query>
   </iq>

S: <iq id='roster_5'
       to='juliet@example.com/balcony'
       type='error'>
     <error type='modify'>
       <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Error: Roster set contains empty group</preamble>
          <artwork><![CDATA[
C: <iq from='juliet@example.com/balcony'
       id='roster_6'
       type='set'>
     <query xmlns='jabber:iq:roster'>
       <item jid='nurse@example.com'
             name='Nurse'>
         <group></group>
       </item>
     </query>
   </iq>

S: <iq id='roster_6'
       to='juliet@example.com/balcony'
       type='error'>
     <error type='modify'>
       <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Error: Roster set contains oversized group</preamble>
          <artwork><![CDATA[
C: <iq from='juliet@example.com/balcony'
       id='roster_7'
       type='set'>
     <query xmlns='jabber:iq:roster'>
       <item jid='nurse@example.com'
             name='Nurse'>
         <group>[ ... some-very-long-group-name ... ]</group>
       </item>
     </query>
   </iq>

S: <iq id='roster_7'
       to='juliet@example.com/balcony'
       type='error'>
     <error type='modify'>
       <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>
          ]]></artwork>
        </figure>
        <t>The server MUST return a &lt;not-allowed/&gt; stanza error to the client if the value of the &lt;item/&gt; element's 'jid' attribute matches the bare JID &lt;node@domain&gt; portion of the &lt;iq/&gt; element's 'from' attribute (i.e., a JID MUST NOT be allowed to add itself to its own roster).</t>
        <figure>
          <preamble>Error: Roster set contains sender's JID</preamble>
          <artwork><![CDATA[
C: <iq from='juliet@example.com/balcony'
       id='roster_8'
       type='set'>
     <query xmlns='jabber:iq:roster'>
       <item jid='juliet@example.com'/>
      </query>
    </iq>

S: <iq id='roster_8'
       to='juliet@example.com/balcony'
       type='error'>
      <error type='cancel'>
        <not-allowed xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
      </error>
    </iq>
          ]]></artwork>
        </figure>
      </section>
    </section>

    <section title="Updating a Roster Item" anchor="roster-update">
      <section title="Request" anchor="roster-update-request">
        <t>Updating an existing roster item is done in the same way as adding a new roster item, i.e., by sending a roster set to the server.  Because a roster item is atomic, the item MUST be updated exactly as provided in the roster set.</t>
        <t>There are several reasons why a client might update a roster item:</t>
        <t>
          <list style='numbers'>
            <t>Adding a group</t>
            <t>Deleting a group</t>
            <t>Changing the handle</t>
            <t>Deleting the handle</t>
          </list>
        </t>
        <t>Consider a roster item that is defined as follows:</t>
        <figure>
          <artwork><![CDATA[
    <item jid='romeo@example.net'
          name='Romeo'>
      <group>Friends</group>
    </item>
          ]]></artwork>
        </figure>
        <t>The user who has this item in her roster might want to add the item to another group.</t>
        <figure>
          <artwork><![CDATA[
C: <iq from='juliet@example.com/balcony'
       id='update_1'
       type='set'>
     <query xmlns='jabber:iq:roster'>
       <item jid='romeo@example.net'
             name='Romeo'>
         <group>Friends</group>
         <group>Lovers</group>
       </item>
     </query>
   </iq>
          ]]></artwork>
        </figure>
        <t>The user might then want to remove the item from the original group.</t>
        <figure>
          <artwork><![CDATA[
C: <iq from='juliet@example.com/balcony'
       id='update_2'
       type='set'>
     <query xmlns='jabber:iq:roster'>
       <item jid='romeo@example.net'
             name='Romeo'>
         <group>Lovers</group>
       </item>
     </query>
   </iq>
          ]]></artwork>
        </figure>
        <t>The user might then want to change the handle for the item.</t>
        <figure>
          <artwork><![CDATA[
C: <iq from='juliet@example.com/balcony'
       id='update_3'
       type='set'>
     <query xmlns='jabber:iq:roster'>
       <item jid='romeo@example.net'
             name='MyRomeo'>
         <group>Lovers</group>
       </item>
     </query>
   </iq>
          ]]></artwork>
        </figure>
        <t>The user might then want to remove the handle altogether (note: including an empty 'name' attribute is equivalent to including no 'name' attribute).</t>
        <figure>
          <artwork><![CDATA[
C: <iq from='juliet@example.com/balcony'
       id='update_4'
       type='set'>
     <query xmlns='jabber:iq:roster'>
       <item jid='romeo@example.net'
             name=''>
         <group>Lovers</group>
       </item>
     </query>
   </iq>
          ]]></artwork>
        </figure>
        <t>The user might then want to remove the item from all groups.</t>
        <figure>
          <artwork><![CDATA[
C: <iq from='juliet@example.com/balcony'
       id='update_5'
       type='set'>
     <query xmlns='jabber:iq:roster'>
       <item jid='romeo@example.net'/>
     </query>
   </iq>
          ]]></artwork>
        </figure>
      </section>
      <section title="Success Case" anchor="roster-update-success">
        <t>As with adding a roster item, if the roster item can be successfully processed then the server MUST update the roster information in persistent storage, send a roster push to all of the user's interested resources, and send an IQ result to the initiating resource; for details, see <xref target='roster-add'/>.</t>
      </section>
      <section title="Error Cases" anchor="roster-update-error">
      <t>The error cases described under <xref target='roster-add-errors'/> also apply to updating a roster item.</t>
      </section>
    </section>

    <section title="Deleting a Roster Item" anchor="roster-delete">
      <section title="Request" anchor="roster-delete-request">
        <t>At any time, a client can delete an item from his or her roster by sending a roster set and specifying the value of the 'subscription' attribute to be "remove".</t>
        <figure>
          <artwork><![CDATA[
C: <iq from='juliet@example.com/balcony'
       id='delete_1'
       type='set'>
     <query xmlns='jabber:iq:roster'>
       <item jid='nurse@example.com' subscription='remove'/>
     </query>
   </iq>
          ]]></artwork>
        </figure>
      </section>
      <section title="Success Case" anchor="roster-delete-success">
        <t>As with adding a roster item, if the server can successfully process the roster set then it MUST update the roster information in persistent storage, send a roster push to all of the user's interested resources (with the 'subscription' attribute set to a value of "remove"), and send an IQ result to the initiating resource; for details, see <xref target='roster-add'/>.</t>
        <t>If the user has a presence subscription to the contact or the contact has a presence subscription to the user, the user's server MUST also generate a presence stanza of type "unsubscribe" (to unsubscribe from the contact's presence) or a presence stanza of type "unsubscribed" (to cancel the contact's subscription to the user), or both.</t>
        <figure>
          <artwork><![CDATA[
S: <presence from='juliet@example.com'
             to='nurse@example.com'
             type='unsubscribe'/>

S: <presence from='juliet@example.com'
             to='nurse@example.com'
             type='unsubscribed'/>
          ]]></artwork>
        </figure>
      </section>
      <section title="Error Cases" anchor="roster-delete-error">
        <t>If the value of the 'jid' attribute specifies an item that is not in the roster, then the server MUST return an &lt;item-not-found/&gt; stanza error.</t>
        <figure>
          <preamble>Error: Roster item not found</preamble>
          <artwork><![CDATA[
C: <iq from='juliet@example.com/balcony' 
       id='delete_2'
       type='set'>
     <query xmlns='jabber:iq:roster'>
       <item jid='[ ... non-existent-jid ... ]' 
             subscription='remove'/>
     </query>
   </iq>

S: <iq id='delete_2'
       to='juliet@example.com/balcony'
       type='error'>
     <error type='modify'>
       <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>
          ]]></artwork>
        </figure>
      </section>
    </section>
  </section>

  <section title="Managing Presence Subscriptions" anchor="sub">
    <t><iref item='Presence Subscription'/>In order to protect the privacy of instant messaging users, presence information is disclosed only to other entities that a user has approved.  When a user has agreed that another entity is allowed to view its presence, the entity is said to have a SUBSCRIPTION to the user's presence.  <iref item='Contact'/>An entity that has a subscription to a user's presence or to which a user has a presence subscription is called a CONTACT (in this document the term "contact" is also used in a less strict sense to refer to a potential contact or an item in a user's roster).</t>
    <t>In XMPP, a subscription lasts across presence sessions; indeed, it lasts until the contact unsubscribes or the user cancels the previously-granted subscription.</t>
    <t>Subscriptions are managed within XMPP by sending presence stanzas containing specially-defined attributes ("subscribe", "unsubscribe", "subscribed", and "unsubscribed").</t>
    <t><list style='empty'><t>Note: When a server processes or generates an outbound presence stanza of type "subscribe", "subscribed", "unsubscribe", or "unsubscribed", the server MUST stamp the outgoing presence stanza with the bare JID &lt;node@domain&gt; of the sending entity, not the full JID &lt;node@domain/resource&gt;.  Enforcement of this rule simplifies the presence subscription model and helps to prevent presence leaks; for information about presence leaks, refer to the security considerations of <xref target='xmpp-core'/>.</t></list></t>
    <t>Subscription states are reflected in the rosters of both the user and the contact.  Complete details regarding these subscription states can be found <xref target='substates'/>; those details are not provided in this section, which simply narrates the protocol flows for common use cases related to presence subscriptions.</t>

    <section title="Requesting a Subscription" anchor="sub-request">
      <t><iref item='Subscription Request'/>A SUBSCRIPTION REQUEST is a request from a user for authorization to permanently subscribe to a contact's presence information; syntactically it is a presence stanza whose 'type' attribute has a value of "subscribe".  A subscription request is generated by a user's client, processed by the (potential) contact's server, and acted on by the contact via the contact's client.  The workflow is described in the following sections.</t>
      <t><list style='empty'><t>Note: Presence subscription requests are sent to available resources, whereas the roster pushes associated with subscription state changes are sent to interested resources.  Therefore if a resource wishes to receive both subscription requests and roster pushes, it MUST both send initial presence and request the roster.</t></list></t>
      <section title="Client Generation of Outbound Subscription Request" anchor="sub-request-gen">
        <t>A user's client generates a subscription request by sending a presence stanza of type "subscribe" and specifying a 'to' address of the potential contact's bare JID &lt;contact@domain&gt;.</t>
        <figure>
          <artwork><![CDATA[
UC: <presence to='juliet@example.com' type='subscribe'/>
          ]]></artwork>
        </figure>
        <t>When a user sends a presence subscription request to a potential instant messaging and presence contact, the value of the 'to' attribute MUST be a bare JID &lt;contact@domain&gt; rather a full JID &lt;contact@domain/resource&gt;, since the desired result is for the user to receive presence from all of the contact's resources, not merely the particular resource specified in the 'to' attribute.  Use of bare JIDs also simplifies subscription processing, presence probes, and presence notifications by the user's server and the contact's server.</t>
        <t><list style='empty'><t>Although many XMPP clients prompt the user for information about the potential contact (e.g., "handle" and desired roster group) when generating an outbound presence subscription request, the client MUST NOT send a roster set before sending the presence subscription request, but instead MUST wait until receiving the initial roster push from the server.  This enables the user's server to enforce any policies relevant to presence subscriptions (e.g., a prohibition on presence subscriptions to full JIDs).</t></list></t>
      </section>

      <section title="Server Processing of Outbound Subscription Request" anchor="sub-request-outbound">
        <t>Upon receiving the outbound presence subscription request, the user's server MUST proceed as follows.</t>
        <t>
          <list style='numbers'>
            <t>Before processing the request, the user's server SHOULD check the syntax of the JID contained in the 'to' attribute.  If the JID is of the form &lt;contact@domain/resource&gt; instead of &lt;contact@domain&gt;, the user's server SHOULD treat it as if the request had been directed to the contact's bare JID and modify the 'to' address accordingly.  The server MAY also verify that the JID adheres to the format defined in <xref target='xmpp-core'/>, including checking against the relevant stringprep profiles.</t>
            <t>If the potential contact is hosted on the same server as the user, then the server MUST adhere to the rules specified in the next section in processing the subscription request and delivering it to the (local) contact.</t>
            <t>If the potential contact is hosted on a remote server, subject to local service policies the user's server MUST then route the stanza to that remote domain in accordance with core XMPP stanza processing rules.  (This can result in returning an appropriate stanza error to the user, such as &lt;remote-server-timeout/&gt;.)</t>
          </list>
        </t>
        <t>As mentioned, before locally delivering or remotely routing the presence subscription request, the user's server MUST stamp the outbound subscription request with the bare JID &lt;user@domain&gt; of the user.</t>
        <figure>
          <artwork><![CDATA[
US: <presence from='romeo@example.net'
              to='juliet@example.com' 
              type='subscribe'/>
          ]]></artwork>
        </figure>
        <t>After locally delivering or remotely routing the presence subscription request, the user's server MUST then send a roster push to all of the user's interested resources, containing the potential contact with a subscription state of "none" and with notation that the subscription is pending (via an 'ask' attribute whose value is "subscribe").</t>
        <figure>
          <artwork><![CDATA[
US: <iq id='b89c5r7ib574'
        to='romeo@example.net/foo'
        type='set'>
      <query xmlns='jabber:iq:roster'>
        <item ask='subscribe'
              jid='juliet@example.com'
              subscription='none'/>
      </query>
    </iq>

US: <iq id='b89c5r7ib575'
        to='romeo@example.net/bar'
        type='set'>
      <query xmlns='jabber:iq:roster'>
        <item ask='subscribe'
              jid='juliet@example.com'
              subscription='none'/>
        </item>
      </query>
    </iq>
          ]]></artwork>
        </figure>
        <t>If the contact does not approve or deny the subscription request within some configurable amount of time, the user's server SHOULD resend the subscription request to the contact based on an implementation-specific algorithm (e.g., whenever a new resource becomes available for the user, or after a certain amount of time has elapsed); this helps to recover from transient, silent errors that might have occurred in relation to the original subscription request.</t>
      </section>

      <section title="Server Processing of Inbound Subscription Request" anchor="sub-request-inbound">
        <t>Before processing the inbound presence subscription request, the contact's server SHOULD check the syntax of the JID contained in the 'to' attribute.  If the JID is of the form &lt;contact@domain/resource&gt; instead of &lt;contact@domain&gt;, the contact's server SHOULD treat it as if the request had been directed to the contact's bare JID and modify the 'to' address accordingly.  The server MAY also verify that the JID adheres to the format defined in <xref target='xmpp-core'/>, including checking against the relevant stringprep profiles.</t>
        <t>When processing the inbound presence subscription request, the contact's server MUST adhere to the following rules:</t>
        <t>
          <list style='numbers'>
            <t>Above all, the contact's server MUST NOT automatically approve subscription requests on the contact's behalf (unless the contact has configured its account to automatically approve subscription requests or has accepted an agreement with its service provider that allows such behavior, for instance via an employment agreement within an enterprise deployment). Instead, if a subscription request requires approval then the contact's server MUST deliver that request to the contact's available resource(s) for approval or denial by the contact.</t>
            <t>If the contact does not exist, then the contact's server MUST automatically return a presence stanza of type "unsubscribed" to the user.
              <figure>
                <artwork><![CDATA[
CS: <presence from='juliet@example.com' 
              to='romeo@example.net' 
              type='unsubscribed'/>
                ]]></artwork>
              </figure>
            </t>
            <t>If the contact exists and the user already has a subscription to the contact's presence, then the contact's server MUST auto-reply on behalf of the contact by sending a presence stanza of type "subscribed" from the contact's bare JID to the user's bare JID.  If the contact previously sent a presence stanza of type "subscribed" and the contact's server treated that as indicating "pre-approval" for the user's presence subscription (see <xref target='substates'/>), then the contact's server SHOULD also auto-reply on behalf of the contact.</t>
            <t>If the contact exists, the user does not already have a subscription to the contact's presence, and there is at least one available resource associated with the contact when the subscription request is received by the contact's server, then the contact's server MUST broadcast that subscription request to all available resources in accordance with <xref target="rules"/>.</t>
            <t>If the contact exists, the user does not already have a subscription to the contact's presence, and the contact has no available resources when the subscription request is received by the contact's server, then the contact's server MUST keep a record of the complete presence stanza comprising the subscription request, including any extended content contained therein, and deliver the request when the contact next has an available resource.  The contact's server MUST continue to deliver the subscription request whenever the contact creates an available resource, until the contact either approves or denies the request.  (The contact's server MUST NOT deliver more than one subscription request from any given user when the contact next has an available resource; e.g., if the user sends multiple subscription requests to the contact while the contact is offline, the contact's server SHOULD store only one of those requests, such as the first request or last request, and MUST deliver only one of the requests when the contact next has an available resource; this helps to prevent "subscription request spam".)</t>
          </list>
        </t>
        <t><list style='empty'><t>Note: Until and unless the contact approves the subscription request as described under <xref target='sub-request-handle'/>, the contact's server MUST NOT add an item for the user to the contact's roster.</t></list></t>
      </section>

      <section title="Client Processing of Inbound Subscription Request" anchor="sub-request-handle">
        <t>When the contact's client receives a subscription request from the user, it MUST present the request to the contact for approval (unless the contact has explicitly configured the client to automatically approve or deny some or all subscription requests).</t>
        <t>A subscription request is approved by sending a presence stanza of type "subscribed", which is processed as described in the following sections for both the contact's server and the user's server.</t>
        <figure>
          <artwork><![CDATA[
CC: <presence to='romeo@example.net' type='subscribed'/>
          ]]></artwork>
        </figure>
        <t>A subscription request is denied by sending a presence stanza of type "unsubscribed", which is processed as described under <xref target='sub-cancel'/> for both the contact's server and the user's server.</t>
        <figure>
          <artwork><![CDATA[
CC: <presence to='romeo@example.net' type='unsubscribed'/>
          ]]></artwork>
        </figure>
      </section>

      <section title="Server Processing of Outbound Subscription Approval" anchor="sub-request-approvalout">
        <t>When the contact's client sends the subscription approval, the contact's server MUST stamp the outbound stanza with the bare JID &lt;contact@domain&gt; of the contact and locally deliver or remotely route the stanza to the user.</t>
        <figure>
          <artwork><![CDATA[
CS: <presence from='juliet@example.com' 
              to='romeo@example.net'
              type='subscribed'/>
          ]]></artwork>
        </figure>
        <t>The contact's server then MUST send a roster push to all of the contact's interested resources.</t>
        <figure>
          <artwork><![CDATA[
CS: <iq id='a78b4q6ha463'
        to='juliet@example.com/balcony'
        type='set'>
      <query xmlns='jabber:iq:roster'>
        <item jid='romeo@example.net'
              subscription='from'/>
      </query>
    </iq>

CS: <iq id='a78b4q6ha464'
        to='juliet@example.com/chamber'
        type='set'>
      <query xmlns='jabber:iq:roster'>
        <item jid='romeo@example.net'
              subscription='from'/>
      </query>
    </iq>
          ]]></artwork>
        </figure>
        <t>The contact's server MUST then also send current presence to the user from each of the contact's available resources.</t>
        <figure>
          <artwork><![CDATA[
CS: <presence from='juliet@example.com/balcony'
              to='romeo@example.net'/>

CS: <presence from='juliet@example.com/chamber'
              to='romeo@example.net'/>
          ]]></artwork>
        </figure>
        <t>From the perspective of the contact, there now exists a subscription from the user.</t>
        <t>In order to subscribe to the user's presence, the contact would then send a subscription request to the user.  (XMPP clients will often automatically send the subscription request instead of requiring the contact to initiate the subscription request, since it is assumed that the desired end state is a mutual subscription.)  Naturally, when the contact sends a subscription request to the user, the subscription states will be different from those shown in the foregoing examples (see <xref target='substates'/>) and the roles will be reversed.</t>
      </section>

      <section title="Server Processing of Inbound Subscription Approval" anchor="sub-request-approvalin">
        <t>When the user's server receives the subscription approval, it MUST first check if the contact is in the user's roster with subscription='none' or subscription='from' and the 'ask' flag set to "subscribe" (i.e., a subscription state of "None + Pending Out", "None + Pending Out+In", or "From + Pending Out"; see <xref target='substates'/>).  If this check is successful, the user's server MUST initiate a roster push to all of the user's interested resources, containing an updated roster item for the contact with the 'subscription' attribute set to a value of "to" (if the subscription state was "None + Pending Out" or "None + Pending Out+In") or "both" (if the subscription state was "From + Pending Out").</t>
        <figure>
          <artwork><![CDATA[
US: <iq id='b89c5r7ib576'
        to='romeo@example.net/foo'
        type='set'>
      <query xmlns='jabber:iq:roster'>
        <item jid='juliet@example.com'
              subscription='to'/>
      </query>
    </iq>

US: <iq id='b89c5r7ib577'
        to='romeo@example.net/bar'
        type='set'>
      <query xmlns='jabber:iq:roster'>
        <item jid='juliet@example.com'
              subscription='to'/>
        </item>
      </query>
    </iq>
          ]]></artwork>
        </figure>
        <t>(Otherwise -- that is, if the user does not exist, if the contact is not in the user's roster, or if the contact is in the user's roster with a subscription state other than those described in the foregoing check -- then the user's server MUST silently ignore the stanza by not delivering it to the user, not modifying the user's roster, and not generating a roster push to the user's interested resources.)</t>
        <t>From the perspective of the user, there now exists a subscription to the contact's presence.</t>
        <t>The user's server MUST also deliver the available presence stanza received from each of the contact's available resources to each of the user's available resources.</t>
        <figure>
          <artwork><![CDATA[
[ ... to resource1 ... ]

US: <presence from='juliet@example.com/balcony'
              to='romeo@example.net'/>

[ ... to resource2 ... ]

US: <presence from='juliet@example.com/balcony'
              to='romeo@example.net'/>

[ ... to resource1 ... ]

US: <presence from='juliet@example.com/chamber'
              to='romeo@example.net'/>

[ ... to resource2 ... ]

US: <presence from='juliet@example.com/chamber'
              to='romeo@example.net'/>
          ]]></artwork>
        </figure>
      </section>
    </section>

    <section title="Cancelling a Subscription" anchor="sub-cancel">
      <section title="Client Generation of Subscription Cancellation" anchor="sub-cancel-gen">
        <t>If a contact would like to cancel a subscription that it has previously granted to a user (or deny a subscription request), it sends a presence stanza of type "unsubscribed".</t>
        <figure>
          <artwork><![CDATA[
CC: <presence to='romeo@example.net' type='unsubscribed'/>
          ]]></artwork>
        </figure>
      </section>

      <section title="Server Processing of Outbound Subscription Cancellation" anchor="sub-cancel-outbound">
        <t>Upon receiving the outound subscription cancellation, the contact's server MUST proceed as follows.</t>
        <t>
          <list style='numbers'>
            <t>If the user is hosted on the same server as the contact, then the server MUST adhere to the rules specified in the next section in processing the subscription cancellation.</t>
            <t>If the user is hosted on a remote server, subject to local service policies the contact's server MUST then route the stanza to that remote domain in accordance with core XMPP stanza processing rules.  (This can result in returning an appropriate stanza error to the contact, such as &lt;remote-server-timeout/&gt;.)</t>
          </list>
        </t>
        <t>As mentioned, before locally delivering or remotely routing the stanza, the contact's server MUST stamp the outbound subscription cancellation with the bare JID &lt;contact@domain&gt; of the contact.</t>
        <figure>
          <artwork><![CDATA[
CS: <presence from='juliet@example.com' 
              to='romeo@example.net'
              type='unsubscribed'/>
          ]]></artwork>
        </figure>
        <t>The contact's server then MUST send a roster push with the updated roster item to all of the contact's interested resources, where the subscription state is now either "none" or "to" (see <xref target='substates'/>).</t>
        <figure>
          <artwork><![CDATA[
CS: <iq id='a78b4q6ha465'
        to='juliet@example.com/balcony'
        type='set'>
      <query xmlns='jabber:iq:roster'>
        <item jid='romeo@example.net'
              subscription='none'/>
      </query>
    </iq>

CS: <iq id='a78b4q6ha466'
        to='juliet@example.com/chamber'
        type='set'>
      <query xmlns='jabber:iq:roster'>
        <item jid='romeo@example.net'
              subscription='none'/>
      </query>
    </iq>
          ]]></artwork>
        </figure>
      </section>

      <section title="Server Processing of Inbound Subscription Cancellation" anchor="sub-cancel-inbound">
        <t>When the user's server receives the inbound subscription cancellation, it MUST first check if the contact is in the user's roster with subscription='to' or subscription='both' (see <xref target='substates'/>).  If this check is successful, the user's server MUST initiate a roster push to all of the user's interested resources, containing an updated roster item for the contact with the 'subscription' attribute set to a value of "none" (if the subscription state was "To" or "To + Pending In") or "from" (if the subscription state was "Both").</t>
        <figure>
          <artwork><![CDATA[
US: <iq id='h37h3u1bv400'
        to='romeo@example.net/foo'
        type='set'>
      <query xmlns='jabber:iq:roster'>
        <item jid='juliet@example.com'
              subscription='none'/>
      </query>
    </iq>

US: <iq id='h37h3u1bv401'
        to='romeo@example.net/bar'
        type='set'>
      <query xmlns='jabber:iq:roster'>
        <item jid='juliet@example.com'
              subscription='none'/>
        </item>
      </query>
    </iq>
          ]]></artwork>
        </figure>
        <t>(Otherwise -- that is, if the user does not exist, if the contact is not in the user's roster, or if the contact is in the user's roster with a subscription state other than those described in the foregoing check -- then the user's server MUST silently ignore the stanza by not delivering it to the user, not modifying the user's roster, and not generating a roster push to the user's interested resources.)</t>
      </section>
    </section>

    <section title="Unsubscribing" anchor="sub-unsub">
      <section title="Client Generation of Unsubscribe" anchor="sub-unsub-gen">
        <t>If a user would like to unsubscribe from a contact's presence, it sends a presence stanza of type "unsubscribe".</t>
        <figure>
          <artwork><![CDATA[
UC: <presence to='juliet@example.com' type='unsubscribe'/>
          ]]></artwork>
        </figure>
      </section>

      <section title="Server Processing of Outbound Unsubscribe" anchor="sub-unsub-outbound">
        <t>Upon receiving the outbound unsubscribe, the user's server MUST proceed as follows.</t>
        <t>
          <list style='numbers'>
            <t>If the contact is hosted on the same server as the user, then the server MUST adhere to the rules specified in the next section in processing the subscription request.</t>
            <t>If the contact is hosted on a remote server, subject to local service policies the user's server MUST then route the stanza to that remote domain in accordance with core XMPP stanza processing rules.  (This can result in returning an appropriate stanza error to the user, such as &lt;remote-server-timeout/&gt;.)</t>
          </list>
        </t>
        <t>As mentioned, before locally delivering or remotely routing the unsubscrbe, the user's server MUST stamp the stanza with the bare JID &lt;user@domain&gt; of the user.</t>
        <figure>
          <artwork><![CDATA[
US: <presence from='romeo@example.net'
              to='juliet@example.com' 
              type='unsubscribe'/>
          ]]></artwork>
        </figure>
        <t>The user's server then MUST send a roster push with the updated roster item to all of the user's interested resources, where the subscription state is now either "none" or "from" (see <xref target='substates'/>).</t>
        <figure>
          <artwork><![CDATA[
US: <iq id='h37h3u1bv402'
        to='romeo@example.net/foo'
        type='set'>
      <query xmlns='jabber:iq:roster'>
        <item jid='juliet@example.com'
              subscription='none'/>
      </query>
    </iq>

US: <iq to='romeo@example.net/bar'
        type='set'
        id='h37h3u1bv403'>
      <query xmlns='jabber:iq:roster'>
        <item jid='juliet@example.com'
              subscription='none'/>
        </item>
      </query>
    </iq>
          ]]></artwork>
        </figure>
      </section>

      <section title="Server Processing of Inbound Unsubscribe" anchor="sub-unsub-inbound">
        <t>When the contact's server receives the unsubscribe notification, it MUST first check if the user is in the contact's roster with subscription='from' or subscription='both' (i.e., a subscription state of "From", "From + Pending Out", or "Both"; see <xref target='substates'/>).  If this check is successful, the contact's server MUST initiate a roster push to all of the contact's interested resources, containing an updated roster item for the contact with the 'subscription' attribute set to a value of "none" (if the subscription state was "From" or "From + Pending Out") or "to" (if the subscription state was "Both").</t>
        <figure>
          <artwork><![CDATA[
CS: <iq id='a78b4q6ha467'
        to='juliet@example.com/balcony'
        type='set'>
      <query xmlns='jabber:iq:roster'>
        <item jid='romeo@example.net'
              subscription='none'/>
      </query>
    </iq>

CS: <iq id='a78b4q6ha468'
        to='juliet@example.com/chamber'
        type='set'>
      <query xmlns='jabber:iq:roster'>
        <item jid='romeo@example.net'
              subscription='none'/>
      </query>
    </iq>
          ]]></artwork>
        </figure>
        <t>The contact's server SHOULD also send a presence stanza of type "unsubscribed" and a presence stanza of type "unavailable" to the user.  However, the user's client MUST NOT depend on receiving these presence stanzas, since it MUST consider its presence subscription to the contact, and its presence information about the contact, to be null and void when it sends the presence stanza of type "unusbscribe" or when receives the roster push triggered by the unsubscribe request.</t>
        <t>(Otherwise -- that is, if the contact does not exist, if the user is not in the contact's roster, or if the user is in the contact's roster with a subscription state other than those described in the foregoing check -- then the contact's server MUST silently ignore the stanza by not delivering it to the contact, not modifying the contact's roster, and not generating a roster push to the contact's interested resources.)</t>
      </section>
    </section>
  </section>

  <section title="Exchanging Presence Information" anchor="presence">

    <section title="Overview" anchor="presence-overview">
      <t>The concept of presence refers to an entity's availability for communication over a network.  At the most basic level, presence is a boolean "on/off" variable that signals whether an entity is available or unavailable for communication (the terms "online" and "offline" are also used).  In XMPP, a user's availability is signalled when a client controlled by the user generates a &lt;presence/&gt; stanza with no 'type' attribute, and an entity's lack of availability is signalled when a client generates a &lt;presence/&gt; stanza whose 'type' attribute has a value of "unavailable".</t>
      <t>XMPP presence typically follows a "publish-subscribe" or "observer" pattern, wherein an entity sends presence to its server, and its server then broadcasts that information to all of the entity's contacts who have a subscription to the entity's presence (in the terminology of <xref target="IMP-MODEL"/>, an entity that generates presence is a "presentity" and the entities that receive presence are "subscribers").  A client generates presence for broadcasting to all subscribed entities by sending a presence stanza to its server with no 'to' address, where the presence stanza has either no 'type' attribute or a 'type' attribute whose value is "unavailable". <iref item='Presence Broadcast'/> This kind of presence is called BROADCAST PRESENCE. <iref item='Directed Presence'/> (A client can also send DIRECTED PRESENCE, i.e., a presence stanza with a 'to' address; this is less common but is sometimes used to send presence to entities that are not subscribed to the user's presence; see <xref target='presence-directed'/>.)</t>
      <t><iref item='Presence Session'/>After a client completes the preconditions specified in <xref target="xmpp-core"/>, it can establish a PRESENCE SESSION at its server by sending <xref target='presence-initial'>initial presence</xref>, where the presence session is terminated by sending <xref target='presence-unavailable'>unavailable presence</xref>.  <iref item='Available Resource'/> For the duration of its presence session, a connected resource (in the terminology of <xref target="xmpp-core"/>) is said to be an AVAILABLE RESOURCE.</t>
      <t>In XMPP-based applications that combine messaging and presence functionality, the default type of communication for which presence signals availability is messaging; however, it is not necessary for XMPP-based applications to combine messaging and presence functionality, and can provide standalone presence features without messaging (in addition, XMPP servers do not require information about network availability in order to successfully route message and IQ stanzas).</t>
      <t><list style='empty'><t>Note: In the following examples, the "user" is juliet@example.com and the user has three contacts in her roster with a subscription state of "from" or "both": romeo@example.net, mercutio@example.com, and benvolio@example.net.</t></list></t>
    </section>

    <section title="Initial Presence" anchor="presence-initial">
      <section title="Client Generation of Initial Presence" anchor="presence-initial-gen">
        <t><iref item='Initial Presence'/>After completing the preconditions described in <xref target="xmpp-core"/> (REQUIRED) and requesting the roster (RECOMMENDED), a client signals its availability for communication by sending INITIAL PRESENCE to its server, i.e., a presence stanza with no 'to' address (indicating that it is meant to be broadcast by the server on behalf of the client) and no 'type' attribute (indicating the user's availability).</t>
        <figure>
          <artwork><![CDATA[
UC: <presence/>
          ]]></artwork>
        </figure>
        <t>The initial presence stanza MAY contain the &lt;priority/&gt; element, the &lt;show/&gt; element, and one or more instances of the &lt;status/&gt; element, as well as extended content.</t>
      </section>

      <section title="Server Processing of Outbound Presence" anchor="presence-initial-outbound">
        <t>Upon receiving initial presence from a client, the user's server MUST send the initial presence stanza from the full JID &lt;user@domain/resource&gt; of the user to all contacts that are subscribed to the user's presence; such contacts are those for which a JID is present in the user's roster with the 'subscription' attribute set to a value of "from" or "both".</t>
        <figure>
          <artwork><![CDATA[
US: <presence from='juliet@example.com/balcony' 
              to='romeo@example.net'/>

US: <presence from='juliet@example.com/balcony' 
              to='mercutio@example.com'/>

US: <presence from='juliet@example.com/balcony' 
              to='benvolio@example.net'/>
          ]]></artwork>
        </figure>
        <t>The user's server MUST also broadcast initial presence from the user's newly available resource to all of the user's available resources (including the resource that generated the presence notification in the first place).</t>
        <figure>
          <artwork><![CDATA[
US: <presence from='juliet@example.com/balcony' 
              to='juliet@example.com/balcony'/>

US: <presence from='juliet@example.com/balcony' 
              to='juliet@example.com/chamber'/>
          ]]></artwork>
        </figure>
        <t>In the absence of presence information about the user's contacts, the user's server MUST also send presence probes to the user's contacts on behalf of the user as specified under <xref target='presence-probe'/>.</t>
      </section>

      <section title="Server Processing of Inbound Presence" anchor="presence-initial-inbound">
        <t>Upon receiving presence from the user, the contact's server MUST deliver the user's presence stanza to all of the contact's available resources.</t>
        <figure>
          <artwork><![CDATA[
[ ... to resource1 ... ]

CS: <presence from='juliet@example.com/balcony' 
              to='romeo@example.net'/>

[ ... to resource2 ... ]

CS: <presence from='juliet@example.com/balcony' 
              to='romeo@example.net'/>
          ]]></artwork>
        </figure>
        <t>If there is no such contact, the contact's server MUST silently ignore the presence stanza.</t>
      </section>

      <section title="Client Processing of Inbound Presence" anchor="presence-initial-client">
        <t>When the contact's client receives presence from the user, it SHOULD proceed as follows:</t>
        <t>
          <list style='numbers'>
            <t>If the user is in the contact's roster, the client MUST display the presence information in an appropriate roster interface.</t>
            <t>If the user is not in the contact's roster but the contact and the user are actively exchanging message or IQ stanzas, the contact's client SHOULD display the presence information in the user interface for that chat session (see also <xref target='presence-directed'/> and <xref target='message-chat'/>).</t>
            <t>Otherwise, the client MUST ignore the presence information and not display it to the contact.</t>
          </list>
        </t>
      </section>
    </section>

    <section title="Presence Probes" anchor="presence-probe">
      <t><iref item='Presence Probe'/>A PRESENCE PROBE is a request for a contact's current presence information, sent on behalf of a user by the user's server; syntactically it is a presence stanza whose 'type' attribute has a value of "probe".  The value of the 'from' address MUST be the full JID &lt;user@domain/resource&gt; of the user and the value of the 'to' address MUST be the bare JID &lt;contact@domain&gt; of the contact to which the user is subscribed.</t>
      <figure>
        <artwork><![CDATA[
US: <presence from='juliet@example.com/balcony' 
              to='romeo@example.net' 
              type='probe'/>
        ]]></artwork>
      </figure>
      <t><list style='empty'><t>Note: Although presence probes MAY be sent by a client, in general a client will not need to send them since the task of gathering presence from a user's contacts is managed by the user's server.  However, if a client generates an outbound presence probe then the user's server SHOULD route the probe (if the contact is at another server) or process the probe (if the contact is at the same server) and MUST NOT return a stanza or stream error to the client.</t></list></t>
      <t>If a server receives a presence probe intended for a full JID &lt;contact@domain/resource&gt;, it SHOULD handle it on behalf of the connected resource by returning only the presence information for that particular resource (and in any case MUST NOT deliver it to the resource).</t>

      <section title="Server Generation of Outbound Presence Probe" anchor="presence-probe-outbound">
        <t>When a server needs to discover the availability of a user's contact, it sends a presence probe from the full JID &lt;user@domain/resource&gt; of the user to the bare JID &lt;contact@domain&gt; of the contact.  The server MUST NOT send a probe to a contact if the user is not subscribed to the contact's presence (i.e., if the contact is not in the user's roster with the 'subscription' attribute set to a value of "to" or "both".</t>
        <t>The user's server SHOULD send a presence probe whenever the user starts a new presence session by sending initial presence; however, the server MAY choose not to send the probe at that point if it has what it deems to be reliable and up-to-date presence information about the user's contacts (e.g., because the user has another available resource or because the user briefly logged off and on before the new presence session began).  In addition, a server MAY periodically send a presence probe to a contact if it has not received presence information or other traffic from the contact in some configurable amount of time; this can help to prevent "ghost" contacts who appear to be online but in fact are not.</t>
        <figure>
          <artwork><![CDATA[
US: <presence from='juliet@example.com/balcony' 
              to='romeo@example.net' 
              type='probe'/>

US: <presence from='juliet@example.com/balcony' 
              to='benvolio@example.net' 
              type='probe'/>
          ]]></artwork>
        </figure>
        <t>Naturally, the user's server does not need to send a presence probe to a contact if the contact's account resides on the same server as the user, since the server possesses contact's information locally.</t>
              
        </section>

      <section title="Server Processing of Inbound Presence Probe" anchor="presence-probe-inbound">
        <t>Upon receiving a presence probe from the user's server on behalf of the user, the contact's server SHOULD reply as follows:</t>
        <t>
          <list style="numbers">
            <t>If the contact account does not exist or the user is in the contact's roster with a subscription state other than "From", "From + Pending Out", or "Both" (as defined under <xref target='substates'/>) and the contact has not sent directed presence to the user (as defined under <xref target='presence-directed'/>), then the contact's server MUST return a presence stanza of type "unsubscribed" in response to the presence probe (however, if a server receives a presence probe from a configured hostname of the server itself or another such trusted service, it MAY provide presence information about the user to that entity).
              <figure>
                <artwork><![CDATA[
CS: <presence from='mercutio@example.com' 
              to='juliet@example.com' 
              type='unsubscribed'/>
                ]]></artwork>
              </figure>
            </t>
            <t>Else, if the contact has no available resources, then the server SHOULD reply to the presence probe by sending to the user the full XML of the last presence stanza of type "unavailable" received by the server from the contact (however, the server MAY opt to not reply at all).</t>
            <t>Else, if the contact has at least one available resource, then the server MUST reply to the presence probe by sending to the user the full XML of the last presence stanza with no 'to' attribute received by the server from each of the contact's available resources.
              <figure>
                <artwork><![CDATA[
CS: <presence from='romeo@example.net/foo'
              to='juliet@example.com'/>

CS: <presence from='romeo@example.net/bar'
              to='juliet@example.com'>
      <show>away</show>
    </presence>
                ]]></artwork>
              </figure>
            </t>
          </list>
        </t>
      </section>
    </section>

    <section title="Subsequent Presence Broadcast" anchor="presence-broadcast">
      <section title="Client Generation of Presence Broadcast" anchor="presence-broadcast-gen">
        <t>After sending initial presence, the user's client can update its availability for broadcasting at any time during its session by sending a presence stanza with no 'to' address and no 'type' attribute.</t>
        <figure>
          <artwork><![CDATA[
UC: <presence>
      <show>away</show>
    </presence>
          ]]></artwork>
        </figure>
        <t>The presence broadcast MAY contain the &lt;priority/&gt; element, the &lt;show/&gt; element, and one or more instances of the &lt;status/&gt; element, as well as extended content.</t>
        <t>However, a user SHOULD send a presence update only to broadcast information that is relevant to the user's availability for communication or the communication capabilities of the connected resource.  Information that is not relevant in this way can be of interest to the user's contacts but SHOULD be sent via other means, such as the XMPP message stanza.</t>
      </section>

      <section title="Server Processing of Outbound Presence" anchor="presence-broadcast-outbound">
        <t>Upon receiving a presence stanza expressing updated availability, the user's server MUST broadcast the full XML of that presence stanza to the contacts who meet all of the following criteria:</t>
        <t>
          <list style='numbers'>
            <t>The contact is in the user's roster with a subscription type of "from" or "both".</t>
            <t>The last presence stanza received from the contact during the user's presence session was not of type "error" or "unsubscribe".</t>
          </list>
        </t>
        <t>As an optimization, if the subscription type is "both", then the server SHOULD send subsequent presence notifications to a contact only if the contact is online according to the user's server.  That is, if the user's server never received a positive indication that the contact is online in response to the presence probe it sent to the contact or if the last presence stanza it received from the contact during the user's presence session was of type "unavailable", the user's server SHOULD NOT send subsequent presence notifications from the user to the contact.  This optimization helps to save bandwidth, since most presence subscriptions are bidirectional and many contacts will not be online at any given time.</t>
        <figure>
          <artwork><![CDATA[
US: <presence from='juliet@example.com/balcony' 
              to='romeo@example.net'>
      <show>away</show>
    </presence>

US: <presence from='juliet@example.com/balcony' 
              to='benvolio@example.net'>
      <show>away</show>
    </presence>

US: <presence from='juliet@example.com/balcony' 
              to='mercutio@example.com'>
      <show>away</show>
    </presence>
          ]]></artwork>
        </figure>
        <t><list style='empty'><t>See <xref target='presence-directed'/> regarding rules that supplement the foregoing for handling of directed presence.</t></list></t>
        <t>The user's server MUST also send the presence stanza to all of the user's available resources (including the resource that generated the presence notification in the first place).</t>
        <figure>
          <artwork><![CDATA[
US: <presence from='juliet@example.com/balcony' 
              to='juliet@example.com/chamber'>
      <show>away</show>
    </presence>

US: <presence from='juliet@example.com/balcony' 
              to='juliet@example.com/balcony'>
      <show>away</show>
    </presence>
          ]]></artwork>
        </figure>
      </section>

      <section title="Server Processing of Inbound Presence" anchor="presence-broadcast-inbound">
        <t>Upon receiving presence from the user, the contact's server MUST deliver the user's presence stanza to all of the contact's available resources.</t>
        <figure>
          <artwork><![CDATA[
[ ... to resource1 ... ]

CS: <presence from='juliet@example.com/balcony' 
              to='romeo@example.net'>
      <show>away</show>
    </presence>

[ ... to resource2 ... ]

CS: <presence from='juliet@example.com/balcony' 
              to='romeo@example.net'>
      <show>away</show>
    </presence>
          ]]></artwork>
        </figure>
      </section>

      <section title="Client Processing of Inbound Presence" anchor="presence-broadcast-client">
        <t>When the contact's client receives presence from the user, it SHOULD proceed as follows:</t>
        <t>
          <list style='numbers'>
            <t>If the user is in the contact's roster, the client MUST display the presence information in an appropriate roster interface.</t>
            <t>If the user is not in the contact's roster but the contact and the user are actively exchanging message or IQ stanzas, the contact's client SHOULD display the presence information in the user interface for that chat session (see also <xref target='presence-directed'/> and <xref target='message-chat'/>).</t>
            <t>Otherwise, the client MUST ignore the presence information and not display it to the contact.</t>
          </list>
        </t>
      </section>
    </section>

    <section title="Unavailable Presence" anchor="presence-unavailable">
      <section title="Client Generation of Unavailable Presence" anchor="presence-unavailable-gen">
        <t><iref item='Unavailable Presence'/>Before ending its presence session with a server, the user's client SHOULD gracefully become unavailable by sending UNAVAILABLE PRESENCE, i.e., a presence stanza that possesses no 'to' attribute and that possesses a 'type' attribute whose value is "unavailable".</t>
        <figure>
          <artwork><![CDATA[
UC: <presence type='unavailable'/>
          ]]></artwork>
        </figure>
        <t>Optionally, the unavailable presence stanza MAY contain one or more &lt;status/&gt; elements specifying the reason why the user is no longer available.</t>
        <figure>
          <artwork><![CDATA[
UC: <presence type='unavailable'>
      <status>going on vacation</status>
    </presence>
          ]]></artwork>
        </figure>
        <t>However, the unavailable presence stanza MUST NOT contain the &lt;priority/&gt; element or the &lt;show/&gt; element, since these elements apply only to available presence.</t>
      </section>

      <section title="Server Processing of Outbound Unavailable Presence" anchor="presence-unavailable-outbound">
        <t>The user's server MUST NOT depend on receiving unavailable presence from an available resource, since the resource can become unavailable ungracefully (e.g., the resource can be timed out by the server because of inactivity).</t>
        <t>If an available resource becomes unavailable for any reason (either gracefully or ungracefully), the user's server MUST broadcast unavailable presence to all contacts that meet all of the following criteria:</t>
        <t>
          <list style='numbers'>
            <t>The contact is in the user's roster with a subscription type of "from" or "both".</t>
            <t>The last presence stanza received from the contact during the user's presence session was not of type "error" or "unsubscribe".</t>
          </list>
        </t>
        <t><list style='empty'><t>See <xref target='presence-directed'/> regarding rules that supplement the foregoing for handling of directed presence.</t></list></t>
        <t><list style='empty'><t>The optimization employed for subsequent presence broadcast during a user's presence session MUST NOT be employed for unavailable presence broadcast; if it were, the last presence received by the contact's server would be the user's initial presence for the presence session, with the result that the contact would consider the user to be online.</t></list></t>
        <t>If the unavailable presence stanza was gracefully received from the client, then the server MUST broadcast the full XML of the presence stanza.</t>
        <figure>
          <artwork><![CDATA[
US: <presence from='juliet@example.com/balcony' 
              to='romeo@example.net'
              type='unavailable'/>
      <status>going on vacation</status>
    </presence>

US: <presence from='juliet@example.com/balcony' 
              to='benvolio@example.net'
              type='unavailable'>
      <status>going on vacation</status>
    </presence>

US: <presence from='juliet@example.com/balcony' 
              to='mercutio@example.com'
              type='unavailable'>
      <status>going on vacation</status>
    </presence>
          ]]></artwork>
        </figure>
        <t>The user's server MUST also send the unavailable presence stanza to all of the user's available resources (including the resource that generated the presence notification in the first place).</t>
        <figure>
          <artwork><![CDATA[
US: <presence from='juliet@example.com/balcony' 
              to='juliet@example.com/chamber'
              type='unavailable'>
      <status>going on vacation</status>
    </presence>
          ]]></artwork>
        </figure>
        <t>If the server detects that the user has gone offline ungracefully, then the server MUST generate the unavailable presence broadcast on the user's behalf.</t>
        <t><list style='empty'><t>Note: Any presence stanza with no 'type' attribute and no 'to' attribute that is sent after sending unavailable presence broadcast MUST be sent by the user's server to all subscribers (i.e., MUST be treated as equivalent to initial presence for a new presence session).</t></list></t>
      </section>

      <section title="Server Processing of Inbound Unavailable Presence" anchor="presence-unavailable-inbound">
        <t>Upon receiving unavailable presence from the user, the contact's server MUST deliver the user's presence stanza to all of the contact's available resources.</t>
        <figure>
          <artwork><![CDATA[
[ ... to resource1 ... ]

CS: <presence from='juliet@example.com/balcony' 
              to='romeo@example.net'
              type='unavailable'>
      <status>going on vacation</status>
    </presence>

[ ... to resource2 ... ]

CS: <presence from='juliet@example.com/balcony' 
              to='romeo@example.net'
              type='unavailable'>
      <status>going on vacation</status>
    </presence>
          ]]></artwork>
        </figure>
        <t>If the contact's server is optimizing subsequent presence delivery as described under <xref target='presence-broadcast'/>, it MUST also note that the user is unavailable and appropriately update its internal representation of which entities are online.</t>
      </section>

      <section title="Client Processing of Inbound Unavailable Presence" anchor="presence-unavailable-client">
        <t>When the contact's client receives unavailable presence from the user, it SHOULD proceed as follows:</t>
        <t>
          <list style='numbers'>
            <t>If the user is in the contact's roster, the client MUST display the unavailable presence information in an appropriate roster interface.</t>
            <t>If the user is not in the contact's roster but the contact and the user are actively exchanging message or IQ stanzas, the contact's client SHOULD display the unavailable presence information in the user interface for that chat session (see also <xref target='presence-directed'/> and <xref target='message-chat'/>).</t>
            <t>Otherwise, the client MUST ignore the unavailable presence information and not display it to the contact.</t>
          </list>
        </t>
        <t>Typically, presence is presence about a particular connected resource.  However, it is possible for the contact to receive an unavailable presence notification from the bare JID of the user.  In this case, the presence notificatio SHOULD be treated as related to a resource identifier of zero length, which does not overshadow other resources associated with the same bare JID.</t>
      </section>
    </section>

    <section title="Directed Presence" anchor="presence-directed">
      <t>This section supplements and in some respects modifies the rules for client and server processing of presence notifications, but only for the special case of directed presence.</t>
      <section title="Client Generation of Directed Presence" anchor="presence-directed-gen">
        <t>As noted, directed presence is a presence stanza with a 'to' attribute whose value is the bare JID or full JID of the other entity and with either no 'type' attribute (indicating availability) or a 'type' attribute whose value is "unavailable".</t>
        <t>Information about the use of directed presence in the context of a one-to-one chat session is provided under <xref target='message-chat'/>.</t>
      </section>
      <section title="Server Processing of Outbound Directed Presence" anchor="presence-directed-outbound">
        <t>When the user's server receives a directed presence stanza, it SHOULD process it according to the following rules.</t>
        <t>
          <list style="numbers">
            <t>If the user sends directed available or unavailable presence to a contact that is in the user's roster with a subscription type of "from" or "both" after having sent initial presence and before sending unavailable presence broadcast (i.e., during the user's presence session), the user's server MUST locally deliver or remotely route the full XML of that presence stanza but SHOULD NOT otherwise modify the contact's status regarding presence broadcast (i.e., it SHOULD include the contact's JID in any subsequent presence broadcasts initiated by the user).</t>
            <t>If the user sends directed presence to an entity that is not in the user's roster with a subscription type of "from" or "both" after having sent initial presence and before sending unavailable presence broadcast (i.e., during the user's presence session), the user's server MUST locally deliver or remotely route the full XML of that presence stanza to the entity but MUST NOT modify the contact's status regarding available presence broadcast (i.e., it MUST NOT include the entity's JID in any subsequent broadcasts of available presence initiated by the user); however, if the available resource from which the user sent the directed presence becomes unavailable, the user's server MUST route that unavailable presence to the entity (if the user has not yet sent directed unavailable presence to that entity).</t>
            <t>If the user sends directed presence without first sending initial presence or after having sent unavailable presence broadcast (i.e., the resource is connected but not available), the user's server MUST treat the entity to which the user sends directed presence as in case #2 above.</t>
          </list>
        </t>
      </section>
      <section title="Server Processing of Inbound Directed Presence" anchor="presence-directed-inbound">
        <t>From the perspective of the contact's server, there is no difference between presence broadcast and directed presence, so the contact's server follows the existing rules for processing of inbound presence.</t>
      </section>

      <section title="Client Processing of Inbound Directed Presence" anchor="presence-directed-client">
        <t>When the contact's client receives directed presence from the user, it SHOULD proceed as follows:</t>
        <t>
          <list style='numbers'>
            <t>If the user is in the contact's roster, the client MUST display the presence information in an appropriate roster interface.</t>
            <t>If the user is not in the contact's roster but the contact and the user are actively exchanging message or IQ stanzas, the contact's client SHOULD display the presence information in the user interface for that chat session (see also <xref target='presence-directed'/> and <xref target='message-chat'/>).</t>
            <t>Otherwise, the client MUST ignore the presence information and not display it to the contact.</t>
          </list>
        </t>
      </section>
    </section>

    <section title="Presence Syntax" anchor="presence-syntax">
      <section title="Type Attribute" anchor="presence-syntax-type">
        <t>The absence of a 'type' attribute signals that the relevant entity is available for communication (see <xref target='presence-initial'/> and <xref target='presence-broadcast'/>).</t>
        <t>A 'type' attribute with a value of "unavailable" signals that the relevant entity is not available for communication (see <xref target='presence-unavailable'/>).</t>
        <t>The XMPP presence stanza is also used to negotiate and manage subscriptions to the presence of other entities.  These tasks are completed via presence stanzas of type "subscribe", "unsubscribe", "subscribed", and "unsubscribed" as described under <xref target='sub'/>.</t>
        <t>If a user and contact are associated with different XMPP servers, those servers also use a special presence stanza of type "probe" in order to determine the availability of the entity on the peer server; for details, see <xref target='presence-probe'/>.  Clients SHOULD NOT send presence stanzas of type "probe".</t>
        <t>The values of the 'type' attribute can be summarized as follows:</t>
        <t>
          <list style="symbols">
            <t>error -- An error has occurred regarding processing of a previously-sent presence stanza; if the presence stanza is of type "error", it MUST include an &lt;error/&gt; child element (refer to <xref target="xmpp-core"/>).</t>
            <t>probe -- A request for an entity's current presence; SHOULD be generated only by a server on behalf of a user.</t>
            <t>subscribe -- The sender wishes to subscribe to the recipient's presence.</t>
            <t>subscribed -- The sender has allowed the recipient to receive their presence.</t>
            <t>unavailable -- Signals that the entity is no longer available for communication.</t>
            <t>unsubscribe -- The sender is unsubscribing from the receiver's presence.</t>
            <t>unsubscribed -- The subscription request has been denied or a previously-granted subscription has been cancelled.</t>
          </list>
        </t>
        <t>If the value of the 'type' attribute is not one of the foregoing values, the recipient or an intermediate router SHOULD return a stanza error of &lt;bad-request/&gt;.</t>
        <t><list style='empty'><t>Note: There is no default value for the 'type' attribute of the &lt;presence/&gt; element; in particular, there is no value of "available".</t></list></t>
      </section>
      <section title="Child Elements" anchor="presence-syntax-children">
        <t>In accordance with the default namespace declaration, a presence stanza is qualified by the 'jabber:client' or 'jabber:server' namespace, which defines certain allowable children of presence stanzas, in particular the &lt;show/&gt;, &lt;status/&gt;, and &lt;priority/&gt; elements.  These child elements are used to provide more detailed information about an entity's availability.  Typically these child elements are provided only if the presence stanza possesses no 'type' attribute, although exceptions are noted in the text that follows.</t>
      </section>
      <section title="Show Element" anchor="presence-show">
        <t>The OPTIONAL &lt;show/&gt; element specifies the particular availability sub-state of an entity or a specific resource thereof.  A presence stanza MUST NOT contain more than one &lt;show/&gt; element.  There are no attributes defined for the &lt;show/&gt; element.  The XML character data of the &lt;show/&gt; element is not human-readable.  The XML character data MUST be one of the following (additional availability states could be defined through a child element of the presence stanza that is qualified by a namespace other than the default namespace):</t>
        <t>
          <list style="symbols">
            <t>away -- The entity or resource is temporarily away.</t>
            <t>chat -- The entity or resource is actively interested in chatting.</t>
            <t>dnd -- The entity or resource is busy (dnd = "Do Not Disturb").</t>
            <t>xa -- The entity or resource is away for an extended period (xa = "eXtended Away").</t>
          </list>
        </t>
        <t>If no &lt;show/&gt; element is provided, the entity is assumed to be online and available.</t>
        <t>Any specialized processing of availability states by recipients and intermediate routers is up to the implementation (e.g., incorporation of availability states into stanza routing and delivery logic).</t>
      </section>
      <section title="Status Element" anchor="presence-status">
        <t>The OPTIONAL &lt;status/&gt; element contains human-readable XML character data specifying a natural-language description of an entity's availability.  It is normally used in conjunction with the show element to provide a detailed description of an availability state (e.g., "In a meeting") when the presence stanza has no 'type' attribute.</t>
        <figure>
          <artwork><![CDATA[
<presence from='romeo@example.net/orchard'
          xml:lang='en'>
  <show>dnd</show>
  <status>Wooing Juliet</status>
</presence>
          ]]></artwork>
        </figure>
        <t>There are no attributes defined for the &lt;status/&gt; element, with the exception of the 'xml:lang' attribute inherited from XML.  Multiple instances of the &lt;status/&gt; element MAY be included, but only if each instance possesses an 'xml:lang' attribute with a distinct language value (either explicitly or by inheritance from the 'xml:lang' value of an element farther up in the XML hierarchy, which can include the XML stream header as described in <xref target="xmpp-core"/>).</t>
        <figure>
          <artwork><![CDATA[
<presence from='romeo@example.net/orchard'
          xml:lang='en'>
  <show>dnd</show>
  <status>Wooing Juliet</status>
  <status xml:lang='cs'>Dvo&#x0159;&#x00ED;m se Julii</status>
</presence>
          ]]></artwork>
        </figure>
        <t>A presence stanza of type "unavailable" MAY also include a &lt;status/&gt; element to provide detailed information about why the entity is going offline.</t>
        <figure>
          <artwork><![CDATA[
<presence from='romeo@example.net/orchard'
          type='unavailable'
          xml:lang='en'>
  <status>Busy IRL</status>
</presence>
          ]]></artwork>
        </figure>
        <t>The &lt;status/&gt; child MAY also be sent in a subscription-related presence stanza (i.e., type "subscribe", "subscribed", "unsubscribe", or "unsubscribed") to provide a description of the action.  The receiving client MAY present this &lt;status/&gt; information to a human user (see <xref target='security'/>).</t>
        <figure>
          <artwork><![CDATA[
<presence from='romeo@example.net'
          to='nurse@example.com'
          type='subscribe'>
  <status>Hi, Juliet told to add you to my buddy list.</status>
</presence>
          ]]></artwork>
        </figure>
      </section>
      <section title="Priority Element" anchor="presence-priority">
        <t>The OPTIONAL &lt;priority/&gt; element contains non-human-readable XML character data that specifies the priority level of the resource.  The value MUST be an integer between -128 and +127.  A presence stanza MUST NOT contain more than one &lt;priority/&gt; element.  There are no attributes defined for the &lt;priority/&gt; element.</t>
        <figure>
          <artwork><![CDATA[
<presence xml:lang='en'>
  <show>dnd</show>
  <status>Wooing Juliet</status>
  <status xml:lang='cs'>Dvo&#x0159;&#x00ED;m se Julii</status>
  <priority>1</priority>
</presence>
          ]]></artwork>
        </figure>
        <t>If no priority is provided, the processing server or client MUST consider the priority to be zero ("0").</t>
        <t>For information regarding the semantics of priority values in stanza processing within instant messaging and presence applications, refer to <xref target="rules"/>.</t>
      </section>
      <section title="Extended Content" anchor="presence-extended">
        <t>As described in <xref target="xmpp-core"/>, an XML stanza MAY contain any child element that is qualified by a namespace other than the default namespace; this applies to the presence stanza as well.</t>
        <t>(In the following example, the presence stanza includes entity capabilities information as defined in <xref target='XEP-0115'/>).)</t>
        <figure>
          <artwork><![CDATA[
<presence from='romeo@example.net'>
  <c xmlns='http://jabber.org/protocol/caps' 
     hash='sha-1'
     node='http://psi-im.org'
     ver='q07IKJEyjvHSyhy//CH0CxmKi8w='/>
</presence>
          ]]></artwork>
        </figure>
        <t>Any extended content included in a presence stanza SHOULD represent aspects of an entity's availability for communication or provide information about communication-related capabilities.</t>
      </section>
    </section>
  </section>

  <section title="Exchanging Messages" anchor="message">
    <t>Once a client has authenticated with a server and bound a resource to an XML stream as described in <xref target="xmpp-core"/>, an XMPP server will route XML stanzas to and from that client.  One kind of stanza that can be exchanged is &lt;message/&gt; (if, that is, messaging functionality is enabled and the server is not a presence-only service).  Exchanging messages is a basic use of XMPP and occurs when a user generates a message stanza that is addressed to another entity.  As defined under <xref target="rules"/>, the sender's server is responsible for delivering the message to the intended recipient (if the recipient is on the same local server) or for routing the message to the recipient's server (if the recipient is on a remote server).  Thus a message stanza is used to "push" information to another entity.</t>
    <section title="One-to-One Chat Sessions" anchor="message-chat">
      <t>In practice, instant messaging activity between human users tends to occur in form of a conversational burst that we call <iref item='Chat Session'/> a CHAT SESSION: the exchange of at least several messages between two parties in relatively rapid succession within a relatively brief period of time.</t>
      <t>When a human user intends to engage in such a chat session with a contact (rather than sending a single message to which no reply is expected), the user's client SHOULD send a message of type "chat" and the contact's client SHOULD preserve that message type in subsequent replies.   The user's client also SHOULD include a &lt;thread/&gt; element with its initial message, which the contact's client SHOULD also preserve during the life of the chat session.</t>
      <t>The user's client MUST address the initial message in a chat session to the bare JID &lt;contact@domain&gt; (rather than attempting to guess an appropriate full JID &lt;contact@domain/resource&gt;).  Until and unless the user's client receives a reply from the contact, it MUST continue sending any further messages to the contact's bare JID.  The contact's client SHOULD address its subsequent replies to the user's full JID &lt;user@domain/resource&gt; as provided in the 'from' address of the initial message.  Once the user's client receives a reply from the contact's full JID, it SHOULD address its subsequent messages to the contact's full JID as provided in the 'from' address of the contact's replies.</t>
      <t>When two parties engage in a chat session but do not share presence with each other based on a presence subscription, they SHOULD send directed presence to each other so that either party can easily discover if the other party changes its availability or goes offline during the course of the chat session.  However, a client MUST provide a way for a user to disable such presence sharing globally or to enable it only with particular entities.  Furthermore, a party SHOULD send directed unavailable to the other party when it has reason to believe that the chat session is over (e.g., if, after some reasonable amount of time, no subsequent messages have been exchanged between the parties).</t>
      <t>An example of a chat session is provided under <xref target='session'/>.</t>
    </section>
    <section title="Message Syntax" anchor="message-syntax">
    <t>The following sections describe the syntax of the &lt;message/&gt; stanza.</t>
      <section title="To Attribute" anchor="message-syntax-to">
        <t>An instant messaging client specifies an intended recipient for a message by providing the JID of an entity other than the sender in the 'to' attribute of the &lt;message/&gt; stanza.</t>
        <t>If the message is being sent outside the context of any existing chat session or received message, the value of the 'to' address SHOULD be of the form &lt;user@domain&gt; rather than of the form &lt;user@domain/resource&gt;.</t>
        <figure>
          <artwork><![CDATA[
<message
    from='juliet@example.com/balcony'
    to='romeo@example.net'
    type='chat'
    xml:lang='en'>
  <body>Art thou not Romeo, and a Montague?</body>
</message>
          ]]></artwork>
        </figure>
        <t>If the message is being sent in reply to a message previously received from an address of the form &lt;user@domain/resource&gt; (e.g., within the context of a one-to-one chat session as described under <xref target='message-chat'/>), the value of the 'to' address SHOULD be of the form &lt;user@domain/resource&gt; rather than of the form &lt;user@domain&gt; unless the sender has knowledge (via presence) that the intended recipient's resource is no longer available.</t>
        <figure>
          <artwork><![CDATA[
<message
    from='romeo@example.net/orchard'
    to='juliet@example.com/balcony'
    type='chat'
    xml:lang='en'>
  <body>Neither, fair saint, if either thee dislike.</body>
</message>
          ]]></artwork>
        </figure>
      </section>
      <section title="Type Attribute" anchor="message-syntax-type">
      <t>Common uses of the message stanza in instant messaging applications include: single messages; messages sent in the context of a one-to-one chat session; messages sent in the context of a multi-user chat room; alerts, notifications, or other information to which no reply is expected; and errors.  These uses are differentiated via the 'type' attribute.  Inclusion of the 'type' attribute is RECOMMENDED.  If included, the 'type' attribute MUST have one of the following values:</t>
      <t>
        <list style="symbols">
          <t>chat -- The message is sent in the context of a one-to-one chat session.  Typically a receiving client will present message of type "chat" in an interface that enables one-to-one chat between the two parties, including an appropriate conversation history.  Detailed recommendations regarding one-to-one chat sessions are provided under <xref target='message-chat'/>.</t>
          <t>error -- The message is generated by an entity that experiences an error in processing a message received from another entity (for details regarding stanza error syntax, refer to <xref target="xmpp-core"/>).  A client that receives a message of type "error" SHOULD present an appropriate interface informing the sender of the nature of the error.</t>
          <t>groupchat -- The message is sent in the context of a multi-user chat environment (similar to that of <xref target="IRC"/>).  Typically a receiving client will present a message of type "groupchat" in an interface that enables many-to-many chat between the parties, including a roster of parties in the chatroom and an appropriate conversation history.  For detailed information about XMPP-based groupchat, refer to <xref target="XEP-0045"/>.</t>
          <t>headline -- The message provides an alert, a notification, or other information to which no reply is expected (e.g., news headlines, sports updates, near-real-time market data, and syndicated content).  Because no reply to the message is expected, typically a receiving client will present a message of type "headline" in an interface that appropriately differentiates the message from standalone messages, chat messages, or groupchat messages (e.g., by not providing the recipient with the ability to reply).  The receiving server SHOULD deliver the message to all of the recipient's available resources.</t>
          <t>normal -- The message is a standalone message that is sent outside the context of a one-to-one conversation or groupchat, and to which it is expected that the recipient will reply.  Typically a receiving client will present a message of type "normal" in an interface that enables the recipient to reply, but without a conversation history.  The default value of the 'type' attribute is "normal".</t>
        </list>
      </t>
      <t>An IM application SHOULD support all of the foregoing message types.  If an application receives a message with no 'type' attribute or the application does not understand the value of the 'type' attribute provided, it MUST consider the message to be of type "normal" (i.e., "normal" is the default).</t>
      <t>Although the 'type' attribute is OPTIONAL, it is considered polite to mirror the type in any replies to a message; furthermore, some specialized applications (e.g., a multi-user chat service) MAY at their discretion enforce the use of a particular message type (e.g., type='groupchat').</t>
      </section>
      <section title="Body Element" anchor="message-syntax-body">
        <t>The &lt;body/&gt; element contains human-readable XML character data that specifies the textual contents of the message; this child element is normally included but is OPTIONAL.</t>
        <figure>
          <artwork><![CDATA[
<message
    from='juliet@example.com/balcony'
    to='romeo@example.net'
    type='chat'
    xml:lang='en'>
  <body>Wherefore art thou, Romeo?</body>
</message>
          ]]></artwork>
        </figure>
        <t>There are no attributes defined for the &lt;body/&gt; element, with the exception of the 'xml:lang' attribute.  Multiple instances of the &lt;body/&gt; element MAY be included in a message stanza, but only if each instance possesses an 'xml:lang' attribute with a distinct language value (either explicitly or by inheritance from the 'xml:lang' value of an element farther up in the XML hierarchy, which can include the XML stream header as described in <xref target="xmpp-core"/>).</t>
        <figure>
          <artwork><![CDATA[
<message
    from='juliet@example.com/balcony'
    to='romeo@example.net'
    type='chat'
    xml:lang='en'>
  <body>Wherefore art thou, Romeo?</body>
  <body xml:lang='cs'>
     Pro&#x010D;e&#x017D; jsi ty, Romeo?
   </body>
</message>
          ]]></artwork>
        </figure>
        <t>The &lt;body/&gt; element MUST NOT contain mixed content (as defined in Section 3.2.2 of <xref target="XML"/>).</t>
      </section>
      <section title="Subject Element" anchor="message-syntax-subject">
        <t>The &lt;subject/&gt; element contains human-readable XML character data that specifies the topic of the message.</t>
        <figure>
          <artwork><![CDATA[
<message
    from='juliet@example.com/balcony'
    to='romeo@example.net'
    type='chat'
    xml:lang='en'>
  <subject>I implore you!</subject>
  <body>Wherefore art thou, Romeo?</body>
</message>
          ]]></artwork>
        </figure>
        <t>There are no attributes defined for the &lt;subject/&gt; element, with the exception of the 'xml:lang' attribute inherited from XML.  Multiple instances of the &lt;subject/&gt; element MAY be included for the purpose of providing alternate versions of the same subject, but only if each instance possesses an 'xml:lang' attribute with a distinct language value (either explicitly or by inheritance from the 'xml:lang' value of an element farther up in the XML hierarchy, which can include the XML stream header as described in <xref target="xmpp-core"/>).</t>
        <figure>
          <artwork><![CDATA[
<message
    from='juliet@example.com/balcony'
    to='romeo@example.net'
    type='chat'
    xml:lang='en'>
  <subject>I implore you!</subject>
  <subject xml:lang='cs'>
    &#x00DA;p&#x011B;nliv&#x011B; pros&#x00ED;m!
  </subject>
  <body>Wherefore art thou, Romeo?</body>
  <body xml:lang='cs'>
     Pro&#x010D;e&#x017E; jsi ty, Romeo?
   </body>
</message>
          ]]></artwork>
        </figure>
        <t>The &lt;subject/&gt; element MUST NOT contain mixed content (as defined in Section 3.2.2 of <xref target="XML"/>).</t>
      </section>
      <section title="Thread Element" anchor="message-syntax-thread">
        <t>The primary use of the XMPP &lt;thread/&gt; element is to uniquely identify a conversation thread or "chat session" between two entities instantiated by &lt;message/&gt; stanzas of type 'chat'.  However, the XMPP &lt;thread/&gt; element can also be used to uniquely identify an analogous thread between two entities instantiated by &lt;message/&gt; stanzas of type 'headline' or 'normal', or among multiple entities in the context of a multi-user chat room instantiated by &lt;message/&gt; stanzas of type 'groupchat'. It MAY also be used for &lt;message/&gt; stanzas not related to a human conversation, such as a game session or an interaction between plugins.  The &lt;thread/&gt; element is not used to identify individual messages, only conversations or messagingg sessions.</t>
        <t>The inclusion of the &lt;thread/&gt; element is OPTIONAL.  Because the &lt;thread/&gt; element uniquely identifies the particular conversation thread to which a message belongs, a message stanza MUST NOT contain more than one &lt;thread/&gt; element.</t>
        <t>The value of the &lt;thread/&gt; element is not human-readable and MUST be treated as opaque by entities; no semantic meaning can be derived from it, and only exact comparisons can be made against it.  The value of the &lt;thread/&gt; element MUST be a universally unique identifier (UUID) as described in <xref target='UUID'/>.</t>
        <t>The &lt;thread/&gt; element MAY possess a 'parent' attribute that identifies another thread of which the current thread is an offshoot or child; the value of the 'parent' MUST conform to the syntax of the &lt;thread/&gt; element itself.</t>
        <t>The &lt;thread/&gt; element MUST NOT contain mixed content (as defined in Section 3.2.2 of <xref target="XML"/>).</t>
        <figure>
          <artwork><![CDATA[
<message
    from='juliet@example.com/balcony'
    to='romeo@example.net'
    type='chat'
    xml:lang='en'>
  <subject>I implore you!</subject>
  <subject xml:lang='cs'>
    &#x00DA;p&#x011B;nliv&#x011B; pros&#x00ED;m!
  </subject>
  <body>Wherefore art thou, Romeo?</body>
  <body xml:lang='cs'>
     Pro&#x010D;e&#x017E; jsi ty, Romeo?
  </body>
  <thread parent='e0ffe42b28561960c6b12b944a092794b9683a38'>
    0e3141cd80894871a68e6fe6b1ec56fa
  </thread>
</message>
          ]]></artwork>
        </figure>
        <t>For detailed recommendations regarding use of the &lt;thread/&gt; element, refer to <xref target='XEP-0201'/>.</t>
      </section>
    </section>
    <section title="Extended Content" anchor="message-syntax-extended">
      <t>As described in <xref target="xmpp-core"/>, an XML stanza MAY contain any child element that is qualified by a namespace other than the default namespace; this applies to the message stanza as well.</t>
      <t>(In the following example, the message stanza includes an XHTML-formatted version of the message as defined in <xref target='XEP-0071'/>).)</t>
      <figure>
        <artwork><![CDATA[
<message
    from='juliet@example.com/balcony'
    to='romeo@example.net'
    type='chat'
    xml:lang='en'>
  <body>Wherefore art thou, Romeo?</body>
  <html xmlns='http://jabber.org/protocol/xhtml-im'>
    <body xmlns='http://www.w3.org/1999/xhtml'>
      Wherefore <span style='font-style: italic'>art</span>
      thou, <span style='color:red'>Romeo</span>?
    </body>
  </html>
</message>
        ]]></artwork>
      </figure>
    </section>

  </section>

  <section title="Exchanging IQ Stanzas" anchor="iq">
    <t>As described in <xref target="xmpp-core"/>, IQ stanzas provide a structured request-response mechanism.  The basic semantics of that mechanism (e.g., that the 'id' attribute is mandatory) are defined in <xref target="xmpp-core"/>, whereas the specific semantics needed to complete particular use cases are defined in all instances by the extended namespace that qualifies the direct child element of an IQ stanza of type "get" or "set".  The 'jabber:client' and 'jabber:server' namespaces do not define any children of IQ stanzas other than the &lt;error/&gt; element common to all stanza types.  This document defines one such extended namespace, for <xref target="roster">Managing the Roster</xref>.  However, an IQ stanza MAY contain structured information qualified by any extended namespace.</t>
    <t>As noted under <xref target='presence-directed'/>, if a user exchanges IQ stanzas with another entity but does not share presence with the entity based on a presence subscription, it is RECOMMENDED for the user's client to send directed presence to the other entity.</t>
  </section>

  <section title="A Sample Session" anchor="session">
    <t>The examples in this section illustrate a possible instant messaging and presence session.  The user is romeo@example.net, he has an available resource whose resource identifier is "orchard", and he has the following individuals in his roster:</t>
    <t><list style="symbols">
      <t>juliet@example.com (subscription="both" and she has two available resources, one whose resource identifier is "chamber" and another whose resource identifier is "balcony")</t>
      <t>benvolio@example.net (subscription="to")</t>
      <t>mercutio@example.org (subscription="from")</t>
    </list></t>
    <t>First, the user completes the preconditions (stream establishment, TLS and SASL negotiation, and resource binding) described in <xref target='xmpp-core'/>; those protocol flows are not reproduced here.</t>
    <t>Next, the user requests his roster.</t>
    <figure>
      <preamble>Example 1: User requests current roster from server:</preamble>
      <artwork><![CDATA[
UC: <iq from='romeo@example.net/balcony'
        id='ex1'
        type='get'>
      <query xmlns='jabber:iq:roster'/>
    </iq>
      ]]></artwork>
    </figure>
    <figure>
      <preamble>Example 2: User receives roster from server:</preamble>
      <artwork><![CDATA[
US: <iq to='romeo@example.net/balcony'
        id='ex1'
        type='result'>
      <query xmlns='jabber:iq:roster'>
        <item jid='juliet@example.com'
              name='Juliet'
              subscription='both'>
          <group>Friends</group>
        </item>
        <item jid='benvolio@example.org'
              name='Benvolio'
              subscription='to'/>
        <item jid='mercutio@example.org'
              name='Mercutio'
              subscription='from'/>
      </query>
    </iq>
      ]]></artwork>
    </figure>
    <t>Now the user begins a presence session.</t>
    <figure>
      <preamble>Example 3: User sends initial presence:</preamble>
      <artwork><![CDATA[
UC: <presence from='romeo@example.net/orchard'/>
      ]]></artwork>
    </figure>
    <figure>
      <preamble>Example 4: User's server sends presence probes to contacts with subscription="to" and subscription="both" on behalf of the user's available resource:</preamble>
      <artwork><![CDATA[
US: <presence
        from='romeo@example.net/orchard'
        to='juliet@example.com'
        type='probe'/>

US: <presence
        from='romeo@example.net/orchard'
        to='benvolio@example.org'
        type='probe'/>
        ]]></artwork>
    </figure>
    <figure>
      <preamble>Example 5: User's server sends initial presence to contacts with subscription="from" and subscription="both" on behalf of the user's available resource:</preamble>
      <artwork><![CDATA[
US: <presence
        from='romeo@example.net/orchard'
        to='juliet@example.com'/>

US: <presence
        from='romeo@example.net/orchard'
        to='mercutio@example.org'/>
        ]]></artwork>
    </figure>
    <figure>
      <preamble>Example 6: Contacts' servers reply to presence probe on behalf of all available resources:</preamble>
      <artwork><![CDATA[
CS: <presence
        from='juliet@example.com/balcony'
        to='romeo@example.net/orchard'
        xml:lang='en'>
      <show>away</show>
      <status>be right back</status>
      <priority>0</priority>
    </presence>

CS: <presence
        from='juliet@example.com/chamber'
        to='romeo@example.net/orchard'>
      <priority>1</priority>
    </presence>

CS: <presence
        from='benvolio@example.org/pda'
        to='romeo@example.net/orchard'
        xml:lang='en'>
      <show>dnd</show>
      <status>gallivanting</status>
    </presence>
      ]]></artwork>
    </figure>
    <figure>
      <preamble>Example 7: Contacts' servers deliver user's initial presence to all available resources:</preamble>
      <artwork><![CDATA[
CS: <presence
        from='romeo@example.net/orchard'
        to='juliet@example.com'/>

CS: <presence
        from='romeo@example.net/orchard'
        to='juliet@example.com'/>

CS: <presence
        from='mercutio@example.org'
        to='romeo@example.net'/>
      ]]></artwork>
    </figure>
    <figure>
      <preamble>Example 8: User sends directed presence to another user not in his roster:</preamble>
      <artwork><![CDATA[
UC: <presence
        from='romeo@example.net/orchard'
        to='nurse@example.com'
        xml:lang='en'>
      <show>dnd</show>
      <status>courting Juliet</status>
      <priority>0</priority>
    </presence>
      ]]></artwork>
    </figure>
    <t>Now the user engages in a chat session with one of his contacts.</t>
    <figure>
      <preamble>Example 9: A threaded conversation</preamble>
      <artwork><![CDATA[
CC: <message
        from='juliet@example.com/balcony'
        to='romeo@example.net'
        type='chat'
        xml:lang='en'>
      <body>My ears have not yet drunk a hundred words</body>
      <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>
    </message>

CC: <message
        from='juliet@example.com/balcony'
        to='romeo@example.net'
        type='chat'
        xml:lang='en'>
      <body>Of that tongue's utterance, yet I know the sound:</body>
      <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>
    </message>

CC: <message
        from='juliet@example.com/balcony'
        to='romeo@example.net'
        type='chat'
        xml:lang='en'>
      <body>Art thou not Romeo, and a Montague?</body>
      <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>
    </message>

UC: <message
        from='romeo@example.net/orchard'
        to='juliet@example.com/balcony'
        type='chat'
        xml:lang='en'>
      <body>Neither, fair saint, if either thee dislike.</body>
      <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>
    </message>

CC: <message
        from='juliet@example.com/balcony'
        to='romeo@example.net/orchard'
        type='chat'
        xml:lang='en'>
      <body>How cam'st thou hither, tell me, and wherefore?</body>
      <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>
    </message>
      ]]></artwork>
    </figure>
    <t>And so on.</t>
    <t>The user can also send subsequent presence broadcast.</t>
    <figure>
      <preamble>Example 10: User sends updated available presence for broadcasting:</preamble>
      <artwork><![CDATA[
UC: <presence xml:lang='en'>
      <show>away</show>
      <status>I shall return!</status>
      <priority>1</priority>
    </presence>
      ]]></artwork>
    </figure>
    <figure>
      <preamble>Example 11: User's server broadcasts updated presence only to one contact:</preamble>
      <artwork><![CDATA[
US: <presence
        from='romeo@example.net/orchard'
        to='juliet@example.com'
        xml:lang='en'>
      <show>away</show>
      <status>I shall return!</status>
      <priority>1</priority>
    </presence>
      ]]></artwork>
    </figure>
    <figure>
      <preamble>Example 12: Contact's server delivers updated presence to all of the contact's available resources ("balcony" and "chamber"):</preamble>
      <artwork><![CDATA[
CS: <presence
        from='romeo@example.net/orchard'
        to='juliet@example.com'
        xml:lang='en'>
      <show>away</show>
      <status>I shall return!</status>
      <priority>1</priority>
    </presence>

CS: <presence
        from='romeo@example.net/orchard'
        to='juliet@example.com'
        xml:lang='en'>
      <show>away</show>
      <status>I shall return!</status>
      <priority>1</priority>
    </presence>
      ]]></artwork>
    </figure>
    <figure>
      <preamble>Example 13: One of the contact's resources broadcasts unavailable presence:</preamble>
      <artwork><![CDATA[
CC: <presence from='juliet@example.com/chamber' type='unavailable'/>
      ]]></artwork>
    </figure>
    <figure>
      <preamble>Example 14: Contact's server sends unavailable presence to user:</preamble>
      <artwork><![CDATA[
CS: <presence
        from='juliet@example.com/chamber'
        to='romeo@example.net'
        type='unavailable'/>
      ]]></artwork>
    </figure>
    <t>Now the user ends his presence session.</t>
    <figure>
      <preamble>Example 15: User sends unavailable presence:</preamble>
      <artwork><![CDATA[
UC: <presence from='romeo@example.net/orchard'
              type='unavailable'
              xml:lang='en'>
      <status>gone home</status>
    </presence>
      ]]></artwork>
    </figure>
    <figure>
      <preamble>Example 16: User's server broadcasts unavailable presence to contacts as well as to the person to whom the user sent directed presence:</preamble>
      <artwork><![CDATA[
US: <presence
        from='romeo@example.net/orchard'
        to='juliet@example.com'
        type='unavailable'
        xml:lang='en'>
      <status>gone home</status>
    </presence>

US: <presence
        from='romeo@example.net/orchard'
        to='nurse@example.com'
        type='unavailable'
        xml:lang='en'>
      <status>gone home</status>
    </presence>
      ]]></artwork>
    </figure>
    <t>Finally the user closes his stream and the server responds in kind.</t>
    <figure>
      <preamble>Example 17: User closes stream:</preamble>
      <artwork><![CDATA[
UC: </stream:stream>
      ]]></artwork>
    </figure>
    <figure>
      <preamble>Example 18: User's server closes stream:</preamble>
      <artwork><![CDATA[
US: </stream:stream>
      ]]></artwork>
    </figure>
    <t>THE END</t>
  </section>

  <section title="Server Rules for Processing XML Stanzas" anchor="rules">
    <t>Basic server rules for processing XML stanzas are defined in <xref target="xmpp-core"/>.  This section defines supplementary rules for XMPP instant messaging and presence servers; in the absence of a supplementary rule defined below (e.g., for stanzas without a 'to' address), the rule defined in <xref target='xmpp-core'/> applies.</t>
    <section title="No Such User" anchor="rules-nosuchuser">
      <t>If the user account identified by the 'to' attribute does not exist, how the stanza is processed depends on the stanza type.</t>
      <t>
        <list style='symbols'>
          <t>For an IQ stanza, the server MUST return a &lt;service-unavailable/&gt; stanza error to the sender.</t>
          <t>For a message stanza, the server MUST return a &lt;service-unavailable/&gt; stanza error to the sender.</t>
          <t>For a presence stanza with no 'type' attribute or a 'type' attribute of "unavailable", the server MUST silently ignore the stanza.</t>
          <t>For a presence stanza of type "subscribe", the server MUST return a presence stanza of type "unsubscribed".</t>
          <t>For a presence stanza of type "subscribed", "unsubscribe", or "unsubscribed", the server MUST silently ignroe the stanza.</t>
        </list>
      </t>
    </section>
    <section title="Full JID at Local Domain" anchor="rules-fulljid">
      <t>If the hostname of the domain identifier portion of the JID contained in the 'to' attribute of an inbound stanza matches one of the configured hostnames of the server itself and the JID contained in the 'to' attribute is of the form &lt;user@domain/resource&gt;, then the server MUST adhere to the following rules (subject to enforcement of relevant privacy and security policies, such as those deployed by means of <xref target='XEP-0016'/> or <xref target='XEP-0191'/>).</t>
      <section title="Resource Matches" anchor="rules-fulljid-match">
        <t>If an available or connected resource exactly matches the full JID, how the stanza is processed depends on the stanza type.</t>
        <t>
          <list style='symbols'>
            <t>For an IQ stanzas of type "get" or "set", if the intended recipient does not share presence with the requesting entity either by means of a presence subscription of type "both" or "from" or by means of directed presence, then the server SHOULD NOT deliver the IQ stanza but instead SHOULD return a &lt;service-unavailable/&gt; stanza error to the requesting entity.  This policy helps to prevent presence leaks (see <xref target='security'/>).</t>
            <t>For a message stanza, the server MUST deliver the stanza to the resource.</t>
            <t>For a presence stanza with no 'type' attribute or a 'type' attribute of "unavailable", the server MUST deliver the stanza to the resource.</t>
            <t>For a presence stanza of type "subscribe", the server MUST follow the guidelines provided under <xref target='sub-request-inbound'/>.</t>
            <t>For a presence stanza of type "subscribe", "subscribed", "unsubscribe", or "unsubscribed", the server MUST follow the guidelines provided under <xref target='sub'/>.</t>
          </list>
        </t>
      </section>
      <section title="No Resource Matches" anchor="rules-fulljid-nomatch">
        <t>If no connected or available resource exactly matches the full JID, how the stanza is processed depends on the stanza type.</t>
        <t>
          <list style='symbols'>
            <t>For an IQ stanza, the server MUST return a &lt;service-unavailable/&gt; stanza error to the sender.</t>
            <t>For a message stanza of type "chat", "headline", or "normal", the server SHOULD treat the stanza as if it were addressed to &lt;user@domain&gt; as described in the next section (but without modifying the value of the 'to' attribute).</t>
            <t>For a message stanza of type "error", the server MUST silently ignore the stanza.</t>
            <t>For a message stanza of type "groupchat", the server MUST return a stanza error to the sender, which SHOULD be &lt;service-unavailable/&gt;.</t>
            <t>For a presence stanza with no 'type' attribute or a 'type' attribute of "unavailable", the server MUST silently ignore the stanza.</t>
            <t>For a presence stanza of type "subscribe", the server MUST follow the guidelines provided under <xref target='sub-request-inbound'/>.</t>
            <t>For a presence stanza of type "subscribed", "unsubscribe", or "unsubscribed", the server MUST ignore the stanza.</t>
          </list>
        </t>
      </section>
    </section>
    <section title="Bare JID at Local Domain" anchor="rules-barejid">
      <t>If the hostname of the domain identifier portion of the JID contained in the 'to' attribute of an inbound stanza matches one of the configured hostnames of the server itself and the JID contained in the 'to' attribute is of the form &lt;user@domain&gt;, then the server MUST adhere to the following rules.</t>
      <section title="Available or Connected Resources" anchor="rules-barejid-resource">
        <t>If there is at least one available or connected resource, how the stanza is processed depends on the stanza type.</t>
        <section title="Message" anchor="rules-barejid-resource-message">
          <t>For a message stanza of type "headline", the server SHOULD deliver the stanza to all available resources.</t>
          <t>For a message stanza of type "chat" or "normal", the server SHOULD deliver the stanza to the highest-priority available resource. If there is not one highest-priority available resource but instead the highest priority is asserted by two or more available resources, these resources are said to form a "delivery tie".  In the case of a delivery tie, a server SHOULD deliver the message to all of the tied resources.  However, before delivering the message, a server MAY remove one or more resources from the tie.  Methods for doing so are outside the scope of this specification, but could include factors such as the resource's time of connection, time of last network or application activity, availability as determined by some hierarchy of &lt;show/&gt; values, or user-configured rules.  Nevertheless, a server MUST NOT remove all resources from the tie, and MUST deliver the message to at least one of the highest-priority resources (subject to appropriate security policies as described under <xref target='security'/> and in <xref target='xmpp-core'/>).</t>
          <t>For a message stanza of type "groupchat", the server MUST NOT deliver the stanza to any of the available resources but instead MUST return a stanza error to the sender, which SHOULD be &lt;service-unavailable/&gt;.</t>
          <t>For a message stanza of type "error", the server MUST silently discard the message (i.e., neither deliver it to the intended recipient nor return a stanza error to the sender).</t>
          <t>However, for any message type the server MUST NOT deliver the stanza to any available resource with a negative priority; if the only available resource has a negative priority, the server SHOULD handle the message as if there were no available or connected resources as described under <xref target='rules-barejid-noresource'/>.</t>
          <t>In all cases, the server MUST NOT rewrite the 'to' attribute (i.e., it MUST leave it as &lt;user@domain&gt; rather than change it to &lt;user@domain/resource&gt;).</t>
        </section>
        <section title="Presence" anchor="rules-barejid-resource-pres">
          <t>For a presence stanza of type "probe", the server MUST handle it directly as described under <xref target='presence-probe'/>.</t>
          <t>For a presence stanza with no type or of type "unavailable", the server MUST deliver the stanza to all available resources.</t>
          <t>For a presence stanza of type "subscribe", "subscribed", "unsubscribe", or "unsubscribed", the server MUST adhere to the rules defined under <xref target='sub'/> and summarized under <xref target='substates'/>.</t>
          <t>In all cases, the server MUST NOT rewrite the 'to' attribute (i.e., it MUST leave it as &lt;user@domain&gt; rather than change it to &lt;user@domain/resource&gt;).</t>
        </section>
        <section title="IQ" anchor="rules-barejid-resource-iq">
          <t>For an IQ stanza, the server itself MUST reply on behalf of the user with either an IQ result or an IQ error, and MUST NOT deliver the IQ stanza to any of the user's available resources.  Specifically, if the semantics of the qualifying namespace define a reply that the server can provide on behalf of the user, then the server MUST reply to the stanza on behalf of the user by returning either an IQ stanza of type "result" or an IQ stanza of type "error" that is appropriate to the original payload; if not, then the server MUST reply with a &lt;service-unavailable/&gt; stanza error.</t>
        </section>
      </section>
      <section title="No Available or Connected Resources" anchor="rules-barejid-noresource">
        <t>If there are no available or connected resources associated with the user, how the stanza is processed depends on the stanza type.</t>
        <section title="Message" anchor="rules-barejid-noresource-message">
          <t><iref item='Offline Message Storage'/>In order to properly handle message stanzas, it is strongly RECOMMENDED for an implementation to support OFFLINE STORAGE, i.e., the server SHOULD store the message stanza on behalf of the user and deliver it when the user next becomes available.  For recommendations regarding offline message storage refer to <xref target='XEP-0160'/>.</t>
          <t>For a message stanza of type "chat" or "normal", the server SHOULD add the message to offline storage or forward the message to the user via a non-XMPP messaging system (e.g., to the user's email account).  However, if offline message storage or message forwarding is not enabled or available (e.g., because a size limit has been reached on offline messages), then the server MUST return a &lt;service-unavailable/&gt; stanza error to the sender.</t>
          <t>For a message stanza of type "headline", according to local service policies the server MUST either (1) add the message to offline storage or (2) silently discard the message (i.e., neither deliver it to the intended recipient nor return an error to the sender).</t>
          <t>For a message stanza of type "groupchat", the server SHOULD NOT add the message to offline storage but instead SHOULD return an error to the sender.</t>
          <t>For a message stanza of type "error", the server MUST NOT add the message to offline storage but instead SHOULD silently discard the message (i.e., neither deliver it to the intended recipient nor return an error to the sender).</t>
        </section>
        <section title="Presence" anchor="rules-barejid-noresource-pres">
          <t>For a presence stanza with no type or of type "unavailable" or "probe", the server SHOULD silently ignore the stanza by not storing it for later delivery and not replying to it on behalf of the user.</t>
          <t>For a presence stanza of type "subscribe", "subscribed", "unsubscribe", or "unsubscribed", the server MUST adhere to the rules defined under <xref target='sub'/> and summarized under <xref target='substates'/>.</t>
        </section>
        <section title="IQ" anchor="rules-barejid-noresource-iq">
          <t>For an IQ stanza, the server itself MUST reply on behalf of the user with either an IQ result or an IQ error.  Specifically, if the semantics of the qualifying namespace define a reply that the server can provide on behalf of the user, then the server MUST reply to the stanza on behalf of the user by returning either an IQ stanza of type "result" or an IQ stanza of type "error" that is appropriate to the original payload; if not, then the server MUST reply with a &lt;service-unavailable/&gt; stanza error.</t>
        </section>
      </section>
    </section>
    <section title="Remote Domain" anchor="rules-remote">
      <t>If the hostname of the domain identifier portion of the address contained in the 'to' attribute of an outbound stanza does not match a configured hostname of the server itself, then the server MUST attempt to route the stanza to the remote domain.  If there exists an active stream between the two peers, then the server MUST route the stanza over that stream for processing by the peer server.  If not, then the server MUST do the following.</t>
      <t>First, resolve the hostname of the remote domain (or use a cached resolution of the remote domain to an IP address).  The RECOMMENDED order of attempted resolutions is as follows:</t>
      <t><list style='numbers'>
        <t>Attempt to resolve the remote hostname using a DNS service location record <xref target="SRV"/> Service of "xmpp-server" and a Proto of "tcp", resulting in resource records such as "_xmpp-server._tcp.example.com.", as specified in <xref target="xmpp-core"/>.</t>
        <t>If the "xmpp-server" address record resolution fails, attempt to resolve the "_im" or "_pres" SRV Service as specified in <xref target="IMP-SRV"/>, using the "_im" Service for &lt;message/&gt; stanzas and the "_pres" Service for &lt;presence/&gt; stanzas (it is up to the implementation how to handle &lt;iq/&gt; stanzas).  This will result in one or more resolutions of the form "_im.&lt;proto&gt;.example.com." or "_pres.&lt;proto&gt;.example.com.", where "&lt;proto&gt;" would be a label registered in the Instant Messaging SRV Protocol Label registry or the Presence SRV Protocol Label registry: either "_xmpp" for an XMPP-aware domain or some other IANA-registered label (e.g., "_simple") for a non-XMPP-aware domain.</t>
        <t>If both SRV address record resolutions fail, attempt to perform a normal IPv4/IPv6 address record resolution to determine the IP address using the "xmpp-server" port of 5269 registered with the IANA, as specified in <xref target="xmpp-core"/>.</t>
      </list></t>
      <t>If the server cannot resolve the remote domain, it MUST return a &lt;remote-server-not-found/&gt; stanza error.</t>
      <t>Second, negotiate XML streams with the remote domain by following the process defined in <xref target='xmpp-core'/>.  If the server can resolve the remote domain but cannot establish streams with the XMPP service at that domain, it MUST return a &lt;remote-server-timeout/&gt; stanza error.</t>
      <t>Third, route the stanza to the remote domain for processing by the peer server.</t>
      <t><list style='empty'><t>Note: Administrators of server deployments are strongly encouraged to keep the _im._xmpp, _pres._xmpp, and _xmpp._tcp SRV records properly synchronized, since different implementations might perform the "_im" and "_pres" lookups before the "xmpp-server" lookup.</t></list></t>
    </section>
  </section>

  <section title="IM and Presence Compliance Requirements" anchor="compliance">
    <t>This section summarizes the specific aspects of the Extensible Messaging and Presence Protocol that MUST be supported by instant messaging and presence servers and clients in order to be considered compliant implementations.  All such applications MUST comply with the requirements specified in <xref target="xmpp-core"/>.  The text in this section specifies additional compliance requirements for instant messaging and presence servers and clients (the requirements described here supplement but do not supersede the core requirements).</t>
    <t><list style='empty'><t>Note: A server or client MAY support only presence or instant messaging; therefore is not necessary to support both if only a presence service or an instant messaging service is desired.</t></list></t>
    <section title="Servers" anchor="compliance-server">
      <t>In addition to the core server compliance requirements, an instant messaging and presence server MUST additionally support all server-related instant messaging and presence syntax and semantics defined in this document, including:</t>
      <t>
        <list style='symbols'>
          <t>Presence broadcast on behalf of clients as specified under <xref target='presence'/></t>
          <t>Presence subscriptions as specified under <xref target='sub'/></t>
          <t>Roster storage and management as specified under <xref target='roster'/></t>
          <t>IM-specific routing and delivery rules as specified under <xref target='rules'/></t>
        </list>
      </t>
    </section>
    <section title="Clients" anchor="compliance-client">
      <t>In addition to the core client compliance requirements, an instant messaging and presence client MUST additionally support the following protocols:</t>
      <t>
        <list style='symbols'>
          <t>Generation and processing of the IM-specific semantics of XML stanzas as defined by the XML schemas, including the 'type' attribute of message and presence stanzas as well as their child elements (see <xref target='message'/> and <xref target='presence'/>)</t>
          <t>All client-related instant messaging syntax and semantics defined in this document, including presence subscriptions and roster management (see <xref target='sub'/> and <xref target='roster'/>)</t>
        </list>
      </t>
      <t>A client MUST also handle addresses that are encoded as "im:" URIs as specified in <xref target="CPIM"/> and "pres:" URIs as specified in <xref target='CPP'/>, although it MAY do so by removing the "im:" or "pres:" scheme and entrusting address resolution to the server as specified under <xref target="rules-remote"/>.  A client SHOULD also handle addresses that are encoded as "xmpp:" URIs and IRIs as specified in <xref target='XMPP-URI'/>, although here again it MAY do so by removing the scheme and entrusting address resolution to the server.</t>
    </section>
  </section>

  <section title="Internationalization Considerations" anchor="i18n">
    <t>For internationalization considerations, refer to the relevant section of <xref target="xmpp-core"/>.</t>
  </section>

  <section title="Security Considerations" anchor="security">
    <t>Core security considerations for XMPP are defined in the relevant section of <xref target="xmpp-core"/>.</t>
    <t>Additional considerations that apply only to instant messaging and presence applications of XMPP are defined in several places within this document; specifically:</t>
    <t><list style="symbols">
      <t>When a server processes an inbound presence stanza of type "probe" whose intended recipient is a user associated with one of the server's hostnames, the server MUST NOT reveal the user's presence if the sender is an entity that is not authorized to receive that information as determined by presence subscriptions (see <xref target="presence"/>).</t>
      <t>A user's server MUST NOT leak the user's network availability to entities who are not authorized to know the user's presence, either via an explicit subscription as described herein or via an existing trust relationship (such as presence-enabled user directories within organizations).</t>
      <t>When a server processes an outbound presence stanza with no type or of type "unavailable", it MUST follow the rules defined under <xref target="presence"/> in order to ensure that such presence information is not sent to entities that are not authorized to know such information.</t>
      <t>When a server generates an error stanza in response to receiving a stanza for a user account that does not exist, the use of the &lt;service-unavailable/&gt; stanza error condition can help protect against dictionary attacks, since this is the same error condition that is returned if, for instance, the namespace of an IQ child element is not understood, or if offline message storage or message forwarding is not enabled for a domain.  However, subtle differences in the exact XML of error stanzas, as well as in the timing with which such errors are returned, can enable an attacker to determine the network presence of a user when more advanced blocking technologies are not used (see for instance <xref target='XEP-0016'/> and <xref target='XEP-0191'/>).</t>
      <t>A client MAY ignore the &lt;status/&gt; element when contained in a presence stanza of type "subscribe", "unsubscribe", "subscribed", or "unsubscribed"; this can help prevent "presence subscription spam".</t>
    </list></t>
  </section>

  <section title="IANA Considerations" anchor="ref">
    <t>The following sections update the registrations provided in <xref target='RFC3921'/>.</t>
    <t>For a number of related IANA considerations, refer to the relevant section of <xref target="xmpp-core"/>.</t>
    <section title="Instant Messaging SRV Protocol Label Registration" anchor="iana-reg-im">
      <t><xref target="IMP-SRV">Address Resolution for Instant Messaging and Presence</xref> defines an Instant Messaging SRV Protocol Label registry for protocols that can provide services that conform to the "_im" SRV Service label.  Because XMPP is one such protocol, the IANA registers the "_xmpp" protocol label in the appropriate registry, as follows:</t>
      <t><list style='hanging'>
        <t hangText='Protocol label:'>_xmpp</t>
        <t hangText='Specification:'>&rfc.number;</t>
        <t hangText='Description:'>Instant messaging protocol label for the Extensible Messaging and Presence Protocol (XMPP) as defined by &rfc.number;.</t>
        <t hangText='Registrant Contact:'>IETF, XMPP Working Group, &lt;xmppwg@xmpp.org&gt;</t>
      </list></t>
    </section>
    <section title="Presence SRV Protocol Label Registration" anchor="iana-reg-pres">
      <t><xref target="IMP-SRV">Address Resolution for Instant Messaging and Presence</xref> defines a Presence SRV Protocol Label registry for protocols that can provide services that conform to the "_pres" SRV Service label.  Because XMPP is one such protocol, the IANA registers the "_xmpp" protocol label in the appropriate registry, as follows:</t>
      <t><list style='hanging'>
        <t hangText='Protocol label:'>_xmpp</t>
        <t hangText='Specification:'>&rfc.number;</t>
        <t hangText='Description:'>Presence protocol label for the Extensible Messaging and Presence Protocol (XMPP) as defined by &rfc.number;.</t>
        <t hangText='Registrant Contact:'>IETF, XMPP Working Group, &lt;xmppwg@xmpp.org&gt;</t>
      </list></t>
    </section>
  </section>

  </middle>

  <back>

    <references title="Normative References">

<reference anchor="IMP-SRV">
<front>
<title>Address Resolution for Instant Messaging and Presence</title>
<author initials='J.' surname='Peterson' fullname='J. Peterson'>
<organization /></author>
<date year='2004' month='August' /></front>
<seriesInfo name='RFC' value='3861' />
<format type='TXT' octets='15764' target='ftp://ftp.isi.edu/in-notes/rfc3861.txt' />
</reference>

<reference anchor="xmpp-core">
<front>
<title>Extensible Messaging and Presence Protocol (XMPP): Core</title>
<author initials='P' surname='Saint-Andre' fullname='Peter Saint-Andre'>
    <organization />
</author>
<date month='June' day='1' year='2009' />
<abstract><t>This document defines the core features of the Extensible Messaging and Presence Protocol (XMPP), a technology for streaming Extensible Markup Language (XML) elements in order to exchange structured information in close to real time between any two or more network- aware entities. XMPP provides a generalized, extensible framework for incrementally exchanging XML data, upon which a variety of applications can be built. The framework includes methods for stream setup and teardown, channel encryption, authentication of a client to a server and of one server to another server, and primitives for push-style messages, publication of network availability information ("presence"), and request-response interactions between any two XMPP entities. This document also specifies the format for XMPP addresses, which are fully internationalizable. This document obsoletes RFC 3920.</t></abstract>
</front>
<seriesInfo name='Internet-Draft' value='draft-ietf-xmpp-core-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-xmpp-core-00.txt' />
</reference>

<reference anchor='SRV'>
<front>
<title abbrev='DNS SRV RR'>A DNS RR for specifying the location of services (DNS SRV)</title>
<author initials='A.' surname='Gulbrandsen' fullname='Arnt Gulbrandsen'>
<organization>Troll Tech</organization>
<address>
<postal>
<street>Waldemar Thranes gate 98B</street>
<city>Oslo</city>
<region />
<code>N-0175</code>
<country>NO</country></postal>
<phone>+47 22 806390</phone>
<facsimile>+47 22 806380</facsimile>
<email>arnt@troll.no</email></address></author>
<author initials='P.' surname='Vixie' fullname='Paul Vixie'>
<organization>Internet Software Consortium</organization>
<address>
<postal>
<street>950 Charter Street</street>
<city>Redwood City</city>
<region>CA</region>
<code>94063</code>
<country>US</country></postal>
<phone>+1 650 779 7001</phone></address></author>
<author initials='L.' surname='Esibov' fullname='Levon Esibov'>
<organization>Microsoft Corporation</organization>
<address>
<postal>
<street>One Microsoft Way</street>
<city>Redmond</city>
<region>WA</region>
<code>98052</code>
<country>US</country></postal>
<email>levone@microsoft.com</email></address></author>
<date month='February' year='2000' />
<abstract>
<t>This document describes a DNS RR which specifies the location of the
   server(s) for a specific protocol and domain.</t></abstract></front>
<seriesInfo name='RFC' value='2782' />
<format type='TXT' octets='24013' target='ftp://ftp.isi.edu/in-notes/rfc2782.txt' />
</reference>

<reference anchor="TERMS">
<front>
<title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='Scott Bradner'>
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass.  Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>
<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date month='March' year='1997' />
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL
      NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;,  &quot;MAY&quot;, and
      &quot;OPTIONAL&quot; in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>
<seriesInfo name='BCP' value='14' />
<seriesInfo name='RFC' value='2119' />
<format type='TXT' octets='4723' target='ftp://ftp.isi.edu/in-notes/rfc2119.txt' />
<format type='HTML' octets='14486' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
<format type='XML' octets='5661' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
</reference>

<reference anchor='UUID'>
<front>
<title abbrev='UUID URN'>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='Paul J. Leach'>
<organization>Microsoft</organization>
<address>
<postal>
<street>1 Microsoft Way</street>
<city>Redmond</city>
<region>WA</region>
<code>98052</code>
<country>US</country></postal>
<phone>+1 425-882-8080</phone>
<email>paulle@microsoft.com</email></address></author>
<author initials='M.' surname='Mealling' fullname='Michael Mealling'>
<organization>Refactored Networks, LLC</organization>
<address>
<postal>
<street>1635 Old Hwy 41</street>
<street>Suite 112, Box 138</street>
<city>Kennesaw</city>
<region>GA</region>
<code>30152</code>
<country>US</country></postal>
<phone>+1-678-581-9656</phone>
<email>michael@refactored-networks.com</email>
<uri>http://www.refactored-networks.com</uri></address></author>
<author initials='R.' surname='Salz' fullname='Rich Salz'>
<organization>DataPower Technology, Inc.</organization>
<address>
<postal>
<street>1 Alewife Center</street>
<city>Cambridge</city>
<region>MA</region>
<code>02142</code>
<country>US</country></postal>
<phone>+1 617-864-0455</phone>
<email>rsalz@datapower.com</email>
<uri>http://www.datapower.com</uri></address></author>
<date year='2005' month='July' />
<keyword>URN, UUID</keyword>
<abstract>
<t>This specification defines a Uniform Resource Name namespace for
      UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally
      Unique IDentifier). A UUID is 128 bits long, and can
      guarantee uniqueness across space and time. UUIDs were originally
      used in the Apollo Network Computing System and later in the Open
      Software Foundation's (OSF) Distributed Computing Environment (DCE),
      and then in Microsoft Windows platforms.</t>
<t>This specification is derived from the DCE specification with the
      kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been	
      incorporated into this document.</t></abstract></front>
<seriesInfo name='RFC' value='4122' />
<format type='TXT' octets='59319' target='ftp://ftp.isi.edu/in-notes/rfc4122.txt' />
<format type='HTML' octets='81761' target='http://xml.resource.org/public/rfc/html/rfc4122.html' />
<format type='XML' octets='62848' target='http://xml.resource.org/public/rfc/xml/rfc4122.xml' />
</reference>

<reference anchor='XML' target='http://www.w3.org/TR/2006/REC-xml-20060816'>
<front>
<title>Extensible Markup Language (XML) 1.0 (Fourth Edition)</title>
<author initials='J.' surname='Paoli' fullname='Jean Paoli'>
    <organization />
</author>
<author initials='E.' surname='Maler' fullname='Eve Maler'>
    <organization />
</author>
<author initials='C.' surname='Sperberg-McQueen' fullname='C. M. Sperberg-McQueen'>
    <organization />
</author>
<author initials='F.' surname='Yergeau' fullname='François Yergeau'>
    <organization />
</author>
<author initials='T.' surname='Bray' fullname='Tim Bray'>
    <organization />
</author>
<date month='August' day='16' year='2006' />
</front>
<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-xml-20060816' />
<format type='HTML' target='http://www.w3.org/TR/2006/REC-xml-20060816' />
</reference>

<reference anchor="XML-NAMES" target="http://www.w3.org/TR/REC-xml-names">
  <front>
    <title>Namespaces in XML</title>
    <author initials="T." surname="Bray" fullname="Tim Bray">
      <organization>Textuality</organization>
      <address>
        <email>tbray@textuality.com</email>
      </address>
    </author>
    <author initials="D." surname="Hollander" fullname="Dave Hollander">
      <organization>Hewlett-Packard Company</organization>
      <address>
        <email>dmh@corp.hp.com</email>
      </address>
    </author>
    <author initials="A." surname="Layman" fullname="Andrew Layman">
      <organization>Microsoft</organization>
      <address>
        <email>andrewl@microsoft.com</email>
      </address>
    </author>
    <date day="14" month="January" year="1999"/>
  </front>
  <seriesInfo name="W3C" value="REC-xml-names"/>
</reference>

<reference anchor='XMPP-URI'>
<front>
<title>Internationalized Resource Identifiers (IRIs) and Uniform Resource Identifiers (URIs) for the Extensible Messaging and Presence Protocol (XMPP)</title>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'>
<organization /></author>
<date year='2008' month='February' />
<abstract>
<t>This document defines the use of Internationalized Resource Identifiers (IRIs) and Uniform Resource Identifiers (URIs) in identifying or interacting with entities that can communicate via the Extensible Messaging and Presence Protocol (XMPP). [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5122' />
<format type='TXT' octets='55566' target='ftp://ftp.isi.edu/in-notes/rfc5122.txt' />
</reference>

    </references>

    <references title="Informative References">

<reference anchor="CPIM">
<front>
<title>Common Profile for Instant Messaging (CPIM)</title>
<author initials='J.' surname='Peterson' fullname='J. Peterson'>
<organization /></author>
<date year='2004' month='August' /></front>
<seriesInfo name='RFC' value='3860' />
<format type='TXT' octets='26486' target='ftp://ftp.isi.edu/in-notes/rfc3860.txt' />
</reference>

<reference anchor='CPP'>
<front>
<title>Common Profile for Presence (CPP)</title>
<author initials='J.' surname='Peterson' fullname='J. Peterson'>
<organization /></author>
<date year='2004' month='August' />
<abstract>
<t>At the time this document was written, numerous presence protocols were in use (largely as components of commercial instant messaging services), and little interoperability between services based on these protocols has been achieved. This specification defines common semantics and data formats for presence to facilitate the creation of gateways between presence services. [STANDARDS TRACK] </t></abstract></front>
<seriesInfo name='RFC' value='3859' />
<format type='TXT' octets='30537' target='ftp://ftp.isi.edu/in-notes/rfc3859.txt' />
</reference>

<reference anchor="IMP-MODEL">
<front>
<title>A Model for Presence and Instant Messaging</title>
<author initials='M.' surname='Day' fullname='Mark Day'>
<organization>SightPath, Inc.</organization>
<address>
<postal>
<street>135 Beaver Street</street>
<city>Waltham</city>
<region>MA</region>
<code>02452</code>
<country>US</country></postal>
<email>mday@alum.mit.edu</email></address></author>
<author initials='J.' surname='Rosenberg' fullname='Jonathan Rosenberg'>
<organization>dynamicsoft</organization>
<address>
<postal>
<street>200 Executive Drive</street>
<street>Suite 120</street>
<city>West Orange</city>
<region>NJ</region>
<code>07046</code>
<country>US</country></postal>
<email>jdrosen@dynamicsoft.com</email></address></author>
<author initials='H.' surname='Sugano' fullname='Hiroyasu Sugano'>
<organization>Fujitsu Laboratories Ltd.</organization>
<address>
<postal>
<street>64 Nishiwaki</street>
<street>Ohkubo-cho</street>
<city>Akashi</city>
<region />
<code>674-8555</code>
<country>JP</country></postal>
<email>suga@flab.fujitsu.co.jp</email></address></author>
<date month='February' year='2000' />
<abstract>
<t>This document defines an abstract model for a presence and instant messaging system.  It defines the various entities involved, defines terminology, and outlines the services provided by the system.  The goal is to provide a common vocabulary for further work on requirements for protocols and markup for presence and instant messaging.</t></abstract></front>
<seriesInfo name='RFC' value='2778' />
</reference>

<reference anchor="IMP-REQS">
<front>
<title abbrev='Instant Messaging/Presence Protocol'>Instant Messaging / Presence Protocol Requirements</title>
<author initials='M.' surname='Day' fullname='Mark Day'>
<organization>SightPath, Inc.</organization>
<address>
<postal>
<street>135 Beaver Street</street>
<city>Waltham</city>
<region>MA</region>
<code>02452</code>
<country>US</country></postal>
<email>mday@alum.mit.edu</email></address></author>
<author initials='S.' surname='Aggarwal' fullname='Sonu Aggarwal'>
<organization>Microsoft Corporation</organization>
<address>
<postal>
<street>One Microsoft Way</street>
<city>Redmond</city>
<region>WA</region>
<code>98052</code>
<country>US</country></postal>
<email>sonuag@microsoft.com</email></address></author>
<author initials='J.' surname='Vincent' fullname='Jesse Vincent'>
<organization>Into Networks, Inc.</organization>
<address>
<postal>
<street>150 Cambridgepark Drive</street>
<city>Cambridge</city>
<region>MA</region>
<code>02140</code>
<country>US</country></postal>
<email>jesse@intonet.com</email></address></author>
<date month='February' year='2000' />
<abstract>
<t>Presence and Instant Messaging have recently emerged as a new medium of communications over the Internet.  Presence is a means for finding, retrieving, and subscribing to changes in the presence information (e.g.  "online" or "offline") of other users.  Instant messaging is a means for sending small, simple messages that are delivered immediately to online users.</t>
<t>Applications of presence and instant messaging currently use independent, non-standard and non-interoperable protocols developed by various vendors.  The goal of the Instant Messaging and Presence Protocol (IMPP) Working Group is to define a standard protocol so that independently developed applications of instant messaging and/or   presence can interoperate across the Internet.  This document defines a minimal set of requirements that IMPP must meet.</t></abstract></front>
<seriesInfo name='RFC' value='2779' />
<format type='TXT' octets='47420' target='ftp://ftp.isi.edu/in-notes/rfc2779.txt' />
</reference>

<reference anchor='IRC'>
<front>
<title>Internet Relay Chat: Architecture</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'>
<organization /></author>
<date year='2000' month='April' />
<abstract>
<t>&lt;p>This document is an update describing the architecture of the current IRC protocol and the role of its different components. Other documents describe in detail the protocol used between the various components defined here. This memo provides information for the Internet community. &lt;/p></t></abstract></front>
<seriesInfo name='RFC' value='2810' />
<format type='TXT' octets='19087' target='ftp://ftp.isi.edu/in-notes/rfc2810.txt' />
</reference>

<reference anchor='IRI'>
<front>
<title>Internationalized Resource Identifiers (IRIs)</title>
<author initials='M.' surname='Duerst' fullname='M. Duerst'>
<organization /></author>
<author initials='M.' surname='Suignard' fullname='M. Suignard'>
<organization /></author>
<date year='2005' month='January' />
<abstract>
<t>&lt;p>This document defines a new protocol element, the Internationalized Resource Identifier (IRI), as a complement of the Uniform Resource Identifier (URI). An IRI is a sequence of characters from the Universal Character Set (Unicode/ISO 10646). A mapping from IRIs to URIs is defined, which means that IRIs can be used instead of URIs, where appropriate, to identify resources.&lt;/p>&lt;p> The approach of defining a new protocol element was chosen instead of extending or changing the definition of URIs. This was done in order to allow a clear distinction and to avoid incompatibilities with existing software. Guidelines are provided for the use and deployment of IRIs in various protocols, formats, and software components that currently deal with URIs.&lt;/p></t></abstract></front>
<seriesInfo name='RFC' value='3987' />
<format type='TXT' octets='111190' target='ftp://ftp.isi.edu/in-notes/rfc3987.txt' />
</reference>

<reference anchor="RFC3921">
  <front>
    <title>Extensible Messaging and Presence Protocol (XMPP): Instant Messaging and Presence</title>
    <author initials='P.' surname='Saint-Andre' fullname='P.  Saint-Andre'>
      <organization>XMPP Standards Foundation</organization>
    </author>
    <date year='2004' month='October' />
  </front>
  <seriesInfo name='RFC' value='3921' />
  <format type='TXT' octets='217527' target='ftp://ftp.isi.edu/in-notes/rfc3921.txt' />
</reference>

<reference anchor="SASL">
<front>
<title>Simple Authentication and Security Layer (SASL)</title>
<author initials='A.' surname='Melnikov' fullname='A. Melnikov'>
<organization /></author>
<author initials='K.' surname='Zeilenga' fullname='K. Zeilenga'>
<organization /></author>
<date year='2006' month='June' />
<abstract>
<t>&lt;p>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms. It provides a structured interface between protocols and mechanisms. The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms. The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.&lt;/p>&lt;p> This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection. In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.&lt;/p>&lt;p> This document obsoletes RFC 2222. [STANDARDS TRACK]&lt;/p></t></abstract></front>
<seriesInfo name='RFC' value='4422' />
<format type='TXT' octets='73206' target='ftp://ftp.isi.edu/in-notes/rfc4422.txt' />
</reference>

<reference anchor='TLS'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'>
<organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'>
<organization /></author>
<date year='2008' month='August' />
<abstract>
<t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery. [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5246' />
<format type='TXT' octets='222395' target='ftp://ftp.isi.edu/in-notes/rfc5246.txt' />
</reference>

<reference anchor="XEP-0016">
  <front>
    <title>Privacy Lists</title>
    <author initials="P." surname="Millard" fullname="Peter Millard">
      <organization/>
      <address/>
    </author>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="15" month="February" year="2007"/>
  </front>
  <seriesInfo name="XSF XEP" value="0016"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0016.html"/>
</reference>

<reference anchor="XEP-0045">
  <front>
    <title>Multi-User Chat</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="16" month="July" year="2008"/>
  </front>
  <seriesInfo name="XSF XEP" value="0045"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0045.html"/>
</reference>

<reference anchor="XEP-0054">
  <front>
    <title>vcard-temp</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="16" month="July" year="2008"/>
  </front>
  <seriesInfo name="XSF XEP" value="0054"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0054.html"/>
</reference>

<reference anchor="XEP-0071">
  <front>
    <title>XHTML-IM</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="3" month="September" year="2008"/>
  </front>
  <seriesInfo name="XSF XEP" value="0071"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0071.html"/>
</reference>

<reference anchor="XEP-0115">
  <front>
    <title>Entity Capabilities</title>
    <author initials="J." surname="Hildebrand" fullname="Joe Hildebrand">
      <organization/>
      <address>
        <email>jhildebrand@jabber.com</email>
      </address>
    </author>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <author initials="R." surname="Tron&#xE7;on" fullname="Remko Tron&#xE7;on">
      <organization/>
      <address>
        <email>public@el-tramo.be</email>
      </address>
    </author>
    <date day="26" month="February" year="2008"/>
  </front>
  <seriesInfo name="XSF XEP" value="0115"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0115.html"/>
</reference>

<reference anchor="XEP-0160">
  <front>
    <title>Best Practices for Handling Offline Messages</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="24" month="January" year="2006"/>
  </front>
  <seriesInfo name="XSF XEP" value="0160"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0160.html"/>
</reference>

<reference anchor="XEP-0191">
  <front>
    <title>Simple Communications Blocking</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email/>
      </address>
    </author>
    <date day="15" month="February" year="2007"/>
  </front>
  <seriesInfo name="XSF XEP" value="0191"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0191.html"/>
</reference>

<reference anchor="XEP-0201">
  <front>
    <title>Best Practices for Message Threads</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <author initials="I." surname="Paterson" fullname="Ian Paterson">
      <organization/>
      <address>
        <email>ian.paterson@clientside.co.uk</email>
      </address>
    </author>
    <author initials="K." surname="Smith" fullname="Kevin Smith">
      <organization/>
      <address>
        <email>kevin@kismith.co.uk</email>
      </address>
    </author>
    <date day="6" month="February" year="2008"/>
  </front>
  <seriesInfo name="XSF XEP" value="0201"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0201.html"/>
</reference>

<reference anchor='XML-SCHEMA'
           target='http://www.w3.org/TR/2004/REC-xmlschema-1-20041028'>
<front>
<title>XML Schema Part 1: Structures Second Edition</title>
<author initials='H.' surname='Thompson' fullname='Henry S. Thompson'>
    <organization />
</author>
<author initials='M.' surname='Maloney' fullname='Murray Maloney'>
    <organization />
</author>
<author initials='N.' surname='Mendelsohn' fullname='Noah Mendelsohn'>
    <organization />
</author>
<author initials='D.' surname='Beech' fullname='David Beech'>
    <organization />
</author>
<date month='October' day='28' year='2004' />
</front>
<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-xmlschema-1-20041028' />
<format type='HTML' target='http://www.w3.org/TR/2004/REC-xmlschema-1-20041028' />
</reference>

<reference anchor="VCARD">
<front>
<title>vCard MIME Directory Profile</title>
<author initials='F.' surname='Dawson' fullname='Frank Dawson'>
<organization>Lotus Development Corporation</organization>
<address>
<postal>
<street>6544 Battleford Drive</street>
<street>Raleigh</street>
<street>NC 27613</street>
<country>USA</country></postal>
<phone>+1-919-676-9515</phone>
<email>frank_dawson@lotus.com</email></address></author>
<author initials='T.' surname='Howes' fullname='Tim Howes'>
<organization>Netscape Communications Corp.</organization>
<address>
<postal>
<street>501 East Middlefield Rd.</street>
<street>Mountain View</street>
<street>CA 94041</street>
<country>USA</country></postal>
<phone>+1.415.937.3419</phone>
<email>howes@netscape.com</email></address></author>
<date month='September' year='1998' />
<area>Applications</area>
<keyword>MIME</keyword>
<keyword>audio</keyword>
<keyword>content-type</keyword>
<keyword>directory</keyword>
<keyword>multipurpose internet mail extensions</keyword>
<abstract>
<t>
   This memo defines the profile of the MIME Content-Type  for
   directory information for a white-pages person object, based on a
   vCard electronic business card.  The profile definition is independent
   of any particular directory service or protocol.  The profile is
   defined for representing and exchanging a variety of information
   about an individual (e.g., formatted and structured name and delivery
   addresses, email address, multiple telephone numbers, photograph,
   logo, audio clips, etc.).  The directory information used by this
   profile is based on the attributes for the person object defined in
   the X.520 and X.521 directory services recommendations.  The profile
   also provides the method for including a  representation of a
   white-pages directory entry within the MIME Content-Type defined by
   the  document.
</t>
<t>
   The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;,
   &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;MAY&quot; and &quot;OPTIONAL&quot; in this
   document are to be interpreted as described in .
</t></abstract></front>
<seriesInfo name='RFC' value='2426' />
<format type='HTML' octets='96516' target='http://xml.resource.org/public/rfc/html/rfc2426.html' />
<format type='XML' octets='77828' target='http://xml.resource.org/public/rfc/xml/rfc2426.xml' />
</reference>

    </references>

  <section title="Subscription States" anchor="substates">
    <t>This section provides detailed information about subscription states and server processing of subscription-related presence stanzas (i.e., presence stanzas of type "subscribe", "subscribed", "unsubscribe", and "unsubscribed").</t>
    <section title="Defined States" anchor="substates-defined">
      <t>There are four primary subscription states (note: these states are described from the perspective of the user, not the contact):</t>
      <t>
        <list style='symbols'>
        <t>None -- the user does not have a subscription to the contact's presence, and the contact does not have a subscription to the user's presence</t>
        <t>To -- the user has a subscription to the contact's presence, but the contact does not have a subscription to the user's presence</t>
        <t>From -- the contact has a subscription to the user's presence, but the user does not have a subscription to the contact's presence</t>
        <t>Both -- both the user and the contact have subscriptions to each other's presence (i.e., the union of 'from' and 'to')</t>
        </list>
      </t>
      <t>These states are supplemented by various pending sub-states to yield nine possible subscription states:</t>
      <t><list style='numbers'>
        <t>"None" = contact and user are not subscribed to each other, and neither has requested a subscription from the other; this is reflected in the user's roster by subscription='none'</t>
        <t>"None + Pending Out" = contact and user are not subscribed to each other, and user has sent contact a subscription request but contact has not replied yet; this is reflected in the user's roster by subscription='none' and ask='subscribe'</t>
        <t>"None + Pending In" = contact and user are not subscribed to each other, and contact has sent user a subscription request but user has not replied yet (note: contact's server SHOULD NOT push or deliver roster items in this state, but instead SHOULD wait until user has approved subscription request from contact); this is reflected in the user's roster by subscription='none'</t>
        <t>"None + Pending Out+In" = contact and user are not subscribed to each other, contact has sent user a subscription request but user has not replied yet, and user has sent contact a subscription request but contact has not replied yet; this is reflected in the user's roster by subscription='none' and ask='subscribe'</t>
        <t>"To" = user is subscribed to contact (one-way); this is reflected in the user's roster by subscription='to'</t>
        <t>"To + Pending In" = user is subscribed to contact, and contact has sent user a subscription request but user has not replied yet; this is reflected in the user's roster by subscription='to'</t>
        <t>"From" = contact is subscribed to user (one-way); this is reflected in the user's roster by subscription='from'</t>
        <t>"From + Pending Out" = contact is subscribed to user, and user has sent contact a subscription request but contact has not replied yet; this is reflected in the user's roster by subscription='from' and ask='subscribe'</t>
        <t>"Both" = user and contact are subscribed to each other (two-way); this is reflected in the user's roster by subscription='both'</t>
      </list></t>
    </section>
    <section title="Server Processing of Outbound Presence Subscription Stanzas" anchor="substates-out">
      <t>Outbound presence subscription stanzas enable the user to manage his or her subscription to the contact's presence (via the "subscribe" and "unsubscribe" types), and to manage the contact's access to the user's presence (via the "subscribed" and "unsubscribed" types).</t>
      <t>The following rules apply to outbound routing of the stanza as well as changes to the user's roster.</t>
      <t><list style='empty'><t>Note: The rules for server processing of outbound presence subscription stanzas are described from the perspective of the user, not the contact.  In addition, "S.N." stands for SHOULD NOT.</t></list></t>
      <section title="Subscribe" anchor="substates-out-subscribe">
        <figure>
          <preamble>Table 1: Processing of outbound "subscribe" stanzas</preamble>
          <artwork><![CDATA[
+-----------------------------------------------------------------+
|  EXISTING STATE          |  ROUTE?  |  NEW STATE                |
+-----------------------------------------------------------------+
|  "None"                  |  MUST    |  "None + Pending Out"     |
|  "None + Pending Out"    |  MUST    |  no state change          |
|  "None + Pending In"     |  MUST    |  "None + Pending Out+In"  |
|  "None + Pending Out+In" |  MUST    |  no state change          |
|  "To"                    |  MUST    |  no state change          |
|  "To + Pending In"       |  MUST    |  no state change          |
|  "From"                  |  MUST    |  "From + Pending Out"     |
|  "From + Pending Out"    |  MUST    |  no state change          |
|  "Both"                  |  MUST    |  no state change          |
+-----------------------------------------------------------------+
          ]]></artwork>
        </figure>
        <t><list style='empty'><t>Note: A state change to "pending out" includes setting the 'ask' flag to a value of "subscribe" in the user's roster.</t></list></t>
      </section>
      <section title="Unsubscribe" anchor="substates-out-unsubscribe">
        <figure>
          <preamble>Table 2: Processing of outbound "unsubscribe" stanzas</preamble>
          <artwork><![CDATA[
+-----------------------------------------------------------------+
|  EXISTING STATE          |  ROUTE?  |  NEW STATE                |
+-----------------------------------------------------------------+
|  "None"                  |  MUST    |  no state change          |
|  "None + Pending Out"    |  MUST    |  "None"                   |
|  "None + Pending In"     |  MUST    |  no state change          |
|  "None + Pending Out+In" |  MUST    |  "None + Pending In"      |
|  "To"                    |  MUST    |  "None"                   |
|  "To + Pending In"       |  MUST    |  "None + Pending In"      |
|  "From"                  |  MUST    |  no state change          |
|  "From + Pending Out"    |  MUST    |  "From"                   |
|  "Both"                  |  MUST    |  "From"                   |
+-----------------------------------------------------------------+
          ]]></artwork>
        </figure>
      </section>
      <section title="Subscribed" anchor="substates-out-subscribed">
        <figure>
          <preamble>Table 3: Processing of outbound "subscribed" stanzas</preamble>
          <artwork><![CDATA[
+-----------------------------------------------------------------+
|  EXISTING STATE          |  ROUTE?  |  NEW STATE                |
+-----------------------------------------------------------------+
|  "None"                  |  S.N.    |  no state change [1]      |
|  "None + Pending Out"    |  S.N.    |  no state change          |
|  "None + Pending In"     |  MUST    |  "From"                   |
|  "None + Pending Out+In" |  MUST    |  "From + Pending Out"     |
|  "To"                    |  S.N.    |  no state change          |
|  "To + Pending In"       |  MUST    |  "Both"                   |
|  "From"                  |  S.N.    |  no state change          |
|  "From + Pending Out"    |  S.N.    |  no state change          |
|  "Both"                  |  S.N.    |  no state change          |
+-----------------------------------------------------------------+
          ]]></artwork>
        </figure>
        <t>[1] A server MAY note the fact that the user wishes to allow the contact to be subscribed to the user's presence and automatically approve any subscription request received from the contact; if it does so, upon the receiving presence stanza of type "subscribed" from the user's client it MUST add a roster item for the contact to the user's roster and set the 'ask' flag to a value of "subscribed".  However, the user's server still SHOULD NOT route the presence stanza of type "subscribed" to the contact.  This optional functionality applies only if the contact is not already in the user's roster or if the contact is in the user's roster with a state of "None" (not including a state of "None + Pending Out").</t>
      </section>
      <section title="Unsubscribed" anchor="substates-out-unsubscribed">
        <figure>
          <preamble>Table 4: Processing of outbound "unsubscribed" stanzas</preamble>
          <artwork><![CDATA[
+-----------------------------------------------------------------+
|  EXISTING STATE          |  ROUTE?  |  NEW STATE                |
+-----------------------------------------------------------------+
|  "None"                  |  S.N.    |  no state change          |
|  "None + Pending Out"    |  S.N.    |  no state change          |
|  "None + Pending In"     |  MUST    |  "None"                   |
|  "None + Pending Out+In" |  MUST    |  "None + Pending Out"     |
|  "To"                    |  S.N.    |  no state change          |
|  "To + Pending In"       |  MUST    |  "To"                     |
|  "From"                  |  MUST    |  "None"                   |
|  "From + Pending Out"    |  MUST    |  "None + Pending Out"     |
|  "Both"                  |  MUST    |  "To"                     |
+-----------------------------------------------------------------+
          ]]></artwork>
        </figure>
      </section>
    </section>
    <section title="Server Processing of Inbound Presence Subscription Stanzas" anchor="substates-in">
      <t>Inbound presence subscription stanzas request a subscription-related action from the user (via the "subscribe" type), inform the user of subscription-related actions taken by the contact (via the "unsubscribe" type), or enable the user to manage the contact's access to the user's presence information (via the "subscribed" and "unsubscribed" types).</t>
      <t>The following rules apply to delivery of the inbound stanza as well as changes to the user's roster.</t>
      <t><list style='empty'><t>Note: The rules for server processing of inbound presence subscription stanzas are described from the perspective of the user, not the contact.  In addition, "S.N." stands for SHOULD NOT.</t></list></t>
      <section title="Subscribe" anchor="substates-in-subscribe">
        <figure>
          <preamble>Table 5: Processing of inbound "subscribe" stanzas</preamble>
          <artwork><![CDATA[
+------------------------------------------------------------------+
|  EXISTING STATE          |  DELIVER?  |  NEW STATE               |
+------------------------------------------------------------------+
|  "None"                  |  MUST [1]  |  "None + Pending In"     |
|  "None + Pending Out"    |  MUST      |  "None + Pending Out+In" |
|  "None + Pending In"     |  S.N.      |  no state change         |
|  "None + Pending Out+In" |  S.N.      |  no state change         |
|  "To"                    |  MUST      |  "To + Pending In"       |
|  "To + Pending In"       |  S.N.      |  no state change         |
|  "From"                  |  S.N. [2]  |  no state change         |
|  "From + Pending Out"    |  S.N. [2]  |  no state change         |
|  "Both"                  |  S.N. [2]  |  no state change         |
+------------------------------------------------------------------+
          ]]></artwork>
        </figure>
        <t>[1] If the user previously sent presence of type "subscribed" as described under <xref target='substates-out-subscribed'/>, then the server MAY auto-reply with "subscribed" and change the state to "From" rather than "None + Pending In".</t>
        <t>[2] Server SHOULD auto-reply with "subscribed".</t>
      </section>
      <section title="Unsubscribe" anchor="substates-in-unsubscribe">
        <t>When the user's server receives a presence stanza of type "unsubscribe" for the user from the contact, if the stanza results in a subscription state change from the user's perspective then the user's server MUST change the state and SHOULD auto-reply by sending a presence stanza of type "unsubscribed" to the contact on behalf of the user.  Otherwise the user's server MUST NOT change the state and SHOULD NOT deliver the stanza.  These rules are summarized in the following table.</t>
        <figure>
          <preamble>Table 6: Processing of inbound "unsubscribe" stanzas</preamble>
          <artwork><![CDATA[
+------------------------------------------------------------------+
|  EXISTING STATE          |  DELIVER?  |  NEW STATE               |
+------------------------------------------------------------------+
|  "None"                  |  S.N.      |  no state change         |
|  "None + Pending Out"    |  S.N.      |  no state change         |
|  "None + Pending In"     |  S.N. [1]  |  "None"                  |
|  "None + Pending Out+In" |  S.N. [1]  |  "None + Pending Out"    |
|  "To"                    |  S.N.      |  no state change         |
|  "To + Pending In"       |  S.N. [1]  |  "To"                    |
|  "From"                  |  S.N. [1]  |  "None"                  |
|  "From + Pending Out"    |  S.N. [1]  |  "None + Pending Out     |
|  "Both"                  |  S.N. [1]  |  "To"                    |
+------------------------------------------------------------------+
          ]]></artwork>
        </figure>
        <t>[1] Server SHOULD auto-reply with "unsubscribed".</t>
      </section>
      <section title="Subscribed" anchor="substates-in-subscribed">
        <t>When the user's server receives a presence stanza of type "subscribed" for the user from the contact, if there is no pending outbound request for access to the contact's presence information, then it MUST NOT change the subscription state and SHOULD NOT deliver the stanza to the user.  If there is a pending outbound request for access to the contact's presence information and the inbound presence stanza of type "subscribed" results in a subscription state change, then the user's server MUST change the subscription state but SHOULD NOT deliver the stanza to the user.  If the user already has access to the contact's presence information, the inbound presence stanza of type "subscribed" does not result in a subscription state change; therefore the user's server MUST NOT change the subscription state and SHOULD NOT deliver the stanza to the user.  These rules are summarized in the following table.</t>
        <figure>
          <preamble>Table 7: Processing of inbound "subscribed" stanzas</preamble>
          <artwork><![CDATA[
+------------------------------------------------------------------+
|  EXISTING STATE          |  DELIVER?  |  NEW STATE               |
+------------------------------------------------------------------+
|  "None"                  |  S.N.      |  no state change         |
|  "None + Pending Out"    |  S.N.      |  "To"                    |
|  "None + Pending In"     |  S.N.      |  no state change         |
|  "None + Pending Out+In" |  S.N.      |  "To + Pending In"       |
|  "To"                    |  S.N.      |  no state change         |
|  "To + Pending In"       |  S.N.      |  no state change         |
|  "From"                  |  S.N.      |  no state change         |
|  "From + Pending Out"    |  S.N.      |  "Both"                  |
|  "Both"                  |  S.N.      |  no state change         |
+------------------------------------------------------------------+
          ]]></artwork>
        </figure>
      </section>
      <section title="Unsubscribed" anchor="substates-in-unsubscribed">
        <t>When the user's server receives a presence stanza of type "unsubscribed" for the user from the contact, if there is a pending outbound request for access to the contact's presence information or if the user currently has access to the contact's presence information, then the user's server MUST change the subscription state but SHOULD NOT deliver the stanza to the user.  Otherwise, the user's server MUST NOT change the subscription state and SHOULD NOT deliver the stanza.  These rules are summarized in the following table.</t>
        <figure>
          <preamble>Table 8: Processing of inbound "unsubscribed" stanzas</preamble>
          <artwork><![CDATA[
+------------------------------------------------------------------+
|  EXISTING STATE          |  DELIVER?  |  NEW STATE               |
+------------------------------------------------------------------+
|  "None"                  |  S.N.      |  no state change         |
|  "None + Pending Out"    |  S.N.      |  "None"                  |
|  "None + Pending In"     |  S.N.      |  no state change         |
|  "None + Pending Out+In" |  S.N.      |  "None + Pending In"     |
|  "To"                    |  S.N.      |  "None"                  |
|  "To + Pending In"       |  S.N.      |  "None + Pending In"     |
|  "From"                  |  S.N.      |  no state change         |
|  "From + Pending Out"    |  S.N.      |  "From"                  |
|  "Both"                  |  S.N.      |  "From"                  |
+------------------------------------------------------------------+
          ]]></artwork>
        </figure>
      </section>
    </section>
  </section>

  <section title="Blocking Communication" anchor="blocking">
    <t>Sections 2.3.5 and 5.4.10 of <xref target='IMP-REQS'/> require that a compliant instant messaging and presence technology must enable a user to block communications from selected users.  Protocols for doing so are specified in <xref target='XEP-0016'/> and <xref target='XEP-0191'/>.</t>
  </section>

    <section title="vCards" anchor="vcard">
      <t>Sections 3.1.3 and 4.1.4 of <xref target="IMP-REQS"/> require that it be possible to retrieve out-of-band contact information for other users (e.g., telephone number or email address).  An XML representation of the vCard specification defined in <xref target="VCARD">RFC 2426</xref> is in common use within the Jabber community to provide such information but is out of scope for this specification (documentation of this protocol is contained in <xref target="XEP-0054"/>).</t>
    </section>

    <section title="XML Schemas" anchor="def">
      <t>Because validation of XML streams and stanzas is optional, the following XML schemas are provided for descriptive purposes only.  These schemas are not normative.</t>
      <t>The following schemas formally define various XML namespaces used in the core XMPP protocols, in conformance with <xref target='XML-SCHEMA'/>.  For schemas defining namespaces for XML streams and other core aspects of XMPP, refer to <xref target="xmpp-core"/>.</t>
      <section title="jabber:client" anchor="def-client">
        <figure>
          <artwork><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='jabber:client'
    xmlns='jabber:client'
    elementFormDefault='qualified'>

  <xs:import 
      namespace='urn:ietf:params:xml:ns:xmpp-stanzas'/>

  <xs:element name='message'>
     <xs:complexType>
        <xs:sequence>
          <xs:choice minOccurs='0' maxOccurs='unbounded'>
            <xs:element ref='subject'/>
            <xs:element ref='body'/>
            <xs:element ref='thread'/>
          </xs:choice>
          <xs:any     namespace='##other'
                      minOccurs='0'
                      maxOccurs='unbounded'/>
          <xs:element ref='error'
                      minOccurs='0'/>
        </xs:sequence>
        <xs:attribute name='from'
                      type='xs:string'
                      use='optional'/>
        <xs:attribute name='id'
                      type='xs:NMTOKEN'
                      use='optional'/>
        <xs:attribute name='to'
                      type='xs:string'
                      use='optional'/>
        <xs:attribute name='type' 
                      use='optional' 
                      default='normal'>
          <xs:simpleType>
            <xs:restriction base='xs:NCName'>
              <xs:enumeration value='chat'/>
              <xs:enumeration value='error'/>
              <xs:enumeration value='groupchat'/>
              <xs:enumeration value='headline'/>
              <xs:enumeration value='normal'/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
        <xs:attribute ref='xml:lang' use='optional'/>
     </xs:complexType>
  </xs:element>

  <xs:element name='body'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:string'>
          <xs:attribute ref='xml:lang' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='subject'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:string'>
          <xs:attribute ref='xml:lang' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='thread'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:NMTOKEN'>
          <xs:attribute name='parent'
                        type='xs:NMTOKEN'
                        use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='presence'>
    <xs:complexType>
      <xs:sequence>
        <xs:choice minOccurs='0' maxOccurs='unbounded'>
          <xs:element ref='show'/>
          <xs:element ref='status'/>
          <xs:element ref='priority'/>
        </xs:choice>
        <xs:any     namespace='##other'
                    minOccurs='0'
                    maxOccurs='unbounded'/>
        <xs:element ref='error'
                    minOccurs='0'/>
      </xs:sequence>
      <xs:attribute name='from'
                    type='xs:string'
                    use='optional'/>
      <xs:attribute name='id'
                    type='xs:NMTOKEN'
                    use='optional'/>
      <xs:attribute name='to'
                    type='xs:string'
                    use='optional'/>
      <xs:attribute name='type' use='optional'>
        <xs:simpleType>
          <xs:restriction base='xs:NCName'>
            <xs:enumeration value='error'/>
            <xs:enumeration value='probe'/>
            <xs:enumeration value='subscribe'/>
            <xs:enumeration value='subscribed'/>
            <xs:enumeration value='unavailable'/>
            <xs:enumeration value='unsubscribe'/>
            <xs:enumeration value='unsubscribed'/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute ref='xml:lang' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='show'>
    <xs:simpleType>
      <xs:restriction base='xs:NCName'>
        <xs:enumeration value='away'/>
        <xs:enumeration value='chat'/>
        <xs:enumeration value='dnd'/>
        <xs:enumeration value='xa'/>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>

  <xs:element name='status'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='string1024'>
          <xs:attribute ref='xml:lang' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name='string1024'>
    <xs:restriction base='xs:string'>
      <xs:minLength value='1'/>
      <xs:maxLength value='1024'/>
    </xs:restriction>
  </xs:simpleType>

  <xs:element name='priority' type='xs:byte'/>

  <xs:element name='iq'>
    <xs:complexType>
      <xs:sequence>
        <xs:any     namespace='##other'
                    minOccurs='0'/>
        <xs:element ref='error'
                    minOccurs='0'/>
      </xs:sequence>
      <xs:attribute name='from'
                    type='xs:string'
                    use='optional'/>
      <xs:attribute name='id'
                    type='xs:NMTOKEN'
                    use='required'/>
      <xs:attribute name='to'
                    type='xs:string'
                    use='optional'/>
      <xs:attribute name='type' use='required'>
        <xs:simpleType>
          <xs:restriction base='xs:NCName'>
            <xs:enumeration value='error'/>
            <xs:enumeration value='get'/>
            <xs:enumeration value='result'/>
            <xs:enumeration value='set'/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute ref='xml:lang' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='error'>
    <xs:complexType>
      <xs:sequence xmlns:err='urn:ietf:params:xml:ns:xmpp-stanzas'>
        <xs:group ref='err:stanzaErrorGroup'/>
        <xs:element ref='err:text'
                    minOccurs='0'/>
      </xs:sequence>
      <xs:attribute name='type' use='required'>
        <xs:simpleType>
          <xs:restriction base='xs:NCName'>
            <xs:enumeration value='auth'/>
            <xs:enumeration value='cancel'/>
            <xs:enumeration value='continue'/>
            <xs:enumeration value='modify'/>
            <xs:enumeration value='wait'/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

</xs:schema>
          ]]></artwork>
        </figure>
      </section>
      <section title="jabber:server" anchor="def-server">
        <figure>
          <artwork><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='jabber:server'
    xmlns='jabber:server'
    elementFormDefault='qualified'>

  <xs:import 
      namespace='urn:ietf:params:xml:ns:xmpp-stanzas'/>

  <xs:element name='message'>
     <xs:complexType>
        <xs:sequence>
          <xs:choice minOccurs='0' maxOccurs='unbounded'>
            <xs:element ref='subject'/>
            <xs:element ref='body'/>
            <xs:element ref='thread'/>
          </xs:choice>
          <xs:any namespace='##other'
                  minOccurs='0'
                  maxOccurs='unbounded'/>
          <xs:element ref='error'
                      minOccurs='0'/>
        </xs:sequence>
        <xs:attribute name='from'
                      type='xs:string'
                      use='required'/>
        <xs:attribute name='id'
                      type='xs:NMTOKEN'
                      use='optional'/>
        <xs:attribute name='to'
                      type='xs:string'
                      use='required'/>
        <xs:attribute name='type' 
                      use='optional' 
                      default='normal'>
          <xs:simpleType>
            <xs:restriction base='xs:NCName'>
              <xs:enumeration value='chat'/>
              <xs:enumeration value='error'/>
              <xs:enumeration value='groupchat'/>
              <xs:enumeration value='headline'/>
              <xs:enumeration value='normal'/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
        <xs:attribute ref='xml:lang' use='optional'/>
     </xs:complexType>
  </xs:element>

  <xs:element name='body'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:string'>
          <xs:attribute ref='xml:lang' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='subject'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:string'>
          <xs:attribute ref='xml:lang' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='thread'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:NMTOKEN'>
          <xs:attribute name='parent'
                        type='xs:NMTOKEN'
                        use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='subject'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:NMTOKEN'>
          <xs:attribute name='parent' 
                        type='xs:NMTOKEN'
                        use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='presence'>
    <xs:complexType>
      <xs:sequence>
        <xs:choice minOccurs='0' maxOccurs='unbounded'>
          <xs:element ref='show'/>
          <xs:element ref='status'/>
          <xs:element ref='priority'/>
        </xs:choice>
        <xs:any     namespace='##other'
                    minOccurs='0'
                    maxOccurs='unbounded'/>
        <xs:element ref='error'
                    minOccurs='0'/>
      </xs:sequence>
      <xs:attribute name='from'
                    type='xs:string'
                    use='required'/>
      <xs:attribute name='id'
                    type='xs:NMTOKEN'
                    use='optional'/>
      <xs:attribute name='to'
                    type='xs:string'
                    use='required'/>
      <xs:attribute name='type' use='optional'>
        <xs:simpleType>
          <xs:restriction base='xs:NCName'>
            <xs:enumeration value='error'/>
            <xs:enumeration value='probe'/>
            <xs:enumeration value='subscribe'/>
            <xs:enumeration value='subscribed'/>
            <xs:enumeration value='unavailable'/>
            <xs:enumeration value='unsubscribe'/>
            <xs:enumeration value='unsubscribed'/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute ref='xml:lang' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='show'>
    <xs:simpleType>
      <xs:restriction base='xs:NCName'>
        <xs:enumeration value='away'/>
        <xs:enumeration value='chat'/>
        <xs:enumeration value='dnd'/>
        <xs:enumeration value='xa'/>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>

  <xs:element name='status'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='string1024'>
          <xs:attribute ref='xml:lang' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name='string1024'>
    <xs:restriction base='xs:string'>
      <xs:minLength value='1'/>
      <xs:maxLength value='1024'/>
    </xs:restriction>
  </xs:simpleType>

  <xs:element name='priority' type='xs:byte'/>

  <xs:element name='iq'>
    <xs:complexType>
      <xs:sequence>
        <xs:any namespace='##other'
                minOccurs='0'/>
        <xs:element ref='error'
                    minOccurs='0'/>
      </xs:sequence>
      <xs:attribute name='from'
                    type='xs:string'
                    use='required'/>
      <xs:attribute name='id'
                    type='xs:NMTOKEN'
                    use='required'/>
      <xs:attribute name='to'
                    type='xs:string'
                    use='required'/>
      <xs:attribute name='type' use='required'>
        <xs:simpleType>
          <xs:restriction base='xs:NCName'>
            <xs:enumeration value='error'/>
            <xs:enumeration value='get'/>
            <xs:enumeration value='result'/>
            <xs:enumeration value='set'/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute ref='xml:lang' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='error'>
    <xs:complexType>
      <xs:sequence xmlns:err='urn:ietf:params:xml:ns:xmpp-stanzas'>
        <xs:group ref='err:stanzaErrorGroup'/>
        <xs:element ref='err:text'
                    minOccurs='0'/>
      </xs:sequence>
      <xs:attribute name='type' use='required'>
        <xs:simpleType>
          <xs:restriction base='xs:NCName'>
            <xs:enumeration value='auth'/>
            <xs:enumeration value='cancel'/>
            <xs:enumeration value='continue'/>
            <xs:enumeration value='modify'/>
            <xs:enumeration value='wait'/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

</xs:schema>
          ]]></artwork>
        </figure>
      </section>

      <section title="jabber:iq:roster" anchor="def-roster">
        <figure>
          <artwork><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='jabber:iq:roster'
    xmlns='jabber:iq:roster'
    elementFormDefault='qualified'>

  <xs:element name='query'>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref='item'
                    minOccurs='0'
                    maxOccurs='unbounded'/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name='item'>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref='group'
                    minOccurs='0'
                    maxOccurs='unbounded'/>
      </xs:sequence>
      <xs:attribute name='ask' use='optional'>
        <xs:simpleType>
          <xs:restriction base='xs:NCName'>
            <xs:enumeration value='subscribe'/>
            <xs:enumeration value='subscribed'/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name='jid' type='xs:string' use='required'/>
      <xs:attribute name='name' type='xs:string' use='optional'/>
      <xs:attribute name='subscription' use='optional'>
        <xs:simpleType>
          <xs:restriction base='xs:NCName'>
            <xs:enumeration value='both'/>
            <xs:enumeration value='from'/>
            <xs:enumeration value='none'/>
            <xs:enumeration value='remove'/>
            <xs:enumeration value='to'/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <xs:element name='group' type='xs:string'/>

</xs:schema>
          ]]></artwork>
        </figure>
      </section>
    </section>

    <section title="Differences From RFC 3921" anchor="diffs">
      <t>Based on consensus derived from implementation and deployment experience as well as formal interoperability testing, the following substantive modifications were made from RFC 3921.</t>
      <t>
        <list style='symbols'>
          <t>The protocol for session establishment was determined to be unnecessary and therefore the content previously defined in Section 3 of RFC 3921 was removed.  However, for the sake of backward-compatibility server implementations are encouraged to advertise support for the feature, even though session establishment is a "no-op".</t>
          <t>In order to more seamlessly repair lack of synchronization in subscription states between rosters located at different servers, error handling related to presence probes and presence notifications was modified to return presence stanzas of type "unsubscribe" or "unsubscribed" rather than error stanzas.</t>
          <t>Added optional server support for pre-approved presence subscriptions via presence stanzas of type "subscribed" and the optional "subscribed" value for the 'ask' flag.</t>
          <t>Added optional 'parent' attribute to &lt;thread/&gt; element</t>
          <t>The protocol for communications blocking specified in Section 10 of RFC 3921 has been moved to <xref target='XEP-0016'/>.</t>
        </list>
      </t>
      <t>In addition, numerous changes of an editorial nature were made in order to more fully specify and clearly explain the protocols.</t>
    </section>

    <section title="Copying Conditions" anchor="copying">
      <t>Regarding this entire document or any portion of it, the author makes no guarantees and is not responsible for any damage resulting from its use.  The author grants irrevocable permission to anyone to use, modify, and distribute it in any way that does not diminish the rights of anyone else to use, modify, and distribute it, provided that redistributed derivative works do not contain misleading author or version information.  Derivative works need not be licensed under similar terms.</t>
    </section>

  </back>

</rfc>
