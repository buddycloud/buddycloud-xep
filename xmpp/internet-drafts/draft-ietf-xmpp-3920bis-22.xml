<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc compact="yes"?>
<?rfc strict="yes"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<rfc category="std" docName="draft-ietf-xmpp-3920bis-22" ipr="trust200902" obsoletes="3920">

  <front>
    <title abbrev="XMPP Core">Extensible Messaging and Presence Protocol (XMPP): Core</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization>Cisco</organization>
      <address>
        <postal>
          <street>1899 Wyknoop Street, Suite 600</street>
          <city>Denver</city>
          <region>CO</region>
          <code>80202</code>
          <country>USA</country>
        </postal>
        <phone>+1-303-308-3282</phone>
        <email>psaintan@cisco.com</email>
      </address>
    </author>
    <date year="2010" month="December" day="20"/>
    <area>RAI</area>
    <workgroup>XMPP</workgroup>
    <keyword>XMPP</keyword>
    <keyword>Extensible Messaging and Presence Protocol</keyword>
    <keyword>Jabber</keyword>
    <keyword>Messaging</keyword>
    <keyword>Instant Messaging</keyword>
    <keyword>Presence</keyword>
    <keyword>Extensible Markup Language</keyword>
    <keyword>XML</keyword>
    <abstract>
      <t>The Extensible Messaging and Presence Protocol (XMPP) is an application profile of the Extensible Markup Language (XML) that enables the near-real-time exchange of structured yet extensible data between any two or more network entities.  This document defines XMPP's core protocol methods: setup and teardown of XML streams, channel encryption, authentication, error handling, and communication primitives for messaging, network availability ("presence"), and request-response interactions.  This document obsoletes RFC 3920.</t>
    </abstract>
  </front>

  <middle>

  <section title="Introduction" anchor="intro">
    <section title="Overview" anchor="intro-overview">
      <t>The Extensible Messaging and Presence Protocol (XMPP) is an application profile of the Extensible Markup Language <xref target="XML"/> that enables the near-real-time exchange of structured yet extensible data between any two or more network entities.  This document defines XMPP's core protocol methods: setup and teardown of XML streams, channel encryption, authentication, error handling, and communication primitives for messaging, network availability ("presence"), and request-response interactions.</t>
    </section>
    <section title="History" anchor="intro-history">
      <t>The basic syntax and semantics of XMPP were developed originally within the Jabber open-source community, mainly in 1999.  In late 2002, the XMPP Working Group was chartered with developing an adaptation of the base Jabber protocol that would be suitable as an IETF instant messaging (IM) and presence technology in accordance with <xref target='IMP-REQS'/>.  In October 2004, <xref target='RFC3920'/> and <xref target='RFC3921'/> were published, representing the most complete definition of XMPP at that time.</t>
      <t>Since 2004 the Internet community has gained extensive implementation and deployment experience with XMPP, including formal interoperability testing carried out under the auspices of the XMPP Standards Foundation (XSF).  This document incorporates comprehensive feedback from software developers and XMPP service providers, including a number of backward-compatible modifications summarized under <xref target='diffs'/>.  As a result, this document reflects the rough consensus of the Internet community regarding the core features of XMPP 1.0, thus obsoleting RFC 3920.</t>
    </section>
    <section title="Functional Summary" anchor="intro-summary">
      <t>This non-normative section provides a developer-friendly, functional summary of XMPP; refer to the sections that follow for a normative definition of XMPP.</t>
      <t>The purpose of XMPP is to enable the exchange of relatively small pieces of structured data (called "XML stanzas") over a network between any two (or more) entities.  XMPP is typically implemented using a distributed client-server architecture, wherein a client needs to connect to a server in order to gain access to the network and thus be allowed to exchange XML stanzas with other entities (which can be associated with other servers).  The process whereby a client connects to a server, exchanges XML stanzas, and ends the connection is:</t>
      <t>
        <list style='numbers'>
          <t>Determine the IP address and port at which to connect, typically based on resolution of a fully-qualified domain name (<xref target='tcp-resolution'/>)</t>
          <t>Open a Transmission Control Protocol <xref target='TCP'/> connection</t>
          <t>Open an XML stream over TCP (<xref target='streams-open'/>)</t>
          <t>Preferably negotiate Transport Layer Security <xref target='TLS'/> for channel encryption (<xref target='tls'/>)</t>
          <t>Authenticate using a Simple Authentication and Security Layer <xref target='SASL'/> mechanism (<xref target='sasl'/>)</t>
          <t>Bind a resource to the stream (<xref target='bind'/>)</t>
          <t>Exchange an unbounded number of XML stanzas with other entities on the network (<xref target='stanzas'/>)</t>
          <t>Close the XML stream (<xref target='streams-close'/>)</t>
          <t>Close the TCP connection</t>
        </list>
      </t>
      <t>Within XMPP, one server can optionally connect to another server to enable inter-domain or inter-server communication.  For this to happen, the two servers need to negotiate a connection between themselves and then exchange XML stanzas; the process for doing so is:</t>
      <t>
        <list style='numbers'>
          <t>Determine the IP address and port at which to connect, typically based on resolution of a fully-qualified domain name (<xref target='tcp-resolution'/>)</t>
          <t>Open a TCP connection</t>
          <t>Open an XML stream (<xref target='streams-open'/>)</t>
          <t>Preferably negotiate TLS for channel encryption (<xref target='tls'/>)</t>
          <t>Authenticate using a Simple Authentication and Security Layer <xref target='SASL'/> mechanism (<xref target='sasl'/>) *</t>
          <t>Exchange an unbounded number of XML stanzas both directly for the servers and indirectly on behalf of entities associated with each server, such as connected clients (<xref target='stanzas'/>)</t>
          <t>Close the XML stream (<xref target='streams-close'/>)</t>
          <t>Close the TCP connection</t>
        </list>
      </t>
      <t><list style='empty'><t>* Interoperability Note: At the time of writing, most deployed servers still use the Server Dialback protocol <xref target='XEP-0220'/> to provide weak identity verification instead of using SASL with PKIX certificates to provide strong authentication, especially in cases where SASL negotiation would not result in strong authentication anyway (e.g., because TLS negotiation was not mandated by the peer server, or because the PKIX certificate presented by the peer server during TLS negotiation is self-signed and has not been previously accepted); for details, see <xref target='XEP-0220'/>.  The solutions specified in this document offer a significantly stronger level of security (see also <xref target='security-strong'/>).</t></list></t>
      <t>This document specifies how clients connect to servers and specifies the basic semantics of XML stanzas.  However, this document does not define the "payloads" of the XML stanzas that might be exchanged once a connection is successfully established; instead, those payloads are defined by various XMPP extensions.  For example, <xref target='XMPP-IM'/> defines extensions for basic instant messaging and presence functionality.  In addition, various specifications produced in the XSF's XEP series <xref target='XEP-0001'/> define extensions for a wide range of applications.</t>
    </section>
    <section title="Terminology" anchor="intro-terms">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 <xref target='KEYWORDS'/>.</t>
      <t>Certain security-related terms are to be understood in the sense defined in <xref target="SEC-TERMS"/>; such terms include, but are not limited to, "assurance", "attack", "authentication", "authorization", "certificate", "certification authority", "certification path", "confidentiality", "credential", "downgrade", "encryption", "hash value", "identity", "integrity", "signature", "self-signed certificate", "sign", "spoof", "tamper", "trust", "trust anchor", "validate", and "verify".</t>
      <t>Certain terms related to certificates, domains, and application service identity are to be understood in the sense defined in <xref target="TLS-CERTS"/>; these include, but are not limited to, "PKIX certificate", "source domain", "derived domain", and the identifier types "CN-ID", "DNS-ID", and "SRV-ID".</t>
      <t>Other security-related terms are to be understood in the sense defined in the referenced specifications (for example, "denial of service" as described in <xref target='DOS'/> or "end entity certificate" as described in <xref target='PKIX'/>).</t>
      <t>The term "whitespace" is used to refer to any character or characters matching the "S" production from <xref target="XML"/>, i.e., one or more instances of the SP, HTAB, CR, or LF rules defined in <xref target='ABNF'/>.</t>
      <t>The terms "localpart", "domainpart", and "resourcepart" are defined in <xref target="XMPP-ADDR"/>.</t>
      <t>The term "bare JID" refers to an XMPP address of the form &lt;localpart@domainpart&gt; (for an account at a server) or of the form &lt;domainpart&gt; (for a server).</t>
      <t>The term "full JID" refers to an XMPP address of the form &lt;localpart@domainpart/resourcepart&gt; (for a particular authorized client or device associated with an account) or of the form &lt;domainpart/resourcepart&gt; (for a particular resource or script associated with a server).</t>
      <t>The term "XML stream" (also "stream") is defined under <xref target='streams-fundamentals'/>.</t>
      <t>The term "XML stanza" (also "stanza") is defined under <xref target='streams-fundamentals'/>.  There are three kinds of stanzas: message, presence, and IQ (short for "Info/Query").  These communication primitives are defined under <xref target='stanzas-semantics-message'/>, <xref target='stanzas-semantics-presence'/>, and <xref target='stanzas-semantics-iq'/>, respectively.</t>
      <t>The term "originating entity" refers to the entity that first generates a stanza that is sent over an XMPP network (e.g., a connected client, an add-on service, or a server).  The term "generated stanza" refers to the stanza so generated.</t>
      <t>The term "input stream" designates an XML stream over which a server receives data from a connected client or remote server, and the term "output stream" designates an XML stream over which a server sends data to a connected client or remote server.  The following terms designate some of the actions that a server can perform when processing data received over an input stream:</t>
      <t>
        <list style='empty'>
          <t>
            <list style='hanging'>
              <t hangText="route:">pass the data to a remote server for direct processing by the remote server or eventual delivery to a client associated with the remote server<vspace blankLines='1'/></t>
              <t hangText="deliver:">pass the data to a connected client<vspace blankLines='1'/></t>
              <t hangText="ignore:">discard the data without acting upon it or returning an error to the sender<vspace blankLines='1'/></t>
            </list>
          </t>
        </list>
      </t>
      <t>When the term "ignore" is used with regard to client processing of data it receives, the phrase "without acting upon it" explicitly includes not presenting the data to a human user.</t>
      <t>Following the "XML Notation" used in <xref target="IRI"/> to represent characters that cannot be rendered in ASCII-only documents, some examples in this document use the form "&amp;#x...." as a notational device to represent <xref target='UNICODE'/> characters (e.g., the string "&amp;#x0159;" stands for the Unicode character LATIN SMALL LETTER R WITH CARON); this form is definitely not to be sent over the wire in XMPP systems.</t>
      <t>Consistent with the convention used in <xref target='URI'/> to represent Uniform Resource Indentifiers, XMPP addresses in running text are enclosed between '&lt;' and '&gt;' (although natively they are not URIs).</t>
      <t>In examples, lines have been wrapped for improved readability, "[...]" means elision, and the following prepended strings are used (these prepended strings are not to be sent over the wire):</t>
      <t>
        <list style='symbols'>
          <t>C: = a client</t>
          <t>E: = any XMPP entity</t>
          <t>I: = an initiating entity</t>
          <t>P: = a peer server</t>
          <t>R: = a receiving entity</t>
          <t>S: = a server</t>
          <t>S1: = server1</t>
          <t>S2: = server2</t>
        </list>
      </t>
      <t>Readers need to be aware that the examples are not exhaustive and that, in examples for some protocol flows, the alternate steps shown would not necessarily be triggered by the exact data sent in the previous step; in all cases the protocol definitions specified in this document or in normatively referenced documents rule over any examples provided here.  All examples are fictional and the information exchanged (e.g., usernames and passwords) does not represent any existing users or servers.</t>
    </section>
  </section>

  <section title="Architecture" anchor="arch">
    <t>XMPP provides a technology for the asynchronous, end-to-end exchange of structured data by means of direct, persistent XML streams among a distributed network of globally-addressable, presence-aware clients and servers.  Because this architectural style involves ubiquitous knowledge of network availability and a conceptually unlimited number of concurrent information transactions in the context of a given client-to-server or server-to-server session, we label it "Availability for Concurrent Transactions" (ACT) to distinguish it from the "Representational State Transfer" <xref target="REST"/> architectural style familiar from the World Wide Web.  Although the architecture of XMPP is similar in important ways to that of email (see <xref target='EMAIL-ARCH'/>), it introduces several modifications to facilitate communication in close to real time.  The salient features of this ACTive architectural style are as follows.</t>
    <section title="Global Addresses" anchor="arch-addresses">
      <t>As with email, XMPP uses globally-unique addresses (based on the Domain Name System) in order to route and deliver messages over the network.  All XMPP entities are addressable on the network, most particularly clients and servers but also various additional services that can be accessed by clients and servers.  In general, server addresses are of the form &lt;domainpart&gt; (e.g., &lt;im.example.com&gt;), accounts hosted at a server are of the form &lt;localpart@domainpart&gt; (e.g., &lt;juliet@im.example.com&gt;, called a "bare JID"), and a particular connected device or resource that is currently authorized for interaction on behalf of an account is of the form &lt;localpart@domainpart/resourcepart&gt; (e.g., &lt;juliet@im.example.com/balcony&gt;, called a "full JID").  For historical reasons, XMPP addresses are often called Jabber IDs or JIDs.  Because the formal specification of the XMPP address format depends on internationalization technologies that are in flux at the time of writing, the format is defined in <xref target="XMPP-ADDR"/> instead of this document.  The terms "localpart", "domainpart", and "resourcepart" are defined more formally in <xref target="XMPP-ADDR"/>.</t>
    </section>
    <section title="Presence" anchor="arch-presence">
      <t>XMPP includes the ability for an entity to advertise its network availability or "presence" to other entities.  In XMPP, this availability for communication is signalled end-to-end by means of a dedicated communication primitive: the &lt;presence/&gt; stanza.  Although knowledge of network availability is not strictly necessary for the exchange of XMPP messages, it facilitates real-time interaction because the originator of a message can know before initiating communication that the intended recipient is online and available.  End-to-end presence is defined in <xref target="XMPP-IM"/>.</t>
    </section>
    <section title="Persistent Streams" anchor="arch-streams">
      <t>Availability for communication is also built into each point-to-point "hop" through the use of persistent XML streams over long-lived TCP connections.  These "always-on" client-to-server and server-to-server streams enable each party to push data to the other party at any time for immediate routing or delivery.  XML streams are defined under <xref target="streams"/>.</t>
    </section>
    <section title="Structured Data" anchor="arch-data">
      <t>The basic protocol data unit in XMPP is not an XML stream (which simply provides the transport for point-to-point communication) but an XML "stanza", which is essentially a fragment of XML that is sent over a stream.  The root element of a stanza includes routing attributes (such as "from" and "to" addresses) and the child elements of the stanza contain a payload for delivery to the intended recipient.  XML stanzas are defined under <xref target="stanzas"/>.</t>
    </section>
    <section title="Distributed Network of Clients and Servers" anchor="arch-network">
      <t>In practice, XMPP consists of a network of clients and servers that inter-communicate (however, communication between any two given deployed servers is strictly discretionary and a matter of local service policy).  Thus, for example, the user &lt;juliet@im.example.com&gt; associated with the server &lt;im.example.com&gt; might be able to exchange messages, presence, and other structured data with the user &lt;romeo@example.net&gt; associated with the server &lt;example.net&gt;.  This pattern is familiar from messaging protocols that make use of global addresses, such as the email network (see <xref target="SMTP"/> and <xref target="EMAIL-ARCH"/>).  As a result, end-to-end communication in XMPP is logically peer-to-peer but physically client-to-server-to-server-to-client, as illustrated in the following diagram.</t>
      <figure anchor='figure-1' title='Distributed Client-Server Architecture'>
        <artwork><![CDATA[
  example.net <--------------> im.example.com
     ^                                ^
     |                                |
     v                                v
romeo@example.net           juliet@im.example.com

        ]]></artwork>
      </figure>
      <t><list style='empty'><t>Informational Note: Architectures that employ <xref target='streams'>XML streams</xref> and <xref target="stanzas">XML stanzas</xref> but that establish peer-to-peer connections directly between clients using technologies based on <xref target='LINKLOCAL'/> have been deployed, but such architectures are not defined in this specification and are best described as "XMPP-like"; for details, see <xref target='XEP-0174'/>.  In addition, XML streams can be established end-to-end over any reliable transport, including extensions to XMPP itself; however, such methods are out of scope for this specification.</t></list></t>
      <t>The following paragraphs describe the responsibilities of clients and servers on the network.</t>
      <t>A client is an entity that establishes an XML stream with a server by authenticating using the credentials of a registered account (via <xref target='sasl'>SASL negotiation</xref>) and that then completes <xref target='bind'>resource binding</xref> in order to enable delivery of XML stanzas between the server and the client over the negotiated stream.  The client then uses XMPP to communicate with its server, other clients, and any other entities on the network, where the server is responsible for delivering stanzas to other connected clients at the same server or routing them to remote servers.  Multiple clients can connect simultaneously to a server on behalf of the same registered account, where each client is differentiated by the resourcepart of an XMPP address (e.g., &lt;juliet@im.example.com/balcony&gt; vs. &lt;juliet@im.example.com/chamber&gt;), as defined under <xref target='XMPP-ADDR'/> and <xref target='bind'/>.</t>
      <t>A server is an entity whose primary responsibilities are to:</t>
      <t>
        <list style='symbols'>
          <t>Manage <xref target="streams">XML streams</xref> with connected clients and deliver <xref target="stanzas">XML stanzas</xref> to those clients over the negotiated streams; this includes responsibility for ensuring that a client authenticates with the server before being granted access to the XMPP network.<vspace blankLines='1'/></t>
          <t>Subject to local service policies on server-to-server communication, manage <xref target="streams">XML streams</xref> with remote servers and route <xref target="stanzas">XML stanzas</xref> to those servers over the negotiated streams.</t>
        </list>
      </t>
      <t>Depending on the application, the secondary responsibilities of an XMPP server can include:</t>
      <t>
        <list style='symbols'>
          <t>Storing data that is used by clients (e.g., contact lists for users of XMPP-based instant messaging and presence applications as defined in <xref target='XMPP-IM'/>); in this case, the relevant XML stanza is handled directly by the server itself on behalf of the client and is not routed to a remote server or delivered to a connected client.<vspace blankLines='1'/></t>
          <t>Hosting add-on services that also use XMPP as the basis for communication but that provide additional functionality beyond that defined in this document or in <xref target='XMPP-IM'/>; examples include multi-user conferencing services as specified in <xref target='XEP-0045'/> and publish-subscribe services as specified in <xref target='XEP-0060'/>.</t>
        </list>
      </t>
    </section>
  </section>

  <section title="TCP Binding" anchor="tcp">
    <section title="Scope" anchor="tcp-scope">
      <t>As XMPP is defined in this specification, an initiating entity (client or server) MUST open a Transmission Control Protocol <xref target='TCP'/> connection to the receiving entity (server) before it negotiates XML streams with the receiving entity.  The parties then maintain that TCP connection for as long as the XML streams are in use.  The rules specified in the following sections apply to the TCP binding.</t>
      <t><list style='empty'><t>Informational Note: There is no necessary coupling of XML streams to TCP, and other transports are possible.  For example, two entities could connect to each other by means of <xref target="HTTP"/> as specified in <xref target="XEP-0124"/> and <xref target='XEP-0206'/>.  However, this specification defines only a binding of XMPP to TCP.</t></list></t>
    </section>
    <section title="Resolution of Fully Qualified Domain Names" anchor="tcp-resolution">
      <t>Because XML streams are sent over TCP, the initiating entity needs to determine the IPv4 or IPv6 address (and port) of the receiving entity before it can attempt to open an XML stream.  Typically this is done by resolving the receiving entity's fully-qualified domain name or "FDQN" (see <xref target='DNS-CONCEPTS'/>).</t>
      <section title="Preferred Process: SRV Lookup" anchor="tcp-resolution-prefer">
        <t>The preferred process for FQDN resolution is to use <xref target='DNS-SRV'/> records as follows:</t>
        <t>
          <list style='numbers'>
            <t>The initiating entity constructs a DNS SRV query whose inputs are:
              <list style='symbols'>
                <t>a Service of "xmpp-client" (for client-to-server connections) or "xmpp-server" (for server-to-server connections)</t>
                <t>a Proto of "tcp"</t>
                <t>a Name corresponding to the "origin domain" <xref target='TLS-CERTS'/> of the XMPP service to which the initiating entity wishes to connect (e.g., "example.net" or "im.example.com")</t>
              </list>
            <vspace blankLines='1'/></t>
            <t>The result is a query such as "_xmpp-client._tcp.example.net." or "_xmpp-server._tcp.im.example.com.".<vspace blankLines='1'/></t>
            <t>
              If a response is received, it will contain one or more combinations of a port and FDQN, each of which is weighted and prioritized as described in <xref target="DNS-SRV"/>.
              <vspace blankLines='1'/>
              (However, if the result of the SRV lookup is a single resource record with a Target of ".", i.e. the root domain, then the initiating entity MUST abort SRV processing at this point because according to <xref target="DNS-SRV"/> such a Target "means that the service is decidedly not available at this domain".)<vspace blankLines='1'/>
            </t>
            <t>The initiating entity chooses at least one of the returned FQDNs to resolve (following the rules in <xref target="DNS-SRV"/>), which it does by performing DNS "A" or "AAAA" lookups on the FDQN; this will result in an IPv4 or IPv6 address.<vspace blankLines='1'/></t>
            <t>The initiating entity uses the IP address(es) from the successfully resolved FDQN (with the corresponding port number returned by the SRV lookup) as the connection address for the receiving entity.<vspace blankLines='1'/></t>
            <t>If the initiating entity fails to connect using that IP address but the "A" or "AAAA" lookups returned more than one IP address, then the initiating entity uses the next resolved IP address for that FDQN as the connection address.<vspace blankLines='1'/></t>
            <t>If the initiating entity fails to connect using all resolved IP addresses for a given FDQN, then it repeats the process of resolution and connection for the next FQDN returned by the SRV lookup based on the priority and weight as defined in <xref target='DNS-SRV'/>.<vspace blankLines='1'/></t>
            <t>If the initiating entity receives a response to its SRV query but it is not able to establish an XMPP connection using the data received in the response, it SHOULD NOT attempt the fallback process described in the next section (this helps to prevent a state mismatch between inbound and outbound connections).<vspace blankLines='1'/></t>
            <t>If the initiating entity does not receive a response to its SRV query, it SHOULD attempt the fallback process described in the next section.</t>
          </list>
        </t>
      </section>
      <section title="Fallback Processes" anchor="tcp-resolution-fallback">
         <t>The fallback process SHOULD be a normal "A" or "AAAA" address record resolution to determine the IPv4 or IPv6 address of the origin domain, where the port used is the "xmpp-client" port of 5222 for client-to-server connections or the "xmpp-server" port of 5269 for server-to-server connections (these are the default ports as registered with the IANA as described under <xref target='iana-ports'/>).</t>
         <t>If connections via TCP are unsuccessful, the initiating entity might attempt to find and use alternative connection methods such as the HTTP binding (see <xref target="XEP-0124"/> and <xref target='XEP-0206'/>), which might be discovered using <xref target='DNS-TXT'/> records as described in <xref target='XEP-0156'/>.</t>
      </section>
      <section title="When Not to Use SRV" anchor="tcp-resolution-srvnot">
        <t>If the initiating entity has been explicitly configured to associate a particular FQDN (and potentially port) with the origin domain of the receiving entity (say, to "hardcode" an association from an origin domain of example.net to a configured FQDN of apps.example.com), the initiating entity is encouraged to use the configured name instead of performing the preferred SRV resolution process on the origin domain.</t>
      </section>
      <section title="Use of SRV Records with Add-On Services" anchor="tcp-resolution-srvadd">
        <t>Many XMPP servers are implemented in such a way that they can host add-on services (beyond those defined in this specification and <xref target='XMPP-IM'/>) at DNS domain names that typically are "subdomains" of the main XMPP service (e.g., conference.example.net for a <xref target='XEP-0045'/> service associated with the example.net XMPP service) or "subdomains" of the first-level domain of the underlying service (e.g., muc.example.com for a <xref target='XEP-0045'/> service associated with the im.example.com XMPP service).  If an entity associated with a remote XMPP server wishes to communicate with such an add-on service, it would generate an appropriate XML stanza and the remote server would attempt to resolve the add-on service's DNS domain name via an SRV lookup on resource records such as "_xmpp-server._tcp.conference.example.net." or "_xmpp-server._tcp.muc.example.com.".  Therefore if the administrators of an XMPP service wish to enable entities associated with remote servers to access such add-on services, they need to advertise the appropriate "_xmpp-server" SRV records in addition to the "_xmpp-server" record for their main XMPP service.  In case SRV records are not available, the fallback methods described under <xref target='tcp-resolution-fallback'/> can be used to resolve the DNS domain names of add-on services.</t>
      </section>
    </section>
    <section title="Reconnection" anchor="tcp-reconnect">
      <t>It can happen that an XMPP server goes offline unexpectedly while servicing TCP connections from connected clients and remote servers.  Because the number of such connections can be quite large, the reconnection algorithm employed by entities that seek to reconnect can have a significant impact on software performance and network congestion.  If an entity chooses to reconnect, it:</t>
      <t>
        <list style='symbols'>
          <t>SHOULD set the number of seconds that expire before reconnecting to an unpredictable number between 0 and 60 (this helps to ensure that not all entities attempt to reconnect at exactly the same number of seconds after being disconnected).<vspace blankLines='1'/></t>
          <t>SHOULD back off increasingly on the time between subsequent reconnection attempts (e.g., in accordance with "truncated binary exponential backoff" as described in <xref target='ETHERNET'/>) if the first reconnection attempt does not succeed.</t>
        </list>
      </t>
      <t>It is RECOMMENDED to make use of TLS session resumption <xref target='TLS-RESUME'/> when reconnecting.  A future version of this document, or a separate specification, might provide more detailed guidelines regarding methods for speeding the reconnection process.</t>
    </section>
    <section title="Reliability" anchor="streams-reliability">
      <t>The use of long-lived TCP connections in XMPP implies that the sending of XML stanzas over XML streams can be unreliable, since the parties to a long-lived TCP connection might not discover a connectivity disruption in a timely manner.  At the XMPP application layer, long connectivity disruptions can result in undelivered stanzas.  Although the core XMPP technology defined in this specification does not contain features to overcome this lack of reliability, there exist XMPP extensions for doing so (e.g., <xref target='XEP-0198'/>).</t>
    </section>
  </section>

  <section title="XML Streams" anchor="streams">

    <section title="Stream Fundamentals" anchor="streams-fundamentals">
      <t>Two fundamental concepts make possible the rapid, asynchronous exchange of relatively small payloads of structured information between XMPP entities: XML streams and XML stanzas.  These terms are defined as follows.</t>
      <t>
        <list style='hanging'>
          <t hangText="Definition of XML Stream:">An XML stream is a container for the exchange of XML elements between any two entities over a network.  The start of an XML stream is denoted unambiguously by an opening "stream header" (i.e., an XML &lt;stream&gt; tag with appropriate attributes and namespace declarations), while the end of the XML stream is denoted unambiguously by a closing XML &lt;/stream&gt; tag.  During the life of the stream, the entity that initiated it can send an unbounded number of XML elements over the stream, either elements used to negotiate the stream (e.g., to complete <xref target='tls'>TLS negotiation</xref> or <xref target='sasl'>SASL negotiation</xref>) or XML stanzas.  The "initial stream" is negotiated from the initiating entity (typically a client or server) to the receiving entity (typically a server), and can be seen as corresponding to the initiating entity's "connection to" or "session with" the receiving entity.  The initial stream enables unidirectional communication from the initiating entity to the receiving entity; in order to enable exchange of stanzas from the receiving entity to the initiating entity, the receiving entity MUST negotiate a stream in the opposite direction (the "response stream").<vspace blankLines='1'/></t>
          <t hangText="Definition of XML Stanza:">An XML stanza is the basic unit of meaning in XMPP.  A stanza is a first-level element (at depth=1 of the stream) whose element name is "message", "presence", or "iq" and whose qualifying namespace is 'jabber:client' or 'jabber:server'.  By contrast, a first-level element qualified by any other namespace is not an XML stanza (stream errors, stream features, TLS-related elements, SASL-related elements, etc.), nor is a &lt;message/&gt;, &lt;presence/&gt;, or &lt;iq/&gt; element that is qualified by the 'jabber:client' or 'jabber:server' namespace but that occurs at a depth other than one (e.g., a &lt;message/&gt; element contained within an extension element (<xref target='stanzas-extended'/>) for reporting purposes), nor is a &lt;message/&gt;, &lt;presence/&gt;, or &lt;iq/&gt; element that is qualified by a namespace other than 'jabber:client' or 'jabber:server'.  An XML stanza typically contains one or more child elements (with accompanying attributes, elements, and XML character data) as necessary in order to convey the desired information, which MAY be qualified by any XML namespace (see <xref target='XML-NAMES'/> as well as <xref target='stanzas-extended'/> in this specification).</t>
        </list>
      </t>
      <t>There are three kinds of stanzas: message, presence, and IQ (short for "Info/Query").  These stanza types provide three different communication primitives: a "push" mechanism for generalized messaging, a specialized "publish-subscribe" mechanism for broadcasting information about network availability, and a "request-response" mechanism for more structured exchanges of data (similar to <xref target='HTTP'/>).  Further explanations are provided under <xref target='stanzas-semantics-message'/>, <xref target='stanzas-semantics-presence'/>, and <xref target='stanzas-semantics-iq'/>, respectively.</t>
      <t>Consider the example of a client's connection to a server.  The client initiates an XML stream by sending a stream header to the server, preferably preceded by an XML declaration specifying the XML version and the character encoding supported (see <xref target="xml-declaration"/> and <xref target="xml-encoding"/>).  Subject to local policies and service provisioning, the server then replies with a second XML stream back to the client, again preferably preceded by an XML declaration.  Once the client has completed <xref target='sasl'>SASL negotiation</xref> and <xref target='bind'>resource binding</xref>, the client can send an unbounded number of XML stanzas over the stream.  When the client desires to close the stream, it simply sends a closing &lt;/stream&gt; tag to the server  as further described under <xref target='streams-close'/>.</t>
      <t>In essence, then, one XML stream functions as an envelope for the XML stanzas sent during a session and another XML stream functions as an envelope for the XML stanzas received during a session.  We can represent this in a simplistic fashion as follows.</t>
      <figure anchor='figure-2' title='A Simplistic View of Two Streams'>
        <artwork><![CDATA[
+--------------------+--------------------+
| INITIAL STREAM     |  RESPONSE STREAM   |
+--------------------+--------------------+
| <stream>           |                    |
|--------------------|--------------------|
|                    | <stream>           |
|--------------------|--------------------|
| <presence>         |                    |
|   <show/>          |                    |
| </presence>        |                    |
|--------------------|--------------------|
| <message to='foo'> |                    |
|   <body/>          |                    |
| </message>         |                    |
|--------------------|--------------------|
| <iq to='bar'       |                    |
|     type='get'>    |                    |
|   <query/>         |                    |
| </iq>              |                    |
|--------------------|--------------------|
|                    | <iq from='bar'     |
|                    |     type='result'> |
|                    |   <query/>         |
|                    | </iq>              |
|--------------------|--------------------|
| [ ... ]            |                    |
|--------------------|--------------------|
|                    | [ ... ]            |
|--------------------|--------------------|
| </stream>          |                    |
|--------------------|--------------------|
|                    | </stream>          |
+--------------------+--------------------+
        ]]></artwork>
      </figure>
      <t>Those who are accustomed to thinking of XML in a document-centric manner might find the following analogies useful:</t>
      <t>
        <list style='symbols'>
          <t>The two XML streams are like two "documents" (matching the "document" production from <xref target='XML'/>) that are built up through the accumulation of XML stanzas.<vspace blankLines='1'/></t>
          <t>The root &lt;stream/&gt; element is like the "document entity" for each "document" (as described in Section 4.8 of <xref target='XML'/>).<vspace blankLines='1'/></t>
          <t>The XML stanzas sent over the streams are like "fragments" of the "documents" (as described in <xref target='XML-FRAG'/>).</t>
        </list>
      </t>
      <t>However, these descriptions are merely analogies, because XMPP does not deal in documents and fragments but in streams and stanzas.</t>
      <t>The remainder of this section defines the following aspects of XML streams (along with related topics):</t>
      <t>
        <list style='symbols'>
          <t>How to open a stream (<xref target='streams-open'/>)</t>
          <t>The stream negotation process (<xref target='streams-negotiation'/>)</t>
          <t>How to close a stream (<xref target='streams-close'/>)</t>
          <t>The directionality of XML streams (<xref target='streams-direction'/>)</t>
          <t>How to handle peers that are silent (<xref target='streams-silence'/>)</t>
          <t>The XML attributes of a stream (<xref target='streams-attr'/>)</t>
          <t>The XML namespaces of a stream (<xref target='streams-ns'/>)</t>
          <t>Error handling related to XML streams (<xref target='streams-error'/>)</t>
        </list>
      </t>
    </section>

    <section title="Opening a Stream" anchor="streams-open">
      <t>After connecting to the appropriate IP address and port of the receiving entity, the initiating entity opens a stream by sending a stream header (the "initial stream header") to the receiving entity.</t>
      <figure>
        <artwork><![CDATA[
I: <?xml version='1.0'?>
   <stream:stream
       from='juliet@im.example.com'
       to='im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>
        ]]></artwork>
      </figure>
      <t>The receiving entity then replies by sending a stream header of its own (the "response stream header") to the initiating entity.</t>
      <figure>
        <artwork><![CDATA[
R: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='++TR84Sm6A3hnt3Q065SnAbbk3Y='
       to='juliet@im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>
        ]]></artwork>
      </figure>
      <t>The entities can then proceed with the remainder of the stream negotiation process.</t>
    </section>

    <section title="Stream Negotiation" anchor="streams-negotiation">
      <section title="Basic Concepts" anchor="streams-negotiation-basics">
        <t>Because the receiving entity for a stream acts as a gatekeeper to the domains it services, it imposes certain conditions for connecting as a client or as a peer server.  At a minimum, the initiating entity needs to authenticate with the receiving entity before it is allowed to send stanzas to the receiving entity (for client-to-server streams this means using SASL as described under <xref target='sasl'/>).  However, the receiving entity can consider conditions other than authentication to be mandatory-to-negotiate, such as encryption using TLS as described under <xref target='tls'/>.  The receiving entity informs the initiating entity about such conditions by communicating "stream features": the set of particular protocol interactions that the initiating entity needs to complete before the receiving entity will accept XML stanzas from the initiating entity, as well as any protocol interactions that are voluntary-to-negotiate but that might improve the handling of an XML stream (e.g., establishment of application-layer compression as described in <xref target='XEP-0138'/>).</t>
        <t>The existence of conditions for connecting implies that streams need to be negotiated.  The order of layers (TCP, then TLS, then SASL, then XMPP as described under <xref target='security-layers'/>) implies that stream negotiation is a multi-stage process.  Further structure is imposed by two factors: (1) a given stream feature might be offered only to certain entities or only after certain other features have been negotiated (e.g., resource binding is offered only after SASL authentication), and (2) stream features can be either mandatory-to-negotiate or voluntary-to-negotiate.  Finally, for security reasons the parties to a stream need to discard knowledge that they gained during the negotiation process after successfully completing the protocol interactions defined for certain features (e.g., TLS in all cases and SASL in the case when a security layer might be established, as defined in the specification for the relevant SASL mechanism); this is done by flushing the old stream context and exchanging new stream headers over the existing TCP connection.</t>
      </section>
      <section title="Stream Features Format" anchor="streams-negotiation-features">
        <t>If the initiating entity includes in the initial stream header the 'version' attribute set to a value of at least "1.0" (see <xref target='streams-attr-version'/>), after sending the response stream header the receiving entity MUST send a &lt;features/&gt; child element (typically prefixed by the stream namespace prefix as described under <xref target='streams-ns-declarations'/>) to the initiating entity in order to announce any conditions for continuation of the stream negotiation process.  Each condition takes the form of a child element of the &lt;features/&gt; element, qualified by a namespace that is different from the stream namespace and the content namespace.  The &lt;features/&gt; element can contain one child, contain multiple children, or be empty.</t>
        <t><list style='empty'><t>Implementation Note: The order of child elements contained in any given &lt;features/&gt; element is not significant.</t></list></t>
        <t>If a particular stream feature is or can be mandatory-to-negotiate, the definition of that feature needs to do one of the following:</t>
        <t>
          <list style='numbers'>
            <t>Declare that the feature is always mandatory-to-negotiate (e.g., this is true of resource binding for XMPP clients); or<vspace blankLines='1'/></t>
            <t>Specify a way for the receiving entity to flag the feature as mandatory-to-negotiate for this interaction (e.g., for STARTTLS, this is done by including an empty &lt;required/&gt; element in the advertisement for that stream feature, but that is not a generic format for all stream features); it is RECOMMENDED that stream feature definitions for new mandatory-to-negotiate features do so by including an empty &lt;required/&gt; element as is done for STARTTLS.</t>
          </list>
        </t>
        <t><list style='empty'><t>Informational Note: Because there is no generic format for indicating that a feature is mandatory-to-negotiate, it is possible that a feature which is not understood by the initiating entity might be considered mandatory-to-negotiate by the receiving entity, resulting in failure of the stream negotiation process.  Although such an outcome would be undesirable, the working group deemed it rare enough that a generic format was not needed.</t></list></t>
        <t>For security reasons, certain stream features necessitate the initiating entity to send a new initial stream header upon successful negotiation of the feature (e.g., TLS in all cases and SASL in the case when a security layer might be established).  If this is true of a given stream feature, the definition of that feature needs to specify that a stream restart is expected after negotiation of the feature.</t>
        <t>A &lt;features/&gt; element that contains at least one mandatory-to-negotiate feature indicates that the stream negotiation is not complete and that the initiating entity MUST negotiate further features.</t>
        <figure>
          <artwork><![CDATA[
R: <stream:features>
     <starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'>
       <required/>
     </starttls>
   </stream:features>
          ]]></artwork>
        </figure>
        <t>A &lt;features/&gt; element MAY contain more than one mandatory-to-negotiate feature.  This means that the initiating entity can choose among the mandatory-to-negotiate features at this stage of the stream negotiation process.  As an example, perhaps a future technology will perform roughly the same function as TLS, so the receiving entity might advertise support for both TLS and the future technology at the same stage of the stream negotiation process.  However, this applies only at a given stage of the stream negotiation process and does not apply to features that are mandatory-to-negotiate at different stages (e.g., the receiving entity would not advertise both STARTTLS and SASL as mandatory-to-negotiate, or both SASL and resource binding as mandatory-to-negotiate, because TLS would need to be negotiated before SASL and because SASL would need to be negotiated before resource binding).</t>
        <t>A &lt;features/&gt; element that contains both mandatory-to-negotiate and voluntary-to-negotiate features indicates that the negotiation is not complete but that the initiating entity MAY complete the voluntary-to-negotiate feature(s) before it attempts to negotiate the mandatory-to-negotiate feature(s).</t>
        <figure>
          <artwork><![CDATA[
R: <stream:features>
     <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'/>
     <compression xmlns='http://jabber.org/features/compress'>
       <method>zlib</method>
       <method>lzw</method>
     </compression>
   </stream:features>
          ]]></artwork>
        </figure>
        <t>A &lt;features/&gt; element that contains only voluntary-to-negotiate features indicates that the stream negotiation is complete and that the initiating entity is cleared to send XML stanzas, but that the initiating entity MAY negotiate further features if desired.</t>
        <figure>
          <artwork><![CDATA[
R: <stream:features>
     <compression xmlns='http://jabber.org/features/compress'>
       <method>zlib</method>
       <method>lzw</method>
     </compression>
   </stream:features>
          ]]></artwork>
        </figure>
        <t>An empty &lt;features/&gt; element indicates that the stream negotiation is complete and that the initiating entity is cleared to send XML stanzas.</t>
        <figure>
          <artwork><![CDATA[
R: <stream:features/>
          ]]></artwork>
        </figure>
      </section>
      <section title="Restarts" anchor="streams-negotiation-restart">
        <t>On successful negotiation of a feature that necessitates a stream restart, both parties MUST consider the previous stream to be replaced but MUST NOT send a closing &lt;/stream&gt; tag and MUST NOT terminate the underlying TCP connection; instead, the parties MUST reuse the existing connection, which might be in a new state (e.g., encrypted as a result of TLS negotiation).  The initiating entity then MUST send a new initial stream header, which SHOULD be preceded by an XML declaration as described under <xref target='xml-declaration'/>.  When the receiving entity receives the new initial stream header, it MUST generate a new stream ID (instead of re-using the old stream ID) before sending a new response stream header (which SHOULD be preceded by an XML declaration as described under <xref target='xml-declaration'/>).</t>
      </section>
      <section title="Resending Features" anchor="streams-negotiation-resend">
        <t>The receiving entity MUST send an updated list of stream features to the initiating entity after a stream restart.  The list of updated features MAY be empty if there are no further features to be advertised or MAY include any combination of features.</t>
      </section>
      <section title="Completion of Stream Negotiation" anchor="streams-negotiation-complete">
        <t>The receiving entity indicates completion of the stream negotiation process by sending to the initiating entity either an empty &lt;features/&gt; element or a &lt;features/&gt; element that contains only voluntary-to-negotiate features.  After doing so, the receiving entity MAY send an empty &lt;features/&gt; element (e.g., after negotiation of such voluntary-to-negotiate features) but MUST NOT send additional stream features to the initiating entity (if the receiving entity has new features to offer, preferably limited to mandatory-to-negotiate or security-critical features, it can simply close the stream with a &lt;reset/&gt; stream error (<xref target='streams-error-conditions-reset'/>) and then advertise the new features when the initiating entity reconnects, preferably closing existing streams in a staggered way so that not all of the initiating entities reconnect at once).  Once stream negotiation is complete, the initiating entity is cleared to send XML stanzas over the stream for as long as the stream is maintained by both parties.</t>
        <t><list style='empty'><t>Informational Note: Resource binding as specified under <xref target='bind'/> is an historical exception to the foregoing rule, since it is mandatory-to-negotiate for clients but uses XML stanzas for negotiation purposes.</t></list></t>
        <t>The initiating entity MUST NOT attempt to send <xref target="stanzas">XML stanzas</xref> to entities other than itself (i.e., the client's connected resource or any other authenticated resource of the client's account) or the server to which it is connected until stream negotiation has been completed.  Even if the initiating entity does attempt to do so, the receiving entity MUST NOT accept such stanzas and MUST close the stream with a &lt;not-authorized/&gt; stream error (<xref target='streams-error-conditions-not-authorized'/>).  This rule applies to XML stanzas only (i.e., &lt;message/&gt;, &lt;presence/&gt;, and &lt;iq/&gt; elements qualified by the content namespace) and not to XML elements used for stream negotiation (e.g., elements used to complete <xref target='tls'>TLS negotiation</xref> or <xref target='sasl'>SASL negotiation</xref>).</t>
      </section>
      <section title="Determination of Addresses" anchor="streams-negotiation-address">
        <t>After the parties to an XML stream have completed the appropriate aspects of stream negotiation, the receiving entity for a stream MUST determine the initiating entity's JID.</t>
        <t>For client-to-server communication, both <xref target='sasl'>SASL negotiation</xref> and <xref target="bind">resource binding</xref> MUST be completed before the server can determine the client's address.  The client's bare JID (&lt;localpart@domainpart&gt;) MUST be the authorization identity (as defined by <xref target="SASL"/>), either (1) as directly communicated by the client during <xref target='sasl'>SASL negotiation</xref> or (2) as derived by the server from the authentication identity if no authorization identity was specified during SASL negotiation.  The resourcepart of the full JID (&lt;localpart@domainpart/resourcepart&gt;) MUST be the resource negotiated by the client and server during <xref target="bind">resource binding</xref>.  A client MUST NOT attempt to guess at its JID but instead MUST consider its JID to be whatever the server returns to it during resource binding.  The server MUST ensure that the resulting JID (including localpart, domainpart, resourcepart, and separator characters) conforms to the canonical format for XMPP addresses defined in <xref target='XMPP-ADDR'/>; to meet this restriction, the server MAY replace the JID sent by the client with the canonicalized JID as determined by the server and communicate that JID to the client during resource binding.</t>
        <t>For server-to-server communication, the initiating server's bare JID (&lt;domainpart&gt;) MUST be the authorization identity (as defined by <xref target="SASL"/>), either (1) as directly communicated by the initiating server during <xref target='sasl'>SASL negotiation</xref> or (2) as derived by the receiving server from the authentication identity if no authorization identity was specified during SASL negotiation; in the absence of SASL negotiation, the receiving server MAY consider the authorization identity to be an identity negotiated within the relevant verification protocol (e.g., the 'from' attribute of the &lt;result/&gt; element in Server Dialback <xref target='XEP-0220'/>).</t>
        <t><list style='empty'><t>Security Warning: Because it is possible for a third party to tamper with information that is sent over the stream before a security layer such as TLS is successfully negotiated, it is advisable for the receiving server to treat any such unprotected information with caution; this applies especially to the 'from' and 'to' addresses on the first initial stream header sent by the initiating entity.</t></list></t>
      </section>

      <section title="Flow Chart" anchor="streams-negotiation-flowchart">
        <t>We summarize the foregoing rules in the following non-normative flow chart for the stream negotiation process, presented from the perspective of the initiating entity.</t>
        <figure anchor='figure-3' title='Stream Negotiation Flow Chart'>
          <artwork><![CDATA[
                +---------------------+
                | open TCP connection |
                +---------------------+
                           |
                           v
                    +---------------+
                    | send initial  |<-------------------------+
                    | stream header |                          ^
                    +---------------+                          |
                           |                                   |
                           v                                   |
                   +------------------+                        |
                   | receive response |                        |
                   | stream header    |                        |
                   +------------------+                        |
                           |                                   |
                           v                                   |
                    +----------------+                         |
                    | receive stream |                         |
+------------------>| features       |                         |
^   {OPTIONAL}      +----------------+                         |
|                          |                                   |
|                          v                                   |
|       +<-----------------+                                   |
|       |                                                      |
|    {empty?} ----> {all voluntary?} ----> {some mandatory?}   |
|       |      no          |          no         |             |
|       | yes              | yes                 | yes         |
|       |                  v                     v             |
|       |           +---------------+    +----------------+    |
|       |           | MAY negotiate |    | MUST negotiate |    |
|       |           | any or none   |    | one feature    |    |
|       |           +---------------+    +----------------+    |
|       v                  |                     |             |
|   +---------+            v                     |             |
|   |  DONE   |<----- {negotiate?}               |             |
|   +---------+   no       |                     |             |
|                     yes  |                     |             |
|                          v                     v             |
|                          +--------->+<---------+             |
|                                     |                        |
|                                     v                        |
+<-------------------------- {restart mandatory?} ------------>+
               no                                     yes

          ]]></artwork>
        </figure>
      </section>
    </section>

    <section title="Closing a Stream" anchor="streams-close">
      <t>An XML stream from one entity to another can be closed at any time, either because a specific stream error (<xref target='streams-error'/>) has occurred or in the absence of an error (e.g., when a client simply ends its session).</t>
      <t>A stream is closed by sending a closing &lt;/stream&gt; tag.</t>
      <figure>
        <artwork><![CDATA[
E: </stream:stream>
        ]]></artwork>
      </figure>
      <t>If the parties are using either two streams over a single TCP connection or two streams over two TCP connections, the entity that sends the closing stream tag MUST behave as follows:</t>
      <t>
        <list style='numbers'>
          <t>Wait for the other party to also close its outbound stream before terminating the underlying TCP connection(s); this gives the other party an opportunity to finish transmitting any outbound data to the closing entity before the TCP connection(s) is terminated.<vspace blankLines='1'/></t>
          <t>Refrain from sending any further data over its outbound stream to the other entity, but continue to process data received from the other entity (and, if necessary, process such data).<vspace blankLines='1'/></t>
          <t>Consider both streams to be void if the other party does not send its closing stream tag within a reasonable amount of time (where the definition of "reasonable" is a matter of implementation or deployment).<vspace blankLines='1'/></t>
          <t>After receiving a reciprocal closing stream tag from the other party or waiting a reasonable amount of time with no response, terminate the underlying TCP connection(s).</t>
        </list>
      </t>
      <t><list style='empty'><t>Security Warning: In accordance with Section 7.2.1 of <xref target='TLS'/>, to help prevent a truncation attack the party that is closing the stream MUST send a TLS close_notify alert and MUST receive a responding close_notify alert from the other party before terminating the underlying TCP connection(s).</t></list></t>
      <t>If the parties are using multiple streams over multiple TCP connections, there is no defined pairing of streams and therefore the behavior is a matter for implementation.</t>
    </section>

    <section title="Directionality" anchor="streams-direction">
      <t>An XML stream is always unidirectional, by which is meant that XML stanzas can be sent in only one direction over the stream (either from the initiating entity to the receiving entity or from the receiving entity to the initiating entity).</t>
      <t>Depending on the type of session that has been negotiated and the nature of the entities involved, the entities might use:</t>
      <t>
        <list style='symbols'>
          <t>Two streams over a single TCP connection, where the security context negotiated for the first stream is applied to the second stream.  This is typical for client-to-server sessions, and a server MUST allow a client to use the same TCP connection for both streams.<vspace blankLines='1'/></t>
          <t>Two streams over two TCP connections, where each stream is separately secured.  In this approach, one TCP connection is used for the stream in which stanzas are sent from the initiating entity to the receiving entity, and the other TCP connection is used for the stream in which stanzas are sent from the receiving entity to the initiating entity.  This is typical for server-to-server sessions.<vspace blankLines='1'/></t>
          <t>Multiple streams over two or more TCP connections, where each stream is separately secured.  This approach is sometimes used for server-to-server communication between two large XMPP service providers; however, this can make it difficult to maintain coherence of data received over multiple streams in situations described under <xref target='rules-order'/>, which is why a server MAY close the stream with a &lt;conflict&gt; stream error (<xref target='streams-error-conditions-conflict'/>) if a remote server attempts to negotiate more than one stream (as described under <xref target="streams-error-conditions-conflict"/>).</t>
        </list>
      </t>
      <t>This concept of directionality applies only to stanzas and explicitly does not apply to first-level children of the stream root that are used to bootstrap or manage the stream (e.g., first-level elements used for TLS negotiation, SASL negotiation, Server Dialback <xref target='XEP-0220'/>, and Stream Management <xref target='XEP-0198'/>).</t>
      <t>The foregoing considerations imply that while completing <xref target='tls'>STARTTLS negotiation</xref> and <xref target='sasl'>SASL negotiation</xref> two servers would use one TCP connection, but after the stream negotiation process is done that original TCP connection would be used only for the initiating server to send XML stanzas to the receiving server.  In order for the receiving server to send XML stanzas to the initiating server, the receiving server would need to reverse the roles and negotiate an XML stream from the receiving server to the initiating server over a separate TCP connection.  This separate TCP connection is then secured using a new round of TLS and/or SASL negotiation.</t>
      <t><list style='empty'><t>Implementation Note: For historical reasons, a server-to-server session always uses two TCP connections.  While that approach remains the standard behavior described in this document, extensions such as <xref target='XEP-0288'/> enable servers to negotiate the use of a single TCP connection for bidirectional stanza exchange.</t></list></t>
      <t><list style='empty'><t>Informational Note: Although XMPP developers sometimes apply the terms "unidirectional" and "bidirectional" to the underlying TCP connection (e.g., calling the TCP connection for a client-to-server session "bidirectional" and the TCP connection for a server-to-server session "unidirectional"), strictly speaking a stream is always unidirectional (because the initiating entity and receiving entity always have a minimum of two streams, one in each direction) and a TCP connection is always bidirectional (because TCP traffic can be sent in both directions).  Directionality applies to the application-layer traffic sent over the TCP connection, not to the transport-layer traffic sent over the TCP connection itself.</t></list></t>
    </section>

    <section title="Handling of Silent Peers" anchor="streams-silence">
      <t>When an entity that is a party to a stream has not received any XMPP traffic from its stream peer for some period of time, the peer might appear to be silent.  There are several reasons why this might happen:</t>
      <t>
        <list style='numbers'>
          <t>The underlying TCP connection is dead.<vspace blankLines='1'/></t>
          <t>The XML stream is broken despite the fact that the underlying TCP connection is alive.<vspace blankLines='1'/></t>
          <t>The peer is idle and simply has not sent any XMPP traffic over its XML stream to the entity.</t>
        </list>
      </t>
      <t>These three conditions are best handled separately, as described in the following sections.</t>
      <t><list style='empty'><t>Implementation Note:  For the purpose of handling silent peers, we treat a two unidirectional TCP connections as conceptually equivalent to a single bidirectional TCP connection (see <xref target='streams-direction'/>); however, implementers need to be aware that, in the case of two unidirectional TCP connections, responses to traffic at the XMPP application layer will come back from the peer on the second TCP connection.  In addition, the use of multiple streams in each direction (which is a somewhat frequent deployment choice for server-to-server connectivity among large XMPP service providers) further complicates application-level checking of XMPP streams and their underlying TCP connections, because there is no necessary correlation between any given initial stream and any given response stream.</t></list></t>
      <section title="Dead Connection" anchor="streams-silence-dead">
        <t>If the underlying TCP connection is dead, stream-level checks (e.g., <xref target="XEP-0199"/> and <xref target="XEP-0198"/>) are ineffective.  Therefore it is unnecessary to close the stream with or without an error, and it is appropriate instead to simply terminate the TCP connection.</t>
        <t>One common method for checking the TCP connection is to send a space character (U+0020) between XML stanzas, which is allowed for XML streams as described under <xref target='xml-whitespace'/>; the sending of such a space character is properly called a "whitespace keepalive" (the term "whitespace ping" is often used, despite the fact that it is not a ping since no "pong" is possible).  However, this is not allowed during TLS negotiation or SASL negotiation, as described under <xref target='tls-rules-data'/> and <xref target='sasl-rules-data'/>.</t>
      </section>
      <section title="Broken Stream" anchor="streams-silence-broken">
        <t>Even if the underlying TCP connection is alive, the peer might never respond to XMPP traffic that the entity sends, whether normal stanzas or specialized stream-checking traffic such as the application-level pings defined in <xref target="XEP-0199"/> or the more comprehensive Stream Management protocol defined in <xref target="XEP-0198"/>.  In this case, it is appropriate for the entity to close a broken stream with a &lt;connection-timeout/&gt; stream error (<xref target='streams-error-conditions-connection-timeout'/>).</t>
      </section>
      <section title="Idle Peer" anchor="streams-silence-idle">
        <t>Even if the underlying TCP connection is alive and the stream is not broken, the peer might have sent no stanzas for a certain period of time.  In this case, the peer itself MAY close the stream (as described under <xref target='streams-close'/>) rather than leaving an unused stream open.  If the idle peer does not close the stream, the other party MAY either close the stream using the handshake described under <xref target='streams-close'/> or close the stream with a stream error (e.g., &lt;resource-constraint/&gt; (<xref target='streams-error-conditions-resource-constraint'/>) if the entity has reached a limit on the number of open TCP connections or &lt;policy-violation/&gt; (<xref target='streams-error-conditions-policy-violation'/>) if the connection has exceeded a local timeout policy).  However, consistent with the order of layers (specified under <xref target='security-layers'/>), the other party is advised to verify that the underlying TCP connection is alive and the stream is unbroken (as described above) before concluding that the peer is idle.  Furthermore, it is preferable to be liberal in accepting idle peers, since experience has shown that doing so improves the reliability of communication over XMPP networks and that it is typically more efficient to maintain a stream between two servers than to aggressively timeout such a stream.</t>
      </section>
      <section title="Use of Checking Methods" anchor="streams-silence-check">
        <t>Implementers are advised to support whichever stream-checking and connection-checking methods they deem appropriate, but to carefully weigh the network impact of such methods against the benefits of discovering broken streams and dead TCP connections in a timely manner.  The length of time between the use of any particular check is very much a matter of local service policy and depends strongly on the network environment and usage scenarios of a given deployment and connection type; at the time of writing, it is RECOMMENDED that any such check be performed not more than once every 5 minutes and that, ideally, such checks will be initiated by clients rather than servers.  Those who implement XMPP software and deploy XMPP services are encouraged to seek additional advice regarding appropriate timing of stream-checking and connection-checking methods, particularly when power-constrained devices are being used (e.g., in mobile environments).</t>
      </section>
    </section>

    <section title="Stream Attributes" anchor="streams-attr">
      <t>The attributes of the root &lt;stream/&gt; element are defined in the following sections.</t>
      <t><list style='empty'><t>Security Warning: Until and unless the confidentiality and integrity of the stream are protected via TLS as described under <xref target='tls'/> or an equivalent security layer (such as the SASL GSSAPI mechanism), the attributes provided in a stream header could be tampered with by an attacker.</t></list></t>
      <t><list style='empty'><t>Implementation Note: The attributes of the root &lt;stream/&gt; element are not prepended by a namespace prefix because, as explained in <xref target="XML-NAMES"/>, "[d]efault namespace declarations do not apply directly to attribute names; the interpretation of unprefixed attributes is determined by the element on which they appear."</t></list></t>
      <section title='from' anchor='streams-attr-from'>
        <t>The 'from' attribute specifies an XMPP identity of the entity sending the stream element.</t>
        <t>For initial stream headers in client-to-server communication, the 'from' attribute is the XMPP identity of the principal controlling the client, i.e., a JID of the form &lt;localpart@domainpart&gt;.  The client might not know the XMPP identity, e.g., because the XMPP identity is assigned at a level other than the XMPP application layer (as in the General Security Service Application Program Interface <xref target='GSS-API'/>) or is derived by the server from information provided by the client (as in some deployments of end-user certificates with the SASL EXTERNAL mechanism).  Furthermore, if the client considers the XMPP identity to be private information then it is advised not to include a 'from' attribute before the confidentiality and integrity of the stream are protected via TLS or an equivalent security layer.  However, if the client knows the XMPP identity then it SHOULD include the 'from' attribute after the confidentiality and integrity of the stream are protected via TLS or an equivalent security layer.</t> 
        <figure>
          <artwork><![CDATA[
I: <?xml version='1.0'?>
   <stream:stream
       from='juliet@im.example.com'
       to='im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <t>For initial stream headers in server-to-server communication, the 'from' attribute is one of the configured FQDNs of the server, i.e., a JID of the form &lt;domainpart&gt;.  The initiating server might have more than one XMPP identity, e.g., in the case of a server that provides virtual hosting, so it will need to choose an identity that is associated with this output stream (e.g., based on the 'to' attribute of the stanza that triggered the stream negotiation attempt).  Because a server is a "public entity" on the XMPP network, it MUST include the 'from' attribute after the confidentiality and integrity of the stream are protected via TLS or an equivalent security layer.</t> 
        <figure>
          <artwork><![CDATA[
I: <?xml version='1.0'?>
   <stream:stream
       from='example.net'
       to='im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:server'
       xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <t>For response stream headers in both client-to-server and server-to-server communication, the receiving entity MUST include the 'from' attribute and MUST set its value to one of the receiving entity's FQDNs (which MAY be an FQDN other than that specified in the 'to' attribute of the initial stream header, as described under <xref target='streams-error-rules-host'/> and <xref target='streams-error-conditions-host-unknown'/>).</t>
        <figure>
          <artwork><![CDATA[
R: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='++TR84Sm6A3hnt3Q065SnAbbk3Y='
       to='juliet@im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <t>Whether or not the 'from' attribute is included, each entity MUST verify the identity of the other entity before exchanging XML stanzas with it, as described under <xref target='security-authentication'/>.</t>
        <t><list style='empty'><t>Interoperability Note: It is possible that implementations based on <xref target='RFC3920'/> will not include the 'from' address on any stream headers (even ones whose confidentiality and integrity are protected); an entity SHOULD be liberal in accepting such stream headers.</t></list></t>
      </section>
      <section title='to' anchor='streams-attr-to'>
        <t>For initial stream headers in both client-to-server and server-to-server communication, the initiating entity MUST include the 'to' attribute and MUST set its value to a domainpart that the initiating entity knows or expects the receiving entity to service.  (The same information can be provided in other ways, such as a Server Name Indication during TLS negotiation as described in <xref target='TLS-EXT'/>.)</t>
        <figure>
          <artwork><![CDATA[
I: <?xml version='1.0'?>
   <stream:stream
       from='juliet@im.example.com'
       to='im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <t>For response stream headers in client-to-server communication, if the client included a 'from' attribute in the initial stream header then the server MUST include a 'to' attribute in the response stream header and MUST set its value to the bare JID specified in the 'from' attribute of the initial stream header.  If the client did not include a 'from' attribute in the initial stream header then the server MUST NOT include a 'to' attribute in the response stream header.</t>
        <figure>
          <artwork><![CDATA[
R: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='++TR84Sm6A3hnt3Q065SnAbbk3Y='
       to='juliet@im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <t>For response stream headers in server-to-server communication, the receiving entity MUST include a 'to' attribute in the response stream header and MUST set its value to the domainpart specified in the 'from' attribute of the initial stream header.</t>
        <figure>
          <artwork><![CDATA[
R: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='g4qSvGvBxJ+xeAd7QKezOQJFFlw='
       to='example.net'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:server'
       xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <t>Whether or not the 'to' attribute is included, each entity MUST verify the identity of the other entity before exchanging XML stanzas with it, as described under <xref target='security-authentication'/>.</t>
        <t><list style='empty'><t>Interoperability Note: It is possible that implementations based on <xref target='RFC3920'/> will not include the 'to' address on stream headers; an entity SHOULD be liberal in accepting such stream headers.</t></list></t>
      </section>
      <section title='id' anchor='streams-attr-id'>
        <t>The 'id' attribute specifies a unique identifier for the stream, called a "stream ID".  The stream ID MUST be generated by the receiving entity when it sends a response stream header and MUST BE unique within the receiving application (normally a server).</t>
        <t><list style='empty'><t>Security Warning: The stream ID MUST be both unpredictable and non-repeating because it can be security-critical when re-used by an authentication mechanisms, as is the case for Server Dialback <xref target='XEP-0220'/> and the "XMPP 0.9" authentication mechanism used before RFC 3920 defined the use of SASL in XMPP; for recommendations regarding randomness for security purposes, see <xref target="RANDOM"/>.</t></list></t>
        <t>For initial stream headers, the initiating entity MUST NOT include the 'id' attribute; however, if the 'id' attribute is included, the receiving entity MUST ignore it.</t>
        <t>For response stream headers, the receiving entity MUST include the 'id' attribute.</t>
        <figure>
          <artwork><![CDATA[
R: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='++TR84Sm6A3hnt3Q065SnAbbk3Y='
       to='juliet@im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <t><list style='empty'><t>Interoperability Note: In RFC 3920, the text regarding inclusion of the 'id' attribute was ambiguous, leading some implementations to leave the attribute off the response stream header.</t></list></t>
      </section>
      <section title='xml:lang' anchor='streams-attr-xmllang'>
        <t>The 'xml:lang' attribute specifies an entity's preferred or default language for any human-readable XML character data to be sent over the stream (an XML stanza can also possess an 'xml:lang' attribute, as discussed under <xref target='stanzas-attributes-lang'/>).  The syntax of this attribute is defined in Section 2.12 of <xref target='XML'/>; in particular, the value of the 'xml:lang' attribute MUST conform to the NMTOKEN datatype (as defined in Section 2.3 of <xref target="XML"/>) and MUST conform to the language identifier format defined in <xref target="LANGTAGS"/>.</t>
        <t>For initial stream headers, the initiating entity SHOULD include the 'xml:lang' attribute.</t>
        <figure>
          <artwork><![CDATA[
I: <?xml version='1.0'?>
   <stream:stream
       from='juliet@im.example.com'
       to='im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <t>For response stream headers, the receiving entity MUST include the 'xml:lang' attribute.  The following rules apply:</t>
        <t>
          <list style='symbols'>
            <t>If the initiating entity included an 'xml:lang' attribute in its initial stream header and the receiving entity supports that language in the human-readable XML character data that it generates and sends to the initiating entity (e.g., in the &lt;text/&gt; element for stream and stanza errors), the value of the 'xml:lang' attribute MUST be the identifier for the initiating entity's preferred language (e.g., "de-CH").<vspace blankLines='1'/></t>
            <t>If the receiving entity supports a language that matches the initiating entity's preferred language according to the "lookup scheme" specified in Section 3.4 of <xref target='LANGMATCH'/> (e.g., "de" instead of "de-CH"), then the value of the 'xml:lang' attribute SHOULD be the identifier for the matching language.<vspace blankLines='1'/></t>
            <t>If the receiving entity does not support the initiating entity's preferred language or a matching language according to the lookup scheme (or if the initiating entity did not include the 'xml:lang' attribute in its initial stream header), then the value of the 'xml:lang' attribute MUST be the identifier for the default language of the receiving entity (e.g., "en").</t>
          </list>
        </t>
        <figure>
          <artwork><![CDATA[
R: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='++TR84Sm6A3hnt3Q065SnAbbk3Y='
       to='juliet@im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <t>If the initiating entity included the 'xml:lang' attribute in its initial stream header, the receiving entity SHOULD remember that value as the default xml:lang for all stanzas sent by the initiating entity over the current stream.  As described under <xref target="stanzas-attributes-lang"/>, the initiating entity MAY include the 'xml:lang' attribute in any XML stanzas it sends over the stream.  If the initiating entity does not include the 'xml:lang' attribute in any such stanza, the receiving entity SHOULD add the 'xml:lang' attribute to the stanza when routing it to a remote server or delivering it to a connected client, where the value of the attribute MUST be the identifier for the language preferred by the initiating entity (even if the receiving entity does not support that language for human-readable XML character data it generates and sends to the initiating entity, such as in stream or stanza errors).  If the initiating entity includes the 'xml:lang' attribute in any such stanza, the receiving entity MUST NOT modify or delete it when routing it to a remote server or delivering it to a connected client.</t>
      </section>
      <section title='version' anchor='streams-attr-version'>
        <t>The inclusion of the version attribute set to a value of at least "1.0" signals support for the stream-related protocols defined in this specification, including <xref target='tls'>TLS negotiation</xref>, <xref target='sasl'>SASL negotiation</xref>, <xref target="streams-negotiation-features">stream features</xref>, and <xref target="streams-error">stream errors</xref>.</t>
        <t>The version of XMPP specified in this specification is "1.0"; in particular, XMPP 1.0 encapsulates the stream-related protocols as well as the basic semantics of the three defined XML stanza types (&lt;message/&gt;, &lt;presence/&gt;, and &lt;iq/&gt; as described under <xref target='stanzas-semantics-message'/>, <xref target='stanzas-semantics-presence'/>, and <xref target='stanzas-semantics-iq'/>, respectively).</t>
        <t>The numbering scheme for XMPP versions is "&lt;major&gt;.&lt;minor&gt;".  The major and minor numbers MUST be treated as separate integers and each number MAY be incremented higher than a single digit.  Thus, "XMPP 2.4" would be a lower version than "XMPP 2.13", which in turn would be lower than "XMPP 12.3".  Leading zeros (e.g., "XMPP 6.01") MUST be ignored by recipients and MUST NOT be sent.</t>
        <t>The major version number will be incremented only if the stream and stanza formats or obligatory actions have changed so dramatically that an older version entity would not be able to interoperate with a newer version entity if it simply ignored the elements and attributes it did not understand and took the actions defined in the older specification.</t>
        <t>The minor version number will be incremented only if significant new capabilities have been added to the core protocol (e.g., a newly defined value of the 'type' attribute for message, presence, or IQ stanzas).  The minor version number MUST be ignored by an entity with a smaller minor version number, but MAY be used for informational purposes by the entity with the larger minor version number (e.g., the entity with the larger minor version number would simply note that its correspondent would not be able to understand that value of the 'type' attribute and therefore would not send it).</t>
        <t>The following rules apply to the generation and handling of the 'version' attribute within stream headers:</t>
        <t>
          <list style='numbers'>
            <t>The initiating entity MUST set the value of the 'version' attribute in the initial stream header to the highest version number it supports (e.g., if the highest version number it supports is that defined in this specification, it MUST set the value to "1.0").<vspace blankLines='1'/></t>
            <t>The receiving entity MUST set the value of the 'version' attribute in the response stream header to either the value supplied by the initiating entity or the highest version number supported by the receiving entity, whichever is lower.  The receiving entity MUST perform a numeric comparison on the major and minor version numbers, not a string match on "&lt;major&gt;.&lt;minor&gt;".<vspace blankLines='1'/></t>
            <t>If the version number included in the response stream header is at least one major version lower than the version number included in the initial stream header and newer version entities cannot interoperate with older version entities as described, the initiating entity SHOULD close the stream with an &lt;unsupported-version/&gt; stream error (<xref target='streams-error-conditions-unsupported-version'/>).<vspace blankLines='1'/></t>
            <t>If either entity receives a stream header with no 'version' attribute, the entity MUST consider the version supported by the other entity to be "0.9" and SHOULD NOT include a 'version' attribute in the response stream header.</t>
          </list>
        </t>
      </section>
      <section title='Summary of Stream Attributes' anchor='streams-attr-summary'>
        <t>The following table summarizes the attributes of the root &lt;stream/&gt; element.</t>
        <figure anchor='figure-4' title='Stream Attributes'>
          <artwork><![CDATA[
+----------+--------------------------+-------------------------+
|          | initiating to receiving  | receiving to initiating |
+----------+--------------------------+-------------------------+
| to       | JID of receiver          | JID of initiator        |
| from     | JID of initiator         | JID of receiver         |
| id       | ignored                  | stream identifier       |
| xml:lang | default language         | default language        |
| version  | XMPP 1.0+ supported      | XMPP 1.0+ supported     |
+----------+--------------------------+-------------------------+
          ]]></artwork>
        </figure>
      </section>
    </section>

    <section title="XML Namespaces" anchor="streams-ns">
      <t>Readers are referred to the specification of XML namespaces <xref target='XML-NAMES'/> for a full understanding of the concepts used in this section, especially the concept of a "default namespace" as provided in Section 3 and Section 6.2 of that specification.</t>
      <section title="Stream Namespace" anchor="streams-ns-stream">
        <t>The root &lt;stream/&gt; element ("stream header") MUST be qualified by the namespace 'http://etherx.jabber.org/streams' (the "stream namespace").  If this rule is violated, the entity that receives the offending stream header MUST close the stream with a stream error, which SHOULD be &lt;invalid-namespace/&gt; (<xref target='streams-error-conditions-invalid-namespace'/>), although some existing implementations send &lt;bad-format/&gt; (<xref target='streams-error-conditions-bad-format'/>) instead.</t>
      </section>
      <section title="Content Namespace" anchor="streams-ns-content">
        <t>An entity MAY declare a "content namespace" as the default namespace for data sent over the stream (i.e., data other than elements qualified by the stream namespace).  If so, (1) the content namespace MUST be other than the stream namespace, and (2) the content namespace MUST be the same for the initial stream and the response stream so that both streams are qualified consistently.  The content namespace applies to all first-level child elements sent over the stream unless explicitly qualified by another namespace (i.e., the content namespace is the default namespace).</t>
        <t>Alternatively (i.e., instead of declaring the content namespace as the default namespace), an entity MAY explicitly qualify the namespace for each first-level child element of the stream, using so-called "prefix-free canonicalization".  These two styles are shown in the following examples.</t>
        <t>When a content namespace is declared as the default namespace, in rough outline a stream will look something like the following.</t>
        <figure>
          <artwork><![CDATA[
<stream:stream
    from='juliet@im.example.com'
    to='im.example.com'
    version='1.0'
    xml:lang='en'
    xmlns='jabber:client'
    xmlns:stream='http://etherx.jabber.org/streams'>
  <message>
    <body>foo</body>
  </message>
</stream:stream>
          ]]></artwork>
        </figure>
        <t>When a content namespace is not declared as the default namespace and so-called "prefix-free canonicalization" is used instead, in rough outline a stream will look something like the following.</t>
        <figure>
          <artwork><![CDATA[
<stream
    from='juliet@im.example.com'
    to='im.example.com'
    version='1.0'
    xml:lang='en'
    xmlns='http://etherx.jabber.org/streams'>
  <message xmlns='jabber:client'>
    <body>foo</body>
  </message>
</stream>
          ]]></artwork>
        </figure>
        <t>Traditionally, most XMPP implementations have used the content-namespace-as-default-namespace style rather than the prefix-free canonicalization style for stream headers; however, both styles are acceptable since they are semantically equivalent.</t>
      </section>
      <section title="XMPP Content Namespaces" anchor="streams-ns-xmpp">
        <t>XMPP as defined in this specification uses two content namespaces: 'jabber:client' and 'jabber:server'.  These namespaces are nearly identical but are used in different contexts (client-to-server communication for 'jabber:client' and server-to-server communication for 'jabber:server').  The only difference between the two is that the 'to' and 'from' attributes are OPTIONAL on stanzas sent over XML streams qualified by the 'jabber:client' namespace, whereas they are REQUIRED on stanzas sent over XML streams qualified by the 'jabber:server' namespace.  Support for these content namespaces implies support for the <xref target="stanzas-attributes">common attributes</xref> and <xref target="stanzas-semantics">basic semantics</xref> of all three core stanza types (message, presence, and IQ).</t>
        <t>An implementation MAY support content namespaces other than 'jabber:client' or 'jabber:server'.  However, because such namespaces would define applications other than XMPP, they are to be defined in separate specifications.</t>
        <t>An implementation MAY refuse to support any other content namespaces as default namespaces.  If an entity receives a first-level child element qualified by a content namespace it does not support, it MUST close the stream with an &lt;invalid-namespace/&gt; stream error (<xref target='streams-error-conditions-invalid-namespace'/>).</t>
        <t>Client implementations MUST support the 'jabber:client' content namespace as a default namespace.  The 'jabber:server' content namespace is out of scope for an XMPP client, and a client MUST NOT send stanzas qualified by the 'jabber:server' namespace.</t>
        <t>Server implementations MUST support as default content namespaces both the 'jabber:client' namespace (when the stream is used for communication between a client and a server) and the 'jabber:server' namespace (when the stream is used for communication between two servers).  When communicating with a connected client, a server MUST NOT send stanzas qualified by the 'jabber:server' namespace; when communicating with a peer server, a server MUST NOT send stanzas qualified by the 'jabber:client' namespace.</t>
        <t><list style='empty'><t>Implementation Note: Because a client sends stanzas over a stream whose content namespace is 'jabber:client', if a server routes to a peer server a stanza it has received from a connected client then it needs to "re-scope" the stanza so that its content namespace is 'jabber:server'.  Similarly, if a server delivers to a connected client a stanza it has received from a peer server then it needs to "re-scope" the stanza so that its content namespace is 'jabber:client'.  This rule applies to XML stanzas as defined under <xref target='streams-fundamentals'/> (i.e., a first-level &lt;message/&gt;, &lt;presence/&gt;, or &lt;iq/&gt; element qualified by the 'jabber:client' or 'jabber:server' namespace), and by namespace inheritance to all child elements of a stanza; however the rule does not apply to elements qualified by namespaces other than 'jabber:client' and 'jabber:server' nor to any children of such elements (e.g., a &lt;message/&gt; element contained within an extension element (<xref target='stanzas-extended'/>) for reporting purposes).  Although it is not forbidden for an entity to generate stanzas in which an extension element contains a child element qualified by the 'jabber:client' or 'jabber:server' namespace, existing implementations handle such stanzas inconsistently; therefore implementers are advised to weigh the likely lack of interoperability against the possible utility of such stanzas.  Finally, servers are advised to apply stanza re-scoping to other stream connection methods and alternative XMPP connection methods, such as those specified in <xref target="XEP-0124"/>, <xref target="XEP-0206"/>, <xref target="XEP-0114"/>, and <xref target="XEP-0225"/>.</t></list></t>
              </section>
      <section title="Other Namespaces" anchor="streams-ns-other">
        <t>Either party to a stream MAY send data qualified by namespaces other than the content namespace and the stream namespace.  For example, this is how data related to TLS negotiation and SASL negotiation are exchanged, as well as XMPP extensions such as Stream Management <xref target='XEP-0198'/> and Server Dialback <xref target='XEP-0220'/>.</t>
        <t><list style='empty'><t>Interoperability Note: For historical reasons, some server implementations expect a declaration of the 'jabber:server:dialback' namespace on server-to-server streams, as explained in <xref target='XEP-0220'/>.</t></list></t>
        <t>However, an XMPP server MUST NOT route or deliver data received over an input stream if that data is (a) qualified by another namespace and (b) addressed to an entity other than the server, unless the other party to the output stream over which the server would send the data has explicitly negotiated or advertised support for receiving arbitrary data from the server.  This rule is included because XMPP is designed for the exchange of XML stanzas (not arbitrary XML data), and because allowing an entity to send arbitrary data to other entities could significantly increase the potential for exchanging malicious information.  As an example of this rule, the server hosting the example.net domain would not route the following first-level XML element from &lt;romeo@example.net&gt; to &lt;juliet@example.com&gt;:</t>
        <figure>
          <artwork><![CDATA[
  <ns1:foo xmlns:ns1='http://example.org/ns1'
           from='romeo@example.net/resource1'
           to='juliet@example.com'>
    <ns1:bar/>
  </ns1:foo>
          ]]></artwork>
        </figure>
        <t>This rule also applies to first-level elements that look like stanzas but that are improperly namespaced and therefore really are not stanzas at all (see also <xref target='streams-ns-declarations'/>), for example:</t>
        <figure>
          <artwork><![CDATA[
  <ns2:message xmlns:ns2='http://example.org/ns2'
               from='romeo@example.net/resource1'
               to='juliet@example.com'>
    <body>hi</body>
  </ns2:message>
          ]]></artwork>
        </figure>
        <t>Upon receiving arbitrary first-level XML elements over an input stream, a server MUST either ignore the data or close the stream with a stream error, which SHOULD be &lt;unsupported-stanza-type/&gt; (<xref target='streams-error-conditions-unsupported-stanza-type'/>).</t>
      </section>
      <section title="Namespace Declarations and Prefixes" anchor="streams-ns-declarations">
        <t>Because the content namespace is other than the stream namespace, if a content namespace is declared as the default namespace then the following statements are true:</t>
        <t>
          <list style='numbers'>
            <t>The stream header needs to contain a namespace declaration for both the content namespace and the stream namespace.<vspace blankLines='1'/></t>
            <t>The stream namespace declaration needs to include a namespace prefix for the stream namespace.</t>
          </list>
        </t>
        <t><list style='empty'><t>Interoperability Note: For historical reasons, an implementation MAY accept only the prefix 'stream' for the stream namespace (resulting in prefixed names such as &lt;stream:stream&gt; and &lt;stream:features&gt;); this specification retains that allowance from <xref target='RFC3920'/> for the purpose of backward compatibility.  Implementations are advised that using a prefix other than 'stream' for the stream namespace might result in interoperability problems.  If an entity receives a stream header with a stream namespace prefix it does not accept, it MUST close the stream with a stream error, which SHOULD be &lt;bad-namespace-prefix/&gt; (<xref target='streams-error-conditions-bad-namespace-prefix'/>), although some existing implementations send &lt;bad-format/&gt; (<xref target='streams-error-conditions-bad-format'/>) instead.</t></list></t>
        <t>An implementation MUST NOT generate namespace prefixes for elements qualified by the content namespace (i.e., the default namespace for data sent over the stream) if the content namespace is 'jabber:client' or 'jabber:server'.  For example, the following is illegal:</t>
        <figure>
          <artwork><![CDATA[
<stream:stream
    from='juliet@im.example.com'
    to='im.example.com'
    version='1.0'
    xml:lang='en'
    xmlns='jabber:client'
    xmlns:stream='http://etherx.jabber.org/streams'>

  <foo:message xmlns:foo='jabber:client'>
    <foo:body>foo</foo:body>
  </foo:message>
          ]]></artwork>
        </figure>
        <t>An XMPP entity MUST NOT accept data that violates this rule (in particular, an XMPP server MUST NOT route or deliver such data to another entity); instead it MUST either ignore the data or close the stream with a stream error, which SHOULD be &lt;bad-namespace-prefix/&gt; (<xref target='streams-error-conditions-bad-namespace-prefix'/>).</t>
        <t>Namespaces declared in a stream header MUST apply only to that stream (e.g., the 'jabber:server:dialback' namespace used in Server Dialback <xref target='XEP-0220'/>).  In particular, because XML stanzas intended for routing or delivery over streams with other entities will lose the namespace context declared in the header of the stream in which those stanzas originated, namespaces for extended content within such stanzas MUST NOT be declared in that stream header (see also <xref target='stanzas-extended'/>).  If either party to a stream declares such namespaces, the other party to the stream SHOULD close the stream with an &lt;invalid-namespace/&gt; stream error (<xref target='streams-error-conditions-invalid-namespace'/>).  In any case, an entity MUST ensure that such namespaces are properly declared (according to this section) when routing or delivering stanzas from an input stream to an output stream.</t>
      </section>
            </section>

            <section title="Stream Errors" anchor="streams-error">
              <t>The root stream element MAY contain an &lt;error/&gt; child element that is qualified by the stream namespace.  The error child SHALL be sent by a compliant entity if it perceives that a stream-level error has occurred.</t>
              <section title="Rules" anchor="streams-error-rules">
                <t>The following rules apply to stream-level errors.</t>
                <section title="Stream Errors Are Unrecoverable" anchor="streams-error-rules-unrecoverable">
                  <t>Stream-level errors are unrecoverable.  Therefore, if an error occurs at the level of the stream, the entity that detects the error MUST send an &lt;error/&gt; element with an appropriate child element specifying the error condition and then immediately close the stream as described under <xref target='streams-close'/>.</t>
                  <figure>
                    <artwork><![CDATA[
C: <message><body>No closing tag!</message>

S: <stream:error>
     <not-well-formed 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
          <t>The entity that receives the stream error then SHALL close the stream as explained under <xref target='streams-close'/>.</t>
          <figure>
            <artwork><![CDATA[
C: </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="Stream Errors Can Occur During Setup" anchor="streams-error-rules-setup">
          <t>If the error is triggered by the initial stream header, the receiving entity MUST still send the opening &lt;stream&gt; tag, include the &lt;error/&gt; element as a child of the stream element, and send the closing &lt;/stream&gt; tag (preferably in the same TCP packet).</t>
          <figure>
            <artwork><![CDATA[
C: <?xml version='1.0'?>
   <stream:stream
       from='juliet@im.example.com'
       to='im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://wrong.namespace.example.org/'>

S: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='++TR84Sm6A3hnt3Q065SnAbbk3Y='
       to='juliet@im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>
   <stream:error>
     <invalid-namespace 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="Stream Errors When the Host is Unspecified or Unknown" anchor="streams-error-rules-host">
          <t>If the initiating entity provides no 'to' attribute or provides an unknown host in the 'to' attribute and the error occurs during stream setup, the value of the 'from' attribute returned by the receiving entity in the stream header sent before closing the stream MUST be either an authoritative FQDN for the receiving entity or the empty string.</t>
          <figure>
            <artwork><![CDATA[
C: <?xml version='1.0'?>
   <stream:stream
       from='juliet@im.example.com'
       to='unknown.host.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>

S: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='++TR84Sm6A3hnt3Q065SnAbbk3Y='
       to='juliet@im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>
   <stream:error>
     <host-unknown
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="Where Stream Errors Are Sent" anchor="streams-error-rules-where">
          <t>When two TCP connections are used between the initiating entity and the receiving entity (one in each direction) rather than using a single bidirectional connection, the following rules apply:</t>
          <t>
            <list style='symbols'>
              <t>Stream-level errors related to the initial stream are returned by the receiving entity on the response stream via the same TCP connection.<vspace blankLines='1'/></t>
              <t>Stanza errors triggered by outbound stanzas sent from the initiating entity over the initial stream via the same TCP connection are returned by the receiving entity on the response stream via the other ("return") TCP connection, since they are inbound stanzas from the perspective of the initiating entity.<vspace blankLines='1'/></t>
            </list>
          </t>
        </section>
      </section>
      <section title="Syntax" anchor="streams-error-syntax">
        <t>The syntax for stream errors is as follows, where XML data shown within the square brackets '[' and ']' is OPTIONAL.</t>
        <figure>
          <artwork><![CDATA[
<stream:error>
  <defined-condition xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
  [<text xmlns='urn:ietf:params:xml:ns:xmpp-streams'
         xml:lang='langcode'>
     OPTIONAL descriptive text
  </text>]
  [OPTIONAL application-specific condition element]
</stream:error>
          ]]></artwork>
        </figure>
        <t>The "defined-condition" MUST correspond to one of the stream error conditions defined under <xref target='streams-error-conditions'/>.  However, because additional error conditions might be defined in the future, if an entity receives a stream error condition that it does not understand then it MUST treat the unknown condition as equivalent to &lt;undefined-condition/&gt; (<xref target='streams-error-conditions-undefined-condition'/>).  If the designers of an XMPP protocol extension or the developers of an XMPP implementation need to communicate a stream error condition that is not defined in this specification, they can do so by defining an application-specific error condition element qualified by an application-specific namespace.</t>
        <t>The &lt;error/&gt; element:</t>
        <t><list style='symbols'>
          <t>MUST contain a child element corresponding to one of the <xref target='streams-error-conditions'>defined stream error conditions</xref>; this element MUST be qualified by the 'urn:ietf:params:xml:ns:xmpp-streams' namespace.<vspace blankLines='1'/></t>
          <t>MAY contain a &lt;text/&gt; child element containing XML character data that describes the error in more detail; this element MUST be qualified by the 'urn:ietf:params:xml:ns:xmpp-streams' namespace and SHOULD possess an 'xml:lang' attribute specifying the natural language of the XML character data.<vspace blankLines='1'/></t>
          <t>MAY contain a child element for an application-specific error condition; this element MUST be qualified by an application-defined namespace, and its structure is defined by that namespace (see <xref target='streams-error-app'/>).</t>
        </list></t>
        <t>The &lt;text/&gt; element is OPTIONAL.  If included, it MUST be used only to provide descriptive or diagnostic information that supplements the meaning of a defined condition or application-specific condition.  It MUST NOT be interpreted programmatically by an application.  It MUST NOT be used as the error message presented to a human user, but MAY be shown in addition to the error message associated with the defined condition element (and, optionally, the application-specific condition element).</t>
      </section>
      <section title="Defined Stream Error Conditions" anchor="streams-error-conditions">
        <t>The following stream-level error conditions are defined.</t>
        <section title="bad-format" anchor="streams-error-conditions-bad-format">
          <t>The entity has sent XML that cannot be processed.</t>
          <t>(In the following example, the client sends an XMPP message that is not well-formed XML, which alternatively might trigger a &lt;not-well-formed/&gt; stream error (<xref target='streams-error-conditions-not-well-formed'/>).)</t>
          <figure>
            <artwork><![CDATA[
C: <message>
     <body>No closing tag!
   </message>

S: <stream:error>
     <bad-format 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
          <t>This error can be used instead of the more specific XML-related errors, such as &lt;bad-namespace-prefix/&gt;, &lt;invalid-xml/&gt;, &lt;not-well-formed/&gt;, &lt;restricted-xml/&gt;, and &lt;unsupported-encoding/&gt;.  However, the more specific errors are RECOMMENDED.</t>
        </section>
        <section title="bad-namespace-prefix" anchor="streams-error-conditions-bad-namespace-prefix">
          <t>The entity has sent a namespace prefix that is unsupported, or has sent no namespace prefix on an element that needs such a prefix (see <xref target="xml-ns"/>).</t>
          <t>(In the following example, the client specifies a namespace prefix of "foobar" for the XML stream namespace.)</t>
          <figure>
            <artwork><![CDATA[
C: <?xml version='1.0'?>
   <foobar:stream
       from='juliet@im.example.com'
       to='im.example.com'
       version='1.0'
       xmlns='jabber:client'
       xmlns:foobar='http://etherx.jabber.org/streams'>

S: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='++TR84Sm6A3hnt3Q065SnAbbk3Y='
       to='juliet@im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>
   <stream:error>
     <bad-namespace-prefix 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="conflict" anchor="streams-error-conditions-conflict">
          <t>The server either (1) is closing the existing stream for this entity because a new stream has been initiated that conflicts with the existing stream, or (2) is refusing a new stream for this entity because allowing the new stream would conflict with an existing stream (e.g., because the server allows only a certain number of connections from the same IP address or allows only one server-to-server stream for a given domain pair as a way of helping to ensure in-order processing as described under <xref target='rules-order'/>).</t>
          <figure>
            <artwork><![CDATA[
C: <?xml version='1.0'?>
   <stream:stream
       from='juliet@im.example.com'
       to='im.example.com'
       version='1.0'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>

S: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='++TR84Sm6A3hnt3Q065SnAbbk3Y='
       to='juliet@im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>
   <stream:error>
     <conflict 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
          <t>If a client receives a &lt;conflict/&gt; stream error (<xref target='streams-error-conditions-conflict'/>), during the resource binding aspect of its reconnection attempt it MUST NOT blindly request the resourcepart it used during the former session but instead MUST choose a different resourcepart; details are provided under <xref target='bind'/>.</t>
        </section>
        <section title="connection-timeout" anchor="streams-error-conditions-connection-timeout">
          <t>One party is closing the stream because it has reason to believe that the other party has permanently lost the ability to communicate over the stream.  The lack of ability to communicate can be discovered using various methods, such as whitespace keepalives as specified under <xref target='streams-close'/>, XMPP-level pings as defined in <xref target='XEP-0199'/>, and XMPP Stream Management as defined in <xref target='XEP-0198'/>.</t>
          <figure>
            <artwork><![CDATA[
P: <stream:error>
     <connection-timeout 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
          <t><list style='empty'><t>Interoperability Note: RFC 3920 specified that the &lt;connection-timeout/&gt; stream error (<xref target='streams-error-conditions-connection-timeout'/>) is to be used if the peer has not generated any traffic over the stream for some period of time. That behavior is no longer recommended; instead, the error SHOULD be used only if the connected client or peer server has not responded to data sent over the stream.</t></list></t>
        </section>
        <section title="host-gone" anchor="streams-error-conditions-host-gone">
          <t>The value of the 'to' attribute provided in the initial stream header corresponds to an FQDN that is no longer serviced by the receiving entity.</t>
          <t>(In the following example, the peer specifies a 'to' address of "foo.im.example.com" when connecting to the "im.example.com" server, but the server no longer hosts a service at that address.)</t>
          <figure>
            <artwork><![CDATA[
P: <?xml version='1.0'?>
   <stream:stream
       from='example.net'
       to='foo.im.example.com'
       version='1.0'
       xmlns='jabber:server'
       xmlns:stream='http://etherx.jabber.org/streams'>

S: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='g4qSvGvBxJ+xeAd7QKezOQJFFlw='
       to='example.net'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:server'
       xmlns:stream='http://etherx.jabber.org/streams'>
   <stream:error>
     <host-gone 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="host-unknown" anchor="streams-error-conditions-host-unknown">
          <t>The value of the 'to' attribute provided in the initial stream header does not correspond to an FQDN that is serviced by the receiving entity.</t>
          <t>(In the following example, the peer specifies a 'to' address of "example.org" when connecting to the "im.example.com" server, but the server knows nothing of that address.)</t>
          <figure>
            <artwork><![CDATA[
P: <?xml version='1.0'?>
   <stream:stream
       from='example.net'
       to='example.org'
       version='1.0'
       xmlns='jabber:server'
       xmlns:stream='http://etherx.jabber.org/streams'>

S: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='g4qSvGvBxJ+xeAd7QKezOQJFFlw='
       to='example.net'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:server'
       xmlns:stream='http://etherx.jabber.org/streams'>
   <stream:error>
     <host-unknown 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="improper-addressing" anchor="streams-error-conditions-improper-addressing">
          <t>A stanza sent between two servers lacks a 'to' or 'from' attribute, the 'from' or 'to' attribute has no value, or the value violates the rules for XMPP addresses <xref target='XMPP-ADDR'/>.</t>
          <t>(In the following example, the peer sends a stanza without a 'to' address over a server-to-server stream.)</t>
          <figure>
            <artwork><![CDATA[
P: <message from='juliet@im.example.com'>
     <body>Wherefore art thou?</body>
   </message>

S: <stream:error>
     <improper-addressing 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="internal-server-error" anchor="streams-error-conditions-internal-server-error">
          <t>The server has experienced a misconfiguration or other internal error that prevents it from servicing the stream.</t>
          <figure>
            <artwork><![CDATA[
S: <stream:error>
     <internal-server-error 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="invalid-from" anchor="streams-error-conditions-invalid-from">
          <t>The data provided in a 'from' attribute does not match an authorized JID or validated domain as negotiated (1) between two servers using SASL or Server Dialback, or (2) between a client and a server via SASL authentication and resource binding.</t>
          <t>(In the following example, a peer that has authenticated only as "example.net" attempts to send a stanza from an address at "example.org".)</t> 
          <figure>
            <artwork><![CDATA[
P: <message from='romeo@example.org' to='juliet@im.example.com'>
     <body>Neither, fair saint, if either thee dislike.</body>
   </message>

S: <stream:error>
     <invalid-from 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="invalid-namespace" anchor="streams-error-conditions-invalid-namespace">
          <t>The stream namespace name is something other than "http://etherx.jabber.org/streams" (see <xref target="xml-ns"/>) or the content namespace declared as the default namespace is not supported (e.g., something other than "jabber:client" or "jabber:server").</t>
          <t>(In the following example, the client specifies a namespace of 'http://wrong.namespace.example.org/' for the stream.)</t>
          <figure>
            <artwork><![CDATA[
C: <?xml version='1.0'?>
   <stream:stream
       from='juliet@im.example.com'
       to='im.example.com'
       version='1.0'
       xmlns='jabber:client'
       xmlns:stream='http://wrong.namespace.example.org/'>

S: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='++TR84Sm6A3hnt3Q065SnAbbk3Y='
       to='juliet@im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>
   <stream:error>
     <invalid-namespace 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="invalid-xml" anchor="streams-error-conditions-invalid-xml">
          <t>The entity has sent invalid XML over the stream to a server that performs validation (see <xref target="xml-validation"/>).</t>
          <t>(In the following example, the peer attempts to send an IQ stanza of type "subscribe" but the XML schema defines no such value for the 'type' attribute.)</t>
          <figure>
            <artwork><![CDATA[
P: <iq from='example.net' 
       id='l3b1vs75'
       to='im.example.com'
       type='subscribe'>
     <ping xmlns='urn:xmpp:ping'/>
   </iq>

S: <stream:error>
     <invalid-xml 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="not-authorized" anchor="streams-error-conditions-not-authorized">
          <t>The entity has attempted to send XML stanzas or other outbound data before the stream has been authenticated, or otherwise is not authorized to perform an action related to stream negotiation; the receiving entity MUST NOT process the offending data before sending the stream error.</t>
          <t>(In the following example, the client attempts to send XML stanzas before authenticating with the server.)</t>
          <figure>
            <artwork><![CDATA[
C: <?xml version='1.0'?>
   <stream:stream
       from='juliet@im.example.com'
       to='im.example.com'
       version='1.0'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>

S: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='++TR84Sm6A3hnt3Q065SnAbbk3Y='
       to='juliet@im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>

C: <message to='romeo@example.net'>
     <body>Wherefore art thou?</body>
   </message>

S: <stream:error>
     <not-authorized 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="not-well-formed" anchor="streams-error-conditions-not-well-formed">
          <t>The initiating entity has sent XML that violates the well-formedness rules of <xref target="XML"/> or <xref target='XML-NAMES'/>.</t>
          <t>(In the following example, the client sends an XMPP message that is not namespace-well-formed.)</t>
          <figure>
            <artwork><![CDATA[
C: <message>
     <foo:body>What is this foo?</foo:body>
   </message>

S: <stream:error>
     <not-well-formed 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
          <t><list style='empty'><t>Interoperability Note: In RFC 3920, the name of this error condition was "xml-not-well-formed" instead of "not-well-formed".  The name was changed because the element name &lt;xml-not-well-formed/&gt; violates the constraint from Section 3 of <xref target='XML'/> that "names beginning with a match to (('X'|'x')('M'|'m')('L'|'l')) are reserved for standardization in this or future versions of this specification".</t></list></t>
        </section>
        <section title="policy-violation" anchor="streams-error-conditions-policy-violation">
          <t>The entity has violated some local service policy (e.g., a stanza exceeds a configured size limit); the server MAY choose to specify the policy in the &lt;text/&gt; element or in an application-specific condition element.</t>
          <t>(In the following example, the client sends an XMPP message that is too large according to the server's local service policy.)</t>
          <figure>
            <artwork><![CDATA[
C: <message to='juliet@im.example.com' id='foo'>
     <body>[ ... the-emacs-manual ... ]</body>
   </message>

S: <stream:error>
     <policy-violation 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
     <stanza-too-big xmlns='urn:xmpp:errors'/>
   </stream:error>

S: </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="remote-connection-failed" anchor="streams-error-conditions-remote-connection-failed">
          <t>The server is unable to properly connect to a remote entity that is needed for authentication or authorization (e.g., in certain scenarios related to Server Dialback <xref target='XEP-0220'/>); this condition is not to be used when the cause of the error is within the administrative domain of the XMPP service provider, in which case the &lt;internal-server-error/&gt; condition is more appropriate.</t>
          <figure>
            <artwork><![CDATA[
C: <?xml version='1.0'?>
   <stream:stream
       from='juliet@im.example.com'
       to='im.example.com'
       version='1.0'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>

S: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='++TR84Sm6A3hnt3Q065SnAbbk3Y='
       to='juliet@im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>
   <stream:error>
     <remote-connection-failed 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="reset" anchor="streams-error-conditions-reset">
          <t>The server is closing the stream because it has new (typically security-critical) features to offer, because the keys or certificates used to establish a secure context for the stream have expired or have been revoked during the life of the stream (<xref target='security-certificates-validation-streams'/>), because the TLS sequence number has wrapped (<xref target='tls-rules-renegotiation'/>), etc.  The reset applies to the stream and to any security context established for that stream (e.g., via TLS and SASL), which means that encryption and authentication need to be negotiated again for the new stream (e.g., TLS session resumption cannot be used).</t>
          <figure>
            <artwork><![CDATA[
S: <stream:error>
     <reset
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="resource-constraint" anchor="streams-error-conditions-resource-constraint">
          <t>The server lacks the system resources necessary to service the stream.</t>
          <figure>
            <artwork><![CDATA[
C: <?xml version='1.0'?>
   <stream:stream
       from='juliet@im.example.com'
       to='im.example.com'
       version='1.0'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>

S: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='++TR84Sm6A3hnt3Q065SnAbbk3Y='
       to='juliet@im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>
   <stream:error>
     <resource-constraint 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="restricted-xml" anchor="streams-error-conditions-restricted-xml">
          <t>The entity has attempted to send restricted XML features such as a comment, processing instruction, DTD subset, or XML entity reference (see <xref target="xml-restrictions"/>).</t>
          <t>(In the following example, the client sends an XMPP message containing an XML comment.)</t>
          <figure>
            <artwork><![CDATA[
C: <message to='juliet@im.example.com'>
     <!--<subject/>-->
     <body>This message has no subject.</body>
   </message>

S: <stream:error>
     <restricted-xml 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="see-other-host" anchor="streams-error-conditions-see-other-host">
          <t>The server will not provide service to the initiating entity but is redirecting traffic to another host under the administrative control of the same service provider.  The XML character data of the &lt;see-other-host/&gt; element returned by the server MUST specify the alternate FQDN or IP address at which to connect, which MUST be a valid domainpart or a domainpart plus port number (separated by the ':' character in the form "domainpart:port").  If the domainpart is the same as the source domain, derived domain, or resolved IPv4 or IPv6 address to which the initiating entity originally connected (differing only by the port number), then the initiating entity SHOULD simply attempt to reconnect at that address.  (The format of an IPv6 address MUST follow <xref target='IPv6-ADDR'/>, which includes the enclosing the IPv6 address in square brackets '[' and ']' as originally defined by <xref target='URI'/>.)  Otherwise, the initiating entity MUST resolve the FQDN specified in the &lt;see-other-host/&gt; element as described under <xref target='tcp-resolution'/>.</t>
          <figure>
            <artwork><![CDATA[
C: <?xml version='1.0'?>
   <stream:stream
       from='juliet@im.example.com'
       to='im.example.com'
       version='1.0'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>

S: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='++TR84Sm6A3hnt3Q065SnAbbk3Y='
       to='juliet@im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>
   <stream:error>
     <see-other-host 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'>
       [2001:41D0:1:A49b::1]:9222
     </see-other-host>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
          <t>When negotiating a stream with the host to which it has been redirected, the initiating entity MUST apply the same policies it would have applied to the original connection attempt (e.g., a policy requiring TLS), MUST specify the same 'to' address on the initial stream header, and MUST verify the identity of the new host using the same reference identifier(s) it would have used for the original connection attempt (in accordance with <xref target='TLS-CERTS'/>).  Even if the receiving entity returns a &lt;see-other-host/&gt; error before the confidentiality and integrity of the stream have been established (thus introducing the possibility of a denial of service attack), the fact that the initiating entity needs to verify the identity of the XMPP service based on the same reference identifiers implies that the initiating entity will not connect to a malicious entity.  To reduce the possibility of a denial of service attack, (a) the receiving entity SHOULD NOT close the stream with a &lt;see-other-host/&gt; stream error until after the confidentiality and integrity of the stream have been protected via TLS or an equivalent security layer (such as the SASL GSSAPI mechanism) and (b) the receiving entity MAY have a policy of following redirects only if it has authenticated the receiving entity.  In addition, the initiating entity SHOULD abort the connection attempt after a certain number of successive redirects (e.g., at least 2 but no more than 5).</t>
        </section>
        <section title="system-shutdown" anchor="streams-error-conditions-system-shutdown">
          <t>The server is being shut down and all active streams are being closed.</t>
          <figure>
            <artwork><![CDATA[
S: <stream:error>
     <system-shutdown 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="undefined-condition" anchor="streams-error-conditions-undefined-condition">
          <t>The error condition is not one of those defined by the other conditions in this list; this error condition SHOULD NOT be used except in conjunction with an application-specific condition.</t>
          <figure>
            <artwork><![CDATA[
S: <stream:error>
     <undefined-condition 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
     <app-error xmlns='http://example.org/ns'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="unsupported-encoding" anchor="streams-error-conditions-unsupported-encoding">
          <t>The initiating entity has encoded the stream in an encoding that is not supported by the server (see <xref target="xml-encoding"/>) or has otherwise improperly encoded the stream (e.g., by violating the rules of the <xref target='UTF-8'/> encoding).</t>
          <t>(In the following example, the client attempts to encode data using UTF-16 instead of UTF-8.)</t>
          <figure>
            <artwork><![CDATA[
C: <?xml version='1.0' encoding='UTF-16'?>
   <stream:stream
       from='juliet@im.example.com'
       to='im.example.com'
       version='1.0'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>

S: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='++TR84Sm6A3hnt3Q065SnAbbk3Y='
       to='juliet@im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>
   <stream:error>
     <unsupported-encoding 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="unsupported-feature" anchor="streams-error-conditions-unsupported-feature">
          <t>The receiving entity has advertised a mandatory-to-negotiate stream feature that the initiating entity does not support, and has offered no other mandatory-to-negotiate feature alongside the unsupported feature.</t>
          <t>(In the following example, the receiving entity requires negotiation of an example feature but the initiating entity does not support the feature.)</t>
          <figure>
            <artwork><![CDATA[
R: <stream:features>
     <example xmlns='urn:xmpp:example'>
       <required/>
     </example>
   </stream:features>

I: <stream:error>
     <unsupported-feature 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="unsupported-stanza-type" anchor="streams-error-conditions-unsupported-stanza-type">
          <t>The initiating entity has sent a first-level child of the stream that is not supported by the server, either because the receiving entity does not understand the namespace or because the receiving entity does not understand the element name for the applicable namespace (which might be the content namespace declared as the default namespace).</t>
          <t>(In the following example, the client attempts to send a first-level child element of &lt;pubsub/&gt; qualified by the 'jabber:client' namespace, but the schema for that namespace defines no such element.)</t>
          <figure>
            <artwork><![CDATA[
C: <pubsub xmlns='jabber:client'>
     <publish node='princely_musings'>
       <item id='ae890ac52d0df67ed7cfdf51b644e901'>
         <entry xmlns='http://www.w3.org/2005/Atom'>
           <title>Soliloquy</title>
           <summary>
To be, or not to be: that is the question:
Whether 'tis nobler in the mind to suffer
The slings and arrows of outrageous fortune,
Or to take arms against a sea of troubles,
And by opposing end them?
           </summary>
           <link rel='alternate' type='text/html'
                 href='http://denmark.example/2003/12/13/atom03'/>
           <id>tag:denmark.example,2003:entry-32397</id>
           <published>2003-12-13T18:30:02Z</published>
           <updated>2003-12-13T18:30:02Z</updated>
         </entry>
       </item>
     </publish>
   </pubsub>

S: <stream:error>
     <unsupported-stanza-type 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
        <section title="unsupported-version" anchor="streams-error-conditions-unsupported-version">
          <t>The 'version' attribute provided by the initiating entity in the stream header specifies a version of XMPP that is not supported by the server.</t>
          <figure>
            <artwork><![CDATA[
C: <?xml version='1.0'?>
   <stream:stream
       from='juliet@im.example.com'
       to='im.example.com'
       version='11.0'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>

S: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='++TR84Sm6A3hnt3Q065SnAbbk3Y='
       to='juliet@im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>
   <stream:error>
     <unsupported-version 
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>
            ]]></artwork>
          </figure>
        </section>
      </section>
      <section title="Application-Specific Conditions" anchor="streams-error-app">
        <t>As noted, an application MAY provide application-specific stream error information by including a properly-namespaced child in the error element.  The application-specific element SHOULD supplement or further qualify a defined element.  Thus the &lt;error/&gt; element will contain two or three child elements.</t>
        <figure>
          <artwork><![CDATA[
C: <message>
     <body>
       My keyboard layout is:

       QWERTYUIOP{}|
       ASDFGHJKL:"
       ZXCVBNM<>?
     </body>
   </message>

S: <stream:error>
     <not-well-formed
         xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
     <text xml:lang='en' xmlns='urn:ietf:params:xml:ns:xmpp-streams'>
       Some special application diagnostic information!
     </text>
     <escape-your-data xmlns='http://example.org/ns'/>
   </stream:error>
   </stream:stream>
          ]]></artwork>
        </figure>
      </section>
    </section>

    <section title="Simplified Stream Examples" anchor="streams-example">
      <t>This section contains two highly simplified examples of a stream-based connection between a client and a server; these examples are included for the purpose of illustrating the concepts introduced thus far, but the reader needs to be aware that these examples elide many details (see <xref target='examples'/> for more complete examples).</t>
      <figure>
        <preamble>A basic connection:</preamble>
        <artwork><![CDATA[
C: <?xml version='1.0'?>
   <stream:stream
       from='juliet@im.example.com'
       to='im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>

S: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='++TR84Sm6A3hnt3Q065SnAbbk3Y='
       to='juliet@im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>

[ ... stream negotiation ... ]

C:   <message from='juliet@im.example.com/balcony'
              to='romeo@example.net'
              xml:lang='en'>
       <body>Art thou not Romeo, and a Montague?</body>
     </message>

S:   <message from='romeo@example.net/orchard'
              to='juliet@im.example.com/balcony'
              xml:lang='en'>
       <body>Neither, fair saint, if either thee dislike.</body>
     </message>

C: </stream:stream>

S: </stream:stream>
        ]]></artwork>
      </figure>
      <figure>
        <preamble>A connection gone bad:</preamble>
        <artwork><![CDATA[
C: <?xml version='1.0'?>
   <stream:stream
       from='juliet@im.example.com'
       to='im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>

S: <?xml version='1.0'?>
   <stream:stream
       from='im.example.com'
       id='++TR84Sm6A3hnt3Q065SnAbbk3Y='
       to='juliet@im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>

[ ... stream negotiation ... ]

C:   <message from='juliet@im.example.com/balcony'
              to='romeo@example.net'
              xml:lang='en'>
       <body>No closing tag!
     </message>

S: <stream:error>
    <not-well-formed
        xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>

        ]]></artwork>
      </figure>
      <t>More detailed examples are provided under <xref target="examples"/>.</t>
    </section>
  </section>

  <section title="STARTTLS Negotiation" anchor="tls">
    <section title="Fundamentals" anchor="tls-fundamentals">
      <t>XMPP includes a method for securing the stream from tampering and eavesdropping.  This channel encryption method makes use of the Transport Layer Security <xref target="TLS"/> protocol, specifically a "STARTTLS" extension that is modelled after similar extensions for the <xref target="IMAP"/>, <xref target="POP3"/>, and <xref target="ACAP"/> protocols as described in <xref target="USINGTLS"/>.  The XML namespace name for the STARTTLS extension is 'urn:ietf:params:xml:ns:xmpp-tls'.</t>
    </section>
    <section title="Support" anchor="tls-support">
      <t>Support for STARTTLS is REQUIRED in XMPP client and server implementations.  An administrator of a given deployment MAY specify that TLS is mandatory-to-negotiate for client-to-server communication, server-to-server communication, or both.  An initiating entity SHOULD use TLS to secure its stream with the receiving entity before proceeding with SASL authentication.</t>
    </section>
    <section title="Stream Negotiation Rules" anchor="tls-rules">
      <section title="Mandatory-to-Negotiate" anchor="tls-rules-mtn">
        <t>If the receiving entity advertises only the STARTTLS feature or if the receiving entity includes the &lt;required/&gt; child element as explained under <xref target='tls-process-stream'/>, the parties MUST consider TLS as mandatory-to-negotiate.  If TLS is mandatory-to-negotiate, the receiving entity SHOULD NOT advertise support for any stream feature except STARTTLS during the initial stage of the stream negotiation process, because further stream features might depend on prior negotiation of TLS given the order of layers in XMPP (e.g., the particular SASL mechanisms offered by the receiving entity will likely depend on whether TLS has been negotiated).</t>
      </section>
      <section title="Restart" anchor="tls-rules-restart">
        <t>After TLS negotiation, the parties MUST restart the stream.</t>
      </section>
      <section title="Data Formatting" anchor="tls-rules-data">
        <t>During STARTTLS negotiation, the entities MUST NOT send any whitespace as separators between XML elements (i.e., from the last character of the first-level &lt;starttls/&gt; element qualified by the 'urn:ietf:params:xml:ns:xmpp-tls' namespace as sent by the initiating entity, until the last character of the first-level &lt;proceed/&gt; element qualified by the 'urn:ietf:params:xml:ns:xmpp-tls' namespace as sent by the receiving entity).  This prohibition helps to ensure proper security layer byte precision.  Any such whitespace shown in the STARTTLS examples provided in this document is included only for the sake of readability.</t>
      </section>
      <section title="Order of TLS and SASL Negotiations" anchor="tls-rules-order">
        <t>If the initiating entity chooses to use TLS, STARTTLS negotiation MUST be completed before proceeding to <xref target='sasl'>SASL negotiation</xref>; this order of negotiation is necessary to help safeguard authentication information sent during SASL negotiation, as well as to make it possible to base the use of the SASL EXTERNAL mechanism on a certificate (or other credentials) provided during prior TLS negotiation.</t>
      </section>
      <section title="TLS Renegotiation" anchor="tls-rules-renegotiation">
        <t>The TLS protocol allows either party in a TLS-protected channel to initiate a new handshake that establishes new cryptographic parameters (see <xref target='TLS-NEG'/>).  The cases most commonly mentioned are:</t>
        <t>
          <list style='numbers'>
            <t>Refreshing encryption keys.<vspace blankLines='1'/></t>
            <t>Wrapping the TLS sequence number as explained in Section 6.1 of <xref target='TLS'/>.<vspace blankLines='1'/></t>
            <t>Protecting client credentials by completing server authentication first and then completing client authentication over the protected channel.</t>
          </list>
        </t>
        <t>Because it is relatively inexpensive to establish streams in XMPP, for the first two cases it is preferable to use an XMPP stream reset (as described under <xref target='streams-error-conditions-reset'/>) instead of performing TLS renegotiation.</t>
        <t>The third case has improved security characteristics when the TLS client (which might be an XMPP server) presents credentials to the TLS server.  If communicating such credentials to an unauthenticated TLS server might leak private information, it can be appropriate to complete TLS negotiation for the purpose of authenticating the TLS server to the TLS client and then attempt TLS renegotiation for the purpose of authenticating the TLS client to the TLS server.  However, this case is extremely rare because the credentials presented by an XMPP server or XMPP client acting as a TLS client are almost always public (i.e., a PKIX certificate) and therefore providing those credentials before authenticating the XMPP server acting as a TLS server would not in general leak private information.</t>
        <t>As a result, implementers are encouraged to carefully weigh the costs and benefits of TLS renegotiation before supporting it in their software, and XMPP entities that act as TLS clients are discouraged from attempting TLS renegotiation unless the certificate (or other credential information) sent during TLS negotiation is known to be private.</t>
        <t>Support for TLS renegotiation is strictly OPTIONAL.  However, implementations that support TLS renegotiation MUST implement and use the TLS Renegotiation Extension <xref target='TLS-NEG'/>.</t>
        <t>If an entity that does not support TLS renegotiation detects a renegotiation attempt, then it MUST immediately close the underlying TCP connection without returning a stream error (since the violation has occurred at the TLS layer, not the XMPP layer, as described under <xref target='security-layers'/>).</t>
        <t>If an entity that supports TLS renegotiation detects a TLS renegotiation attempt that does not use the TLS Renegotiation Extension <xref target='TLS-NEG'/>, then it MUST immediately close the underlying TCP connection without returning a stream error (since the violation has occurred at the TLS layer, not the XMPP layer as described under <xref target='security-layers'/>).</t> 
      </section>
      <section title="TLS Extensions" anchor="tls-rules-extensions">
        <t>Either party to a stream MAY include any TLS extension during the TLS negotiation itself.  This is a matter for the TLS layer, not the XMPP layer.</t>
      </section>
    </section>
    <section title="Process" anchor="tls-process">
      <section title="Exchange of Stream Headers and Stream Features" anchor="tls-process-stream">
        <t>The initiating entity resolves the FQDN of the receiving entity as specified under <xref target='tcp'/>, opens a TCP connection to the advertised port at the resolved IP address, and sends an initial stream header to the receiving entity.</t>
        <figure>
          <artwork><![CDATA[
I: <stream:stream
     from='juliet@im.example.com'
     to='im.example.com'
     version='1.0'
     xml:lang='en'
     xmlns='jabber:client'
     xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <t>The receiving entity MUST send a response stream header to the initiating entity over the TCP connection opened by the initiating entity.</t>
        <figure>
          <artwork><![CDATA[
R: <stream:stream
     from='im.example.com'
     id='t7AMCin9zjMNwQKDnplntZPIDEI='
     to='juliet@im.example.com'
     version='1.0'
     xml:lang='en'
     xmlns='jabber:client'
     xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <t>The receiving entity then MUST send stream features to the initiating entity.  If the receiving entity supports TLS, the stream features MUST include an advertisement for support of STARTTLS negotiation, i.e., a &lt;starttls/&gt; element qualified by the 'urn:ietf:params:xml:ns:xmpp-tls' namespace.</t>
        <t>If the receiving entity considers STARTTLS negotiation to be mandatory-to-negotiate, the &lt;starttls/&gt; element MUST contain an empty &lt;required/&gt; child element.</t>
        <figure>
          <artwork><![CDATA[
R: <stream:features>
     <starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'>
       <required/>
     </starttls>
   </stream:features>
          ]]></artwork>
        </figure>
      </section>
      <section title="Initiation of STARTTLS Negotiation" anchor="tls-process-initiate">
        <section title="STARTTLS Command" anchor="tls-process-initiate-command">
          <t>In order to begin the STARTTLS negotiation, the initiating entity issues the STARTTLS command (i.e., a &lt;starttls/&gt; element qualified by the 'urn:ietf:params:xml:ns:xmpp-tls' namespace) to instruct the receiving entity that it wishes to begin a STARTTLS negotiation to secure the stream.</t>
          <figure>
            <artwork><![CDATA[
I: <starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>
            ]]></artwork>
          </figure>
          <t>The receiving entity MUST reply with either a &lt;proceed/&gt; element (proceed case) or a &lt;failure/&gt; element (failure case) qualified by the 'urn:ietf:params:xml:ns:xmpp-tls' namespace.</t>
        </section>
        <section title="Failure Case" anchor="tls-process-initiate-failure">
          <t>If the failure case occurs, the receiving entity MUST return a &lt;failure/&gt; element qualified by the 'urn:ietf:params:xml:ns:xmpp-tls' namespace, close the XML stream, and terminate the underlying TCP connection.</t>
          <figure>
            <artwork><![CDATA[
R: <failure xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>

R: </stream:stream>
            ]]></artwork>
          </figure>
          <t>Causes for the failure case include but are not limited to:</t>
          <t>
            <list style='numbers'>
              <t>The initiating entity has sent a malformed STARTTLS command.<vspace blankLines='1'/></t>
              <t>The receiving entity did not offer the STARTTLS feature in its stream features.<vspace blankLines='1'/></t>
              <t>The receiving entity cannot complete STARTTLS negotiation because of an internal error.</t>
            </list>
          </t>
          <t><list style='empty'><t>Informational Note: STARTTLS failure is not triggered by TLS errors such as bad_certificate or handshake_failure, which are generated and handled during the TLS negotiation itself as described in <xref target='TLS'/>.</t></list></t>
          <t>If the failure case occurs, the initiating entity MAY attempt to reconnect as explained under <xref target='tcp-reconnect'/>.</t>
        </section>
        <section title="Proceed Case" anchor="tls-process-initiate-proceed">
          <t>If the proceed case occurs, the receiving entity MUST return a &lt;proceed/&gt; element qualified by the 'urn:ietf:params:xml:ns:xmpp-tls' namespace.</t>
          <figure>
            <artwork><![CDATA[
R: <proceed xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>
            ]]></artwork>
          </figure>
          <t>The receiving entity MUST consider the TLS negotiation to have begun immediately after sending the closing '&gt;' character of the &lt;proceed/&gt; element to the initiating entity.  The initiating entity MUST consider the TLS negotiation to have begun immediately after receiving the closing '&gt;' character of the &lt;proceed/&gt; element from the receiving entity.</t>
          <t>The entities now proceed to TLS negotiation as explained in the next section.</t>
        </section>
      </section>
      <section title="TLS Negotiation" anchor="tls-process-neg">
        <section title="Rules" anchor="tls-process-neg-rules">
          <t>In order to complete TLS negotiation over the TCP connection, the entities MUST follow the process defined in <xref target='TLS'/>.</t>
          <t>The following rules apply:</t>
          <t>
            <list style='numbers'>
              <t>The entities MUST NOT send any further XML data until the TLS negotiation is complete.<vspace blankLines='1'/></t>
              <t>When using any of the mandatory-to-implement (MTI) ciphersuites specified under <xref target='security-mti'/>, the receiving entity MUST present a certificate.<vspace blankLines='1'/></t>
              <t>So that mutual certificate authentication will be possible, the receiving entity SHOULD send a certificate request to the initiating entity and the initiating entity SHOULD send a certificate to the receiving entity (but for privacy reasons might opt not to send a certificate until after the receiving entity has authenticated to the initiating entity).<vspace blankLines='1'/></t>
              <t>The receiving entity SHOULD choose which certificate to present based on the domainpart contained in the 'to' attribute of the initial stream header (in essence, this domainpart is functionally equivalent to the Server Name Indication defined for TLS in <xref target='TLS-EXT'/>).<vspace blankLines='1'/></t>
              <t>To determine if the TLS negotiation will succeed, the initiating entity MUST attempt to validate the receiving entity's certificate in accordance with the certificate validation procedures specified under <xref target="security-certificates-validation"/>.<vspace blankLines='1'/></t>
              <t>If the initiating entity presents a certificate, the receiving entity too MUST attempt to validate the initiating entity's certificate in accordance with the certificate validation procedures specified under <xref target="security-certificates-validation"/>.<vspace blankLines='1'/></t>
              <t>Following successful TLS negotiation, all further data transmitted by either party MUST be protected with the negotiated algorithms, keys, and secrets (i.e., encrypted, integrity-protected, or both depending on the ciphersuite used).</t>
            </list>
          </t>
          <t><list style='empty'><t>Security Warning: See <xref target="security-mti"/> regarding ciphersuites that MUST be supported for TLS; naturally, other ciphersuites MAY be supported as well.</t></list></t>
        </section>
        <section title="TLS Failure" anchor="tls-process-neg-failure">
          <t>If the TLS negotiation results in failure, the receiving entity MUST terminate the TCP connection.</t>
          <t>The receiving entity MUST NOT send a closing &lt;/stream&gt; tag before terminating the TCP connection (since the failure has occurred at the TLS layer, not the XMPP layer as described under <xref target='security-layers'/>).</t>
          <t>The initiating entity MAY attempt to reconnect as explained under <xref target='tcp-reconnect'/>, with or without attempting TLS negotiation (in accordance with local service policy, user-configured preferences, etc.).</t>
        </section>
        <section title="TLS Success" anchor="tls-process-neg-success">
          <t>If the TLS negotiation is successful, then the entities MUST proceed as follows.</t>
          <t>
            <list style='numbers'>
              <t>The initiating entity MUST discard any information transmitted in layers above TCP that it obtained from the receiving entity in an insecure manner before TLS took effect (e.g., the receiving entity's 'from' address or the stream ID and stream features received from the receiving entity).<vspace blankLines='1'/></t>
              <t>The receiving entity MUST discard any information transmitted in layers above TCP that it obtained from the initiating entity in an insecure manner before TLS took effect (e.g., the initiating entity's 'from' address).<vspace blankLines='1'/></t>
              <t>The initiating entity MUST send a new initial stream header to the receiving entity over the encrypted connection (as specified under <xref target='streams-negotiation-restart'/>, the initiating entity MUST NOT send a closing &lt;/stream&gt; tag before sending the new initial stream header, since the receiving entity and initiating entity MUST consider the original stream to be replaced upon success of the TLS negotiation).
                <figure>
                  <artwork><![CDATA[
I: <stream:stream
     from='juliet@im.example.com'
     to='im.example.com'
     version='1.0'
     xml:lang='en'
     xmlns='jabber:client'
     xmlns:stream='http://etherx.jabber.org/streams'>
                  ]]></artwork>
                </figure>
              <vspace blankLines='1'/></t>
              <t>The receiving entity MUST respond with a new response stream header over the encrypted connection (for which it MUST generate a new stream ID instead of re-using the old stream ID).
                <figure>
                  <artwork><![CDATA[
R: <stream:stream
     from='im.example.com'
     id='vgKi/bkYME8OAj4rlXMkpucAqe4='
     to='juliet@im.example.com'
     version='1.0'
     xml:lang='en'
     xmlns='jabber:client'
     xmlns:stream='http://etherx.jabber.org/streams'>
                  ]]></artwork>
                </figure>
              <vspace blankLines='1'/></t>
              <t>The receiving entity also MUST send stream features to the initiating entity, which MUST NOT include the STARTTLS feature but which SHOULD include the SASL stream feature as described under <xref target='sasl'/> (see especially <xref target='sasl-process-stream'/> regarding the few reasons why the SASL stream feature would not be offered here).
                <figure>
                  <artwork><![CDATA[
R: <stream:features>
     <mechanisms xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
       <mechanism>EXTERNAL</mechanism>
       <mechanism>SCRAM-SHA-1-PLUS</mechanism>
       <mechanism>SCRAM-SHA-1</mechanism>
       <mechanism>PLAIN</mechanism>
     </mechanisms>
   </stream:features>
                  ]]></artwork>
                </figure>
              </t>
            </list>
          </t>
        </section>
      </section>
    </section>
  </section>

  <section title="SASL Negotiation" anchor="sasl">
    <section title="Fundamentals" anchor="sasl-fundamentals">
      <t>XMPP includes a method for authenticating a stream by means of an XMPP-specific profile of the Simple Authentication and Security Layer protocol (see <xref target="SASL"/>).  SASL provides a generalized method for adding authentication support to connection-based protocols, and XMPP uses an XML namespace profile of SASL that conforms to the profiling requirements of <xref target="SASL"/>.  The XML namespace name for the SASL extension is 'urn:ietf:params:xml:ns:xmpp-sasl'.</t>
    </section>
    <section title="Support" anchor="sasl-support">
      <t>Support for SASL negotiation is REQUIRED in XMPP client and server implementations.</t>
    </section>
    <section title="Stream Negotiation Rules" anchor="sasl-rules">
      <section title="Mandatory-to-Negotiate" anchor="sasl-rules-mtn">
        <t>The parties to a stream MUST consider SASL as mandatory-to-negotiate.</t>
      </section>
      <section title="Restart" anchor="sasl-rules-restart">
        <t>After SASL negotiation, the parties MUST restart the stream.</t>
      </section>
      <section title="Mechanism Preferences" anchor="sasl-rules-preferences">
        <t>Any entity that will act as a SASL client or a SASL server MUST maintain an ordered list of its preferred SASL mechanisms according to the client or server, where the list is ordered according to local policy or user configuration (which SHOULD be in order of perceived strength to enable the strongest authentication possible).  The initiating entity MUST maintain its own preference order independent of the preference order of the receiving entity.  A server MUST offer and a client MUST try SASL mechanisms in preference order.  For example, if the server offers the ordered list "PLAIN SCRAM-SHA-1 GSSAPI" or "SCRAM-SHA-1 GSSAPI PLAIN" but the client's ordered list is "GSSAPI SCRAM-SHA-1", the client MUST try GSSAPI first and then SCRAM-SHA-1 but MUST NOT try PLAIN (since PLAIN is not on its list).</t>
      </section>
      <section title="Mechanism Offers" anchor="sasl-rules-offers">
        <t>If the receiving entity considers <xref target='tls'>TLS negotiation</xref> to be mandatory-to-negotiate before it will accept authentication with a particular SASL mechanism, it MUST NOT advertise that mechanism in its list of available SASL mechanisms before TLS negotiation has been completed.</t>
        <t>The receiving entity SHOULD offer the SASL EXTERNAL mechanism if both of the following conditions hold:</t>
        <t>
          <list style='numbers'>
            <t>During TLS negotiation the initiating entity presented a certificate that is acceptable to the receiving entity for purposes of strong identity verification in accordance with local service policies (e.g., because said certificate is unexpired, is unrevoked, and is anchored to a root trusted by the receiving entity).<vspace blankLines='1'/></t>
            <t>The receiving entity expects that the initiating entity will be able to authenticate and authorize as the identity provided in the certificate; in the case of a server-to-server stream, the receiving entity might have such an expectation because a DNS domain name presented in the initiating entity's certificate matches the domain referenced in the 'from' attribute of the initial stream header, where the matching rules of <xref target='TLS-CERTS'/> apply; in the case of a client-to-server stream, the receiving entity might have such an expectation because the bare JID presented in the initiating entity's certificate matches a user account that is registered with the server or because other information contained in the initiating entity's certificate matches that of an entity that has permission to use the server for access to an XMPP network.</t>
          </list>
        </t>
        <t>However, the receiving entity MAY offer the SASL EXTERNAL mechanism under other circumstances, as well.</t>
        <t>When the receiving entity offers the SASL EXTERNAL mechanism, the receiving entity SHOULD list the EXTERNAL mechanism first among its offered SASL mechanisms and the initiating entity SHOULD attempt SASL negotiation using the EXTERNAL mechanism first (this preference will tend to increase the likelihood that the parties can negotiate mutual certificate authentication).</t>
        <t><xref target="security-mti"/> specifies SASL mechanisms that MUST be supported; naturally, other SASL mechanisms MAY be supported as well.</t>
        <t><list style='empty'><t>Informational Note: Best practices for the use of SASL in the context of XMPP are described in <xref target='XEP-0175'/> for the ANONYMOUS mechanism and in <xref target='XEP-0178'/> for the EXTERNAL mechanism.</t></list></t>
      </section>
      <section title="Data Formatting" anchor="sasl-rules-data">
        <t>The following data formatting rules apply to the SASL negotiation:</t>
        <t>
          <list style='numbers'>
            <t>During SASL negotiation, the entities MUST NOT send any whitespace as separators between XML elements (i.e., from the last character of the first-level &lt;auth/&gt; element qualified by the 'urn:ietf:params:xml:ns:xmpp-sasl' namespace as sent by the initiating entity, until the last character of the first-level &lt;success/&gt; element qualified by the 'urn:ietf:params:xml:ns:xmpp-sasl' namespace as sent by the receiving entity).  This prohibition helps to ensure proper security layer byte precision.  Any such whitespace shown in the SASL examples provided in this document is included only for the sake of readability.<vspace blankLines='1'/></t>
            <t>Any XML character data contained within the XML elements MUST be encoded using base 64, where the encoding adheres to the definition in Section 4 of <xref target="BASE64"/> and where the padding bits are set to zero.<vspace blankLines='1'/></t>
            <t>As formally specified in the XML schema for the 'urn:ietf:params:xml:ns:xmpp-sasl' namespace under <xref target='schemas-sasl'/>, the receiving entity MAY include one or more application-specific child elements inside the &lt;mechanisms/&gt; element to provide information that might be needed by the initiating entity in order to complete successful SASL negotiation using one or more of the offered mechanisms; however, the syntax and semantics of all such elements are out of scope for this specification (see <xref target='XEP-0233'/> for one example).</t>
          </list>
        </t>
      </section>
      <section title="Security Layers" anchor="sasl-rules-layers">
        <t>Upon successful SASL negotiation that involves negotiation of a security layer, both the initiating entity and the receiving MUST discard any application-layer state (i.e, state from the XMPP layer, excluding state from the TLS negotiation or SASL negotiation).</t>
      </section>
      <section title="Simple User Name" anchor="sasl-rules-username">
        <t>Some SASL mechanisms (e.g., CRAM-MD5, DIGEST-MD5, and SCRAM) specify that the authentication identity used in the context of such mechanisms is a "simple user name" (see Section 2 of <xref target='SASL'/> as well as <xref target='SASLPREP'/>).  The exact form of the simple user name in any particular mechanism or deployment thereof is a local matter, and a simple user name does not necessarily map to an application identifier such as a JID or JID component (e.g., a localpart).  However, in the absence of local information provided by the server, an XMPP client SHOULD assume that the authentication identity for such a SASL mechanism is a simple user name equal to the localpart of the user's JID.</t>
      </section>
      <section title="Authorization Identity" anchor="sasl-rules-authzid">
        <t>An authorization identity is an OPTIONAL identity included by the initiating entity to specify an identity to act as (see Section 2 of <xref target='SASL'/>).  In client-to-server streams it would most likely be used by an administrator to perform some management task on behalf of another user, whereas in server-to-server streams it would most likely be used to specify a particular add-on service at an XMPP service (e.g., a multi-user chat server at conference.example.com that is hosted by the example.com XMPP service).  If the initiating entity wishes to act on behalf of another entity and the selected SASL mechanism supports transmission of an authorization identity, the initiating entity MUST provide an authorization identity during SASL negotiation.  If the initiating entity does not wish to act on behalf of another entity, it MUST NOT provide an authorization identity.</t>
        <t>In the case of client-to-server communication, the value of an authorization identity MUST be a bare JID (&lt;localpart@domainpart&gt;) rather than a full JID (&lt;localpart@domainpart/resourcepart&gt;).</t>
        <t>In the case of server-to-server communication, the value of an authorization identity MUST be a domainpart only (&lt;domainpart&gt;).</t>
        <t>If the initiating entity provides an authorization identity during SASL negotiation, the receiving entity is responsible for verifying that the initiating entity is in fact allowed to assume the specified authorization identity; if not, the receiving entity MUST return an &lt;invalid-authzid/&gt; SASL error as described under <xref target='sasl-errors-invalid-authzid'/>.</t>
      </section>
      <section title="Realms" anchor="sasl-rules-realms">
        <t>The receiving entity MAY include a realm when negotiating certain SASL mechanisms (e.g., both the GSSAPI and DIGEST-MD5 mechanisms allow the authentication exchange to include a realm, though in different ways, whereas the EXTERNAL, SCRAM, and PLAIN mechanisms do not).  If the receiving entity does not communicate a realm, the initiating entity MUST NOT assume that any realm exists.  The realm MUST be used only for the purpose of authentication; in particular, an initiating entity MUST NOT attempt to derive an XMPP domainpart from the realm information provided by the receiving entity.</t>
      </section>
      <section title="Round Trips" anchor="sasl-rules-roundtrips">
        <t><xref target='SASL'/> specifies that a using protocol such as XMPP can define two methods by which the protocol can save round trips where allowed for the SASL mechanism:</t>
        <t>
          <list style='numbers'>
            <t>When the SASL client (the XMPP "initiating entity") requests an authentication exchange, it can include "initial response" data with its request if appropriate for the SASL mechanism in use.  In XMPP this is done by including the initial response as the XML character data of the &lt;auth/&gt; element.<vspace blankLines='1'/></t>
            <t>At the end of the authentication exchange, the SASL server (the XMPP "receiving entity") can include "additional data with success" if appropriate for the SASL mechanism in use.  In XMPP this is done by including the additional data as the XML character data of the &lt;success/&gt; element.</t>
          </list>
        </t>
        <t>For the sake of protocol efficiency, it is REQUIRED for clients and servers to support these methods and RECOMMENDED to use them; however clients and servers MUST support the less efficient modes as well.</t>
      </section>
    </section>
    <section title="Process" anchor="sasl-process">
      <t>The process for SASL negotiation is as follows.</t>
      <section title="Exchange of Stream Headers and Stream Features" anchor="sasl-process-stream">
        <t>If SASL negotiation follows successful <xref target='tls'>STARTTLS negotiation</xref>, then the SASL negotiation occurs over the protected stream that has already been negotiated.  If not, the initiating entity resolves the FQDN of the receiving entity as specified under <xref target='tcp'/>, opens a TCP connection to the advertised port at the resolved IP address, and sends an initial stream header to the receiving entity.  In either case, the receiving entity will receive an initial stream from the initiating entity.</t>
        <figure>
          <artwork><![CDATA[
I: <stream:stream
     from='juliet@im.example.com'
     to='im.example.com'
     version='1.0'
     xml:lang='en'
     xmlns='jabber:client'
     xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <t>When the receiving entity processes an initial stream header from the initiating entity, it MUST send a response stream header to the initiating entity (for which it MUST generate a unique stream ID; if TLS negotiation has already succeeded then this stream ID MUST be different from the stream ID sent before TLS negotiation succeeded).</t>
        <figure>
          <artwork><![CDATA[
R: <stream:stream
     from='im.example.com'
     id='vgKi/bkYME8OAj4rlXMkpucAqe4='
     to='juliet@im.example.com'
     version='1.0'
     xml:lang='en'
     xmlns='jabber:client'
     xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <t>The receiving entity also MUST send stream features to the initiating entity.  The stream features SHOULD include an advertisement for support of SASL negotiation, i.e., a &lt;mechanisms/&gt; element qualified by the 'urn:ietf:params:xml:ns:xmpp-sasl' namespace.  Typically there are only three cases in which support for SASL negotiation would not be advertised here:</t>
        <t>
          <list style='symbols'>
            <t>TLS negotiation needs to happen before SASL can be offered (i.e., TLS is required and the receiving entity is responding to the very first initial stream header it has received for this connection attempt).<vspace blankLines='1'/></t>
            <t>SASL negotiation is impossible for a server-to-server connection (i.e., the initiating server has not provided a certificate that would enable strong authentication and therefore the receiving server is falling back to weak identity verification using the Server Dialback protocol <xref target='XEP-0220'/>).<vspace blankLines='1'/></t>
            <t>SASL has already been negotiated (i.e., the receiving entity is responding to an initial stream header sent as a stream restart after successful SASL negotiation).</t>
          </list>
        </t>
        <t>The &lt;mechanisms/&gt; element MUST contain one &lt;mechanism/&gt; child element for each authentication mechanism the receiving entity offers to the initiating entity.  As noted, the order of &lt;mechanism/&gt; elements in the XML indicates the preference order of the SASL mechanisms according to the receiving entity (which is not necessarily the preference order according to the initiating entity).</t>
        <figure>
          <artwork><![CDATA[
R: <stream:features>
     <mechanisms xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
       <mechanism>EXTERNAL</mechanism>
       <mechanism>SCRAM-SHA-1-PLUS</mechanism>
       <mechanism>SCRAM-SHA-1</mechanism>
       <mechanism>PLAIN</mechanism>
     </mechanisms>
   </stream:features>
          ]]></artwork>
        </figure>
      </section>
      <section title="Initiation" anchor="sasl-process-neg-initiate">
        <t>In order to begin the SASL negotiation, the initiating entity sends an &lt;auth/&gt; element qualified by the 'urn:ietf:params:xml:ns:xmpp-sasl' namespace and includes an appropriate value for the 'mechanism' attribute, thus starting the handshake for that particular authentication mechanism.  This element MAY contain XML character data (in SASL terminology, the "initial response") if the mechanism supports or requires it; if the initiating entity needs to send a zero-length initial response, it MUST transmit the response as a single equals sign character ("="), which indicates that the response is present but contains no data.</t>
        <figure>
          <artwork><![CDATA[
I: <auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl'
         mechanism='PLAIN'>AGp1bGlldAByMG0zMG15cjBtMzA=</auth>
          ]]></artwork>
        </figure>
        <t>If the initiating entity subsequently sends another &lt;auth/&gt; element and the ongoing authentication handshake has not yet completed, the receiving entity MUST discard the ongoing handshake and MUST process a new handshake for the subsequently requested SASL mechanism.</t>
      </section>
      <section title="Challenge-Response Sequence" anchor="sasl-process-neg-challengeresponse">
        <t>If necessary, the receiving entity challenges the initiating entity by sending a &lt;challenge/&gt; element qualified by the 'urn:ietf:params:xml:ns:xmpp-sasl' namespace; this element MAY contain XML character data (which MUST be generated in accordance with the definition of the SASL mechanism chosen by the initiating entity).</t>
        <t>The initiating entity responds to the challenge by sending a &lt;response/&gt; element qualified by the 'urn:ietf:params:xml:ns:xmpp-sasl' namespace; this element MAY contain XML character data (which MUST be generated in accordance with the definition of the SASL mechanism chosen by the initiating entity).</t>
        <t>If necessary, the receiving entity sends more challenges and the initiating entity sends more responses.</t>
        <t>This series of challenge/response pairs continues until one of three things happens:</t>
        <t>
          <list style='symbols'>
            <t>The initiating entity aborts the handshake for this authentication mechanism.</t>
            <t>The receiving entity reports failure of the handshake.</t>
            <t>The receiving entity reports success of the handshake.</t>
          </list>
        </t>
        <t>These scenarios are described in the following sections.</t>
      </section>
      <section title="Abort" anchor="sasl-process-neg-abort">
        <t>The initiating entity aborts the handshake for this authentication mechanism by sending an &lt;abort/&gt; element qualified by the 'urn:ietf:params:xml:ns:xmpp-sasl' namespace.</t>
        <figure>
          <artwork><![CDATA[
I: <abort xmlns='urn:ietf:params:xml:ns:xmpp-sasl'/>
          ]]></artwork>
        </figure>
        <t>Upon receiving an &lt;abort/&gt; element, the receiving entity MUST return a &lt;failure/&gt; element qualified by the 'urn:ietf:params:xml:ns:xmpp-sasl' namespace and containing an &lt;aborted/&gt; child element.</t>
        <figure>
          <artwork><![CDATA[
R: <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'/>
     <aborted/>
   </failure>
          ]]></artwork>
        </figure>
      </section>
      <section title="SASL Failure" anchor="sasl-process-neg-failure">
        <t>The receiving entity reports failure of the handshake for this authentication mechanism by sending a &lt;failure/&gt; element qualified by the 'urn:ietf:params:xml:ns:xmpp-sasl' namespace (the particular cause of failure MUST be communicated in an appropriate child element of the &lt;failure/&gt; element as defined under <xref target="sasl-errors"/>).</t>
        <figure>
          <artwork><![CDATA[
R: <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
     <not-authorized/>
   </failure>
          ]]></artwork>
        </figure>
        <t>Where appropriate for the chosen SASL mechanism, the receiving entity SHOULD allow a configurable but reasonable number of retries (at least 2 and no more than 5); this enables the initiating entity (e.g., an end-user client) to tolerate incorrectly-provided credentials (e.g., a mistyped password) without being forced to reconnect (which it would if the receiving entity immediately returned a SASL failure and closed the stream).</t>
        <t>If the initiating entity attempts a reasonable number of retries with the same SASL mechanism and all attempts fail, it MAY fall back to the next mechanism in its ordered list by sending a new &lt;auth/&gt; request to the receiving entity, thus starting a new handshake for that authentication mechanism.  If all handshakes fail and there are no remaining mechanisms in the initiating entity's list of supported and acceptable mechanisms, the initiating entity SHOULD simply close the stream as described under <xref target='streams-close'/> (instead of waiting for the stream to time out).</t>
        <t>If the initiating entity exceeds the number of retries, the receiving entity MUST close the stream with a stream error, which SHOULD be &lt;policy-violation/&gt; (<xref target='streams-error-conditions-policy-violation'/>), although some existing implementations send &lt;not-authorized/&gt; (<xref target='streams-error-conditions-not-authorized'/>) instead.</t>
        <t><list style='empty'><t>Implementation Note: For server-to-server streams, if the receiving entity cannot offer the SASL EXTERNAL mechanism or any other SASL mechanism based on the security context established during TLS negotiation, the receiving entity MAY attempt to complete weak identity verification using the Server Dialback protocol <xref target='XEP-0220'/>; however, if according to local service policies weak identity verification is insufficient then the receiving entity SHOULD instead close the stream with a &lt;policy-violation/&gt; stream error (<xref target='streams-error-conditions-policy-violation'/>) instead of waiting for the stream to time out.</t></list></t>
      </section>
      <section title="SASL Success" anchor="sasl-process-neg-success">
        <t>Before considering the SASL handshake to be a success, if the initiating entity provided a 'from' attribute on an initial stream header whose confidentiality and integrity were protected via TLS or an equivalent security layer (such as the SASL GSSAPI mechanism) then the receiving entity SHOULD correlate the authentication identity resulting from the SASL negotiation with that 'from' address; if the two identities do not match then the receiving entity SHOULD terminate the connection attempt (however, the receiving entity might have legitimate reasons not to terminate the connection attempt, for example because it has overridden a connecting client's address to correct the JID format or assign a JID based on information presented in an end-user certificate).</t>
        <t>The receiving entity reports success of the handshake by sending a &lt;success/&gt; element qualified by the 'urn:ietf:params:xml:ns:xmpp-sasl' namespace; this element MAY contain XML character data (in SASL terminology, "additional data with success") if the chosen SASL mechanism supports or requires it; if the receiving entity needs to send additional data of zero length, it MUST transmit the data as a single equals sign character ("=").</t>
        <figure>
          <artwork><![CDATA[
R: <success xmlns='urn:ietf:params:xml:ns:xmpp-sasl'/>
          ]]></artwork>
        </figure>
        <t><list style='empty'><t>Informational Note: For client-to-server streams, the authorization identity communicated during SASL negotiation is used to determine the canonical address for the initiating client according to the receiving server, as described under <xref target='streams-negotiation-address'/>.</t></list></t>
        <t>Upon receiving the &lt;success/&gt; element, the initiating entity MUST initiate a new stream over the existing TCP connection by sending a new initial stream header to the receiving entity (as specified under <xref target='streams-negotiation-restart'/>, the initiating entity MUST NOT send a closing &lt;/stream&gt; tag before sending the new initial stream header, since the receiving entity and initiating entity MUST consider the original stream to be replaced upon success of the SASL negotiation).</t>
        <figure>
          <artwork><![CDATA[
I: <stream:stream
     from='juliet@im.example.com'
     to='im.example.com'
     version='1.0'
     xml:lang='en'
     xmlns='jabber:client'
     xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <t>Upon receiving the new initial stream header from the initiating entity, the receiving entity MUST respond by sending a new response stream header to the initiating entity (for which it MUST generate a new stream ID instead of re-using the old stream ID).</t>
        <figure>
          <artwork><![CDATA[
R: <stream:stream
     from='im.example.com'
     id='gPybzaOzBmaADgxKXu9UClbprp0='
     to='juliet@im.example.com'
     version='1.0'
     xml:lang='en'
     xmlns='jabber:client'
     xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <t>The receiving entity MUST also send stream features, containing any further available features or containing no features (via an empty &lt;features/&gt; element).</t>
        <figure>
          <artwork><![CDATA[
R: <stream:features>
     <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'/>
   </stream:features>
          ]]></artwork>
        </figure>
      </section>
    </section>
    <section title="SASL Errors" anchor="sasl-errors">
      <t>The syntax of SASL errors is as follows , where the XML data shown within the square brackets '[' and ']' is OPTIONAL.</t>
      <figure>
        <artwork><![CDATA[
<failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
  <defined-condition/>
  [<text xml:lang='langcode'>
      OPTIONAL descriptive text
  </text>]
</failure>
        ]]></artwork>
      </figure>
      <t>The "defined-condition" MUST be one of the SASL-related error conditions defined in the following sections.  However, because additional error conditions might be defined in the future, if an entity receives a SASL error condition that it does not understand then it MUST treat the unknown condition as a generic authentication failure, i.e., as equivalent to &lt;not-authorized/&gt; (<xref target='sasl-errors-not-authorized'/>).</t>
      <t>Inclusion of the &lt;text/&gt; element is OPTIONAL, and can be used to provide application-specific information about the error condition, which information MAY be displayed to a human but only as a supplement to the defined condition.</t>
      <t>Because XMPP itself defines an application profile of SASL and there is no expectation that more specialized XMPP applications will be built on top of SASL, the SASL error format does not provide extensibility for application-specific error conditions as is done for XML streams (<xref target='streams-error-app'/>) and XML stanzas (<xref target='stanzas-error-app'/>).</t>
      <section title="aborted" anchor="sasl-errors-aborted">
        <t>The receiving entity acknowledges that the authentication handshake has been aborted by the initiating entity; sent in reply to the &lt;abort/&gt; element.</t>
        <figure>
          <artwork><![CDATA[
I: <abort xmlns='urn:ietf:params:xml:ns:xmpp-sasl'/>

R: <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
     <aborted/>
   </failure>
          ]]></artwork>
        </figure>
      </section>
      <section title="account-disabled" anchor="sasl-errors-account-disabled">
        <t>The account of the initiating entity has been temporarily disabled; sent in reply to an &lt;auth/&gt; element (with or without initial response data) or a &lt;response/&gt; element.</t>
        <figure>
          <artwork><![CDATA[
I: <auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl'
         mechanism='PLAIN'>AGp1bGlldAByMG0zMG15cjBtMzA=</auth>

R: <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
     <account-disabled/>
     <text xml:lang='en'>Call 212-555-1212 for assistance.</text>
   </failure>
          ]]></artwork>
        </figure>
      </section>
      <section title="credentials-expired" anchor="sasl-errors-credentials-expired">
        <t>The authentication failed because the initiating entity provided credentials that have expired; sent in reply to a &lt;response/&gt; element or an &lt;auth/&gt; element with initial response data.</t>
        <figure>
          <artwork><![CDATA[
I: <response xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
     [ ... ]
   </response>

R: <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
     <credentials-expired/>
   </failure>
          ]]></artwork>
        </figure>
      </section>
      <section title="encryption-required" anchor="sasl-errors-encryption-required">
        <t>The mechanism requested by the initiating entity cannot be used unless the confidentiality and integrity of the underlying stream are protected (typically via TLS); sent in reply to an &lt;auth/&gt; element (with or without initial response data).</t>
        <figure>
          <artwork><![CDATA[
I: <auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl'
         mechanism='PLAIN'>AGp1bGlldAByMG0zMG15cjBtMzA=</auth>

R: <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
     <encryption-required/>
   </failure>
          ]]></artwork>
        </figure>
      </section>
      <section title="incorrect-encoding" anchor="sasl-errors-incorrect-encoding">
        <t>The data provided by the initiating entity could not be processed because the Base 64 encoding is incorrect (e.g., because the encoding does not adhere to the definition in Section 4 of <xref target="BASE64"/>); sent in reply to a &lt;response/&gt; element or an &lt;auth/&gt; element with initial response data.</t>
        <figure>
          <artwork><![CDATA[
I: <auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl'
         mechanism='DIGEST-MD5'>[ ... ]</auth>

R: <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
     <incorrect-encoding/>
   </failure>
          ]]></artwork>
        </figure>
      </section>
      <section title="invalid-authzid" anchor="sasl-errors-invalid-authzid">
        <t>The authzid provided by the initiating entity is invalid, either because it is incorrectly formatted or because the initiating entity does not have permissions to authorize that ID; sent in reply to a &lt;response/&gt; element or an &lt;auth/&gt; element with initial response data.</t>
        <figure>
          <artwork><![CDATA[
I: <response xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
     [ ... ]
   </response>

R: <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
     <invalid-authzid/>
   </failure>
          ]]></artwork>
        </figure>
      </section>
      <section title="invalid-mechanism" anchor="sasl-errors-invalid-mechanism">
        <t>The initiating entity did not specify a mechanism, or requested a mechanism that is not supported by the receiving entity; sent in reply to an &lt;auth/&gt; element.</t>
        <figure>
          <artwork><![CDATA[
I: <auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl'
         mechanism='CRAM-MD5'/>

R: <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
     <invalid-mechanism/>
   </failure>
          ]]></artwork>
        </figure>
      </section>
      <section title="malformed-request" anchor="sasl-errors-malformed-request">
        <t>The request is malformed (e.g., the &lt;auth/&gt; element includes initial response data but the mechanism does not allow that, or the data sent violates the syntax for the specified SASL mechanism); sent in reply to an &lt;abort/&gt;, &lt;auth/&gt;, &lt;challenge/&gt;, or &lt;response/&gt; element.</t>
        <t>(In the following example, the XML character data of the &lt;auth/&gt; element contains more than 255 UTF-8-encoded Unicode characters and therefore violates the "token" production for the SASL ANONYMOUS mechanism as specified in <xref target='ANONYMOUS'/>.)</t>
        <figure>
          <artwork><![CDATA[
I: <auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl'
         mechanism='ANONYMOUS'>[ ... some-long-token ... ]</auth>

R: <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
     <malformed-request/>
   </failure>
          ]]></artwork>
        </figure>
      </section>
      <section title="mechanism-too-weak" anchor="sasl-errors-mechanism-too-weak">
        <t>The mechanism requested by the initiating entity is weaker than server policy permits for that initiating entity; sent in reply to an &lt;auth/&gt; element (with or without initial response data).</t>
        <figure>
          <artwork><![CDATA[
I: <auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl'
         mechanism='PLAIN'>AGp1bGlldAByMG0zMG15cjBtMzA=</auth>

R: <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
     <mechanism-too-weak/>
   </failure>
          ]]></artwork>
        </figure>
      </section>
      <section title="not-authorized" anchor="sasl-errors-not-authorized">
        <t>The authentication failed because the initiating entity did not provide proper credentials, or because some generic authentication failure has occurred but the receiving entity does not wish to disclose specific information about the cause of the failure; sent in reply to a &lt;response/&gt; element or an &lt;auth/&gt; element with initial response data.</t>
        <figure>
          <artwork><![CDATA[
I: <response xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
     [ ... ]
   </response>

R: <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
     <not-authorized/>
   </failure>
          ]]></artwork>
        </figure>
        <t><list style='empty'><t>Security Warning: This error condition includes but is not limited to the case of incorrect credentials or a nonexistent username.  In order to discourage directory harvest attacks, no differentiation is made between incorrect credentials and a nonexistent username.</t></list></t>
      </section>
      <section title="temporary-auth-failure" anchor="sasl-errors-temporary-auth-failure">
        <t>The authentication failed because of a temporary error condition within the receiving entity, and it is advisable for the initiating entity to try again later; sent in reply to an &lt;auth/&gt; element or a &lt;response/&gt; element.</t>
        <figure>
          <artwork><![CDATA[
I: <response xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
     [ ... ]
   </response>

R: <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
     <temporary-auth-failure/>
   </failure>
          ]]></artwork>
        </figure>
      </section>
    </section>
    <section title="SASL Definition" anchor="sasl-def">
      <t>The profiling requirements of <xref target="SASL"/> require that the following information be supplied by the definition of a using protocol.</t>
      <t><list style='hanging'>
        <t hangText="service name:">"xmpp"<vspace blankLines='1'/></t>
        <t hangText="initiation sequence:">After the initiating entity provides an opening XML stream header and the receiving entity replies in kind, the receiving entity provides a list of acceptable authentication methods.  The initiating entity chooses one method from the list and sends it to the receiving entity as the value of the 'mechanism' attribute possessed by an &lt;auth/&gt; element, optionally including an initial response to avoid a round trip.<vspace blankLines='1'/></t>
        <t hangText="exchange sequence:">Challenges and responses are carried through the exchange of &lt;challenge/&gt; elements from receiving entity to initiating entity and &lt;response/&gt; elements from initiating entity to receiving entity.  The receiving entity reports failure by sending a &lt;failure/&gt; element and success by sending a &lt;success/&gt; element; the initiating entity aborts the exchange by sending an &lt;abort/&gt; element.  Upon successful negotiation, both sides consider the original XML stream to be closed and new stream headers are sent by both entities.<vspace blankLines='1'/></t>
        <t hangText="security layer negotiation:">The security layer takes effect immediately after sending the closing '&gt;' character of the &lt;success/&gt; element for the receiving entity, and immediately after receiving the closing '&gt;' character of the &lt;success/&gt; element for the initiating entity.  The order of layers is first <xref target="TCP"/>, then <xref target="TLS"/>, then <xref target="SASL"/>, then XMPP.<vspace blankLines='1'/></t>
        <t hangText="use of the authorization identity:">The authorization identity can be used in XMPP to denote the non-default &lt;localpart@domainpart&gt; of a client; an empty string is equivalent to an absent authorization identity.</t>
      </list></t>
    </section>
  </section>

  <section title="Resource Binding" anchor="bind">
    <section title="Fundamentals" anchor="bind-fundamentals">
      <t>After a client authenticates with a server, it MUST bind a specific resource to the stream so that the server can properly address the client.  That is, there MUST be an XMPP resource associated with the bare JID (&lt;localpart@domainpart&gt;) of the client, so that the address for use over that stream is a full JID of the form &lt;localpart@domainpart/resource&gt; (including the resourcepart).  This ensures that the server can deliver XML stanzas to and receive XML stanzas from the client in relation to entities other than the server itself or the client's account, as explained under <xref target="rules"/>.</t>
      <t><list style='empty'><t>Informational Note: The client could exchange stanzas with the server itself or the client's account before binding a resource since the full JID is needed only for addressing outside the context of the stream negotiated between the client and the server, but this is not commonly done.</t></list></t>
      <t>After a client has bound a resource to the stream, it is referred to as a "connected resource".  A server SHOULD allow an entity to maintain multiple connected resources simultaneously, where each connected resource is associated with a distinct XML stream and is differentiated from the other connected resources by a distinct resourcepart.</t>
      <t><list style='empty'><t>Security Warning: A server SHOULD enable the administrator of an XMPP service to limit the number of connected resources in order to prevent certain denial of service attacks as described under <xref target='security-dos'/>.</t></list></t>
      <t>If, before completing the resource binding step, the client attempts to send an XML stanza to an entity other than the server itself or the client's account, the server MUST NOT process the stanza and MUST close the stream with a &lt;not-authorized/&gt; stream error (<xref target='streams-error-conditions-not-authorized'/>).</t>
      <t>The XML namespace name for the resource binding extension is 'urn:ietf:params:xml:ns:xmpp-bind'.</t>
    </section>
    <section title="Support" anchor="bind-support">
      <t>Support for resource binding is REQUIRED in XMPP client and server implementations.</t>
    </section>
    <section title="Stream Negotiation Rules" anchor="bind-rules">
      <section title="Mandatory-to-Negotiate" anchor="bind-rules-mtn">
        <t>The parties to a stream MUST consider resource binding as mandatory-to-negotiate.</t>
      </section>
      <section title="Restart" anchor="bind-rules-restart">
        <t>After resource binding, the parties MUST NOT restart the stream.</t>
      </section>
    </section>
    <section title="Advertising Support" anchor="bind-feature">
      <t>Upon sending a new response stream header to the client after successful SASL negotiation, the server MUST include a &lt;bind/&gt; element qualified by the 'urn:ietf:params:xml:ns:xmpp-bind' namespace in the stream features it presents to the client.</t>
      <t>The server MUST NOT include the resource binding stream feature until after the client has authenticated, typically by means of successful SASL negotiation.</t>
      <figure>
        <artwork><![CDATA[
S: <stream:stream
       from='im.example.com'
       id='gPybzaOzBmaADgxKXu9UClbprp0='
       to='juliet@im.example.com'
       version='1.0'
       xml:lang='en'
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'>

S: <stream:features>
     <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'/>
   </stream:features>
        ]]></artwork>
      </figure>
      <t>Upon being informed that resource binding is mandatory-to-negotiate, the client MUST bind a resource to the stream as described in the following sections.</t>
    </section>
    <section title="Generation of Resource Identifiers" anchor="bind-generation">
      <t>A resourcepart MUST at a minimum be unique among the connected resources for that &lt;localpart@domainpart&gt;.  Enforcement of this policy is the responsibility of the server.</t>
      <t><list style='empty'><t>Security Warning: A resourcepart can be security-critical.  For example, if a malicious entity can guess a client's resourcepart then it might be able to determine if the client (and therefore the controlling principal) is online or offline, thus resulting in a presence leak as described under <xref target='security-leaks-presence'/>.  To prevent that possibility, a client can either (1) generate a random resourcepart on its own or (2) ask the server to generate a resourcepart on its behalf.  One method for ensuring that the resourcepart is random is to generate a Universally Unique Identifier (UUID) as specified in <xref target='UUID'/>.</t></list></t>
    </section>
    <section title="Server-Generated Resource Identifier" anchor="bind-servergen">
      <t>A server MUST be able to generate an XMPP resourcepart on behalf of a client.  The resourcepart generated by the server MUST be random (see <xref target="RANDOM"/>).</t>
      <section title="Success Case" anchor="bind-servergen-success">
        <t>A client requests a server-generated resourcepart by sending an IQ stanza of type "set" (see <xref target="stanzas-semantics-iq"/>) containing an empty &lt;bind/&gt; element qualified by the 'urn:ietf:params:xml:ns:xmpp-bind' namespace.</t>
        <figure>
          <artwork><![CDATA[
C: <iq id='tn281v37' type='set'>
    <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'/>
   </iq>
          ]]></artwork>
        </figure>
        <t>Once the server has generated an XMPP resourcepart for the client, it MUST return an IQ stanza of type "result" to the client, which MUST include a &lt;jid/&gt; child element that specifies the full JID for the connected resource as determined by the server.</t>
        <figure>
          <artwork><![CDATA[
S: <iq id='tn281v37' type='result'>
    <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'>
      <jid>
        juliet@im.example.com/4db06f06-1ea4-11dc-aca3-000bcd821bfb
      </jid>
    </bind>
   </iq>
          ]]></artwork>
        </figure>
      </section>
      <section title="Error Cases" anchor="bind-servergen-error">
        <t>When a client asks the server to generate a resourcepart during resource binding, the following stanza error conditions are defined:</t>
        <t>
          <list style='symbols'>
            <t>The account has reached a limit on the number of simultaneous connected resources allowed.</t>
            <t>The client is otherwise not allowed to bind a resource to the stream.</t>
          </list>
        </t>
        <t>Naturally, it is possible that error conditions not specified here might occur, as described under under <xref target='stanzas-error'/>.</t>
        <section title="Resource Constraint" anchor="bind-servergen-error-resourceconstraint">
          <t>If the account has reached a limit on the number of simultaneous connected resources allowed, the server MUST return a &lt;resource-constraint/&gt; stanza error (<xref target='stanzas-error-conditions-resource-constraint'/>).</t>
          <figure>
            <artwork><![CDATA[
S: <iq id='tn281v37' type='error'>
     <error type='wait'>
       <resource-constraint 
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>
            ]]></artwork>
          </figure>
        </section>
        <section title="Not Allowed" anchor="bind-servergen-error-notallowed">
          <t>If the client is otherwise not allowed to bind a resource to the stream, the server MUST return a &lt;not-allowed/&gt; stanza error (<xref target='stanzas-error-conditions-not-allowed'/>).</t>
          <figure>
            <artwork><![CDATA[
S: <iq id='tn281v37' type='error'>
     <error type='cancel'>
       <not-allowed 
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>
            ]]></artwork>
          </figure>
        </section>
      </section>
    </section>
    <section title="Client-Submitted Resource Identifier" anchor="bind-clientsubmit">
      <t>Instead of asking the server to generate a resourcepart on its behalf, a client MAY attempt to submit a resourcepart that it has generated or that the controlling user has provided.</t>
      <section title="Success Case" anchor="bind-clientsubmit-success">
        <t>A client asks its server to accept a client-submitted resourcepart by sending an IQ stanza of type "set" containing a &lt;bind/&gt; element with a child &lt;resource/&gt; element containing non-zero-length XML character data.</t>
        <figure>
          <artwork><![CDATA[
C: <iq id='wy2xa82b4' type='set'>
     <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'>
       <resource>balcony</resource>
     </bind>
   </iq>
          ]]></artwork>
        </figure>
        <t>The server SHOULD accept the client-submitted resourcepart.  It does so by returning an IQ stanza of type "result" to the client, including a &lt;jid/&gt; child element that specifies the full JID for the connected resource and contains without modification the client-submitted text.</t>
        <figure>
          <artwork><![CDATA[
S: <iq id='wy2xa82b4' type='result'>
    <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'>
      <jid>juliet@im.example.com/balcony</jid>
    </bind>
   </iq>
          ]]></artwork>
        </figure>
        <t>Alternatively, in accordance with local service policies the server MAY refuse the client-submitted resourcepart and override it with a resourcepart that the server generates.</t>
        <figure>
          <artwork><![CDATA[
S: <iq id='wy2xa82b4' type='result'>
    <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'>
      <jid>
   juliet@im.example.com/balcony 4db06f06-1ea4-11dc-aca3-000bcd821bfb
      </jid>
    </bind>
   </iq>
          ]]></artwork>
        </figure>
      </section>
      <section title="Error Cases" anchor="bind-clientsubmit-error">
        <t>When a client attempts to submit its own XMPP resourcepart during resource binding, the following stanza error conditions are defined in addition to those described under <xref target='bind-servergen-error'/>:</t>
        <t>
          <list style='symbols'>
            <t>The provided resourcepart cannot be processed by the server.</t>
            <t>The provided resourcepart is already in use.</t>
          </list>
        </t>
        <t>Naturally, it is possible that error conditions not specified here might occur, as described under under <xref target='stanzas-error'/>.</t>
        <section title="Bad Request" anchor="bind-clientsubmit-error-badrequest">
          <t>If the provided resourcepart cannot be processed by the server (e.g. because it is of zero length or because it otherwise violates the rules for resourceparts specified in <xref target='XMPP-ADDR'/>), the server can return a &lt;bad-request/&gt; stanza error (<xref target='stanzas-error-conditions-bad-request'/>) but SHOULD instead process the resourcepart so that it is in conformance.</t>
          <figure>
            <artwork><![CDATA[
S: <iq id='wy2xa82b4' type='error'>
     <error type='modify'>
       <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>
            ]]></artwork>
          </figure>
        </section>
        <section title="Conflict" anchor="bind-clientsubmit-error-conflict">
          <t>If there is a currently-connected client whose session has the resourcepart being requested by the newly-connecting client, the server MUST do one of the following (which of these the server does is a matter for implementation or local service policy, although suggestions are provided below).</t>
          <t>
            <list style='numbers'>
              <t>Override the resourcepart provided by the newly-connecting client with a server-generated resourcepart.
              <vspace blankLines='1'/>
              This behavior is encouraged, because it simplifies the resource binding process for client implementations.<vspace blankLines='1'/></t>
              <t>Disallow the resource binding attempt of the newly-connecting client and maintain the session of the currently-connected client.
              <vspace blankLines='1'/>
              This behavior is neither encouraged nor discouraged, despite the fact that it was implicitly encouraged in RFC 3920; however, note that handling of the &lt;conflict/&gt; error is unevenly supported among existing client implementations, which often treat it as an authentication error and have been observed to discard cached credentials when receiving it.<vspace blankLines='1'/></t>
              <t>Terminate the session of the currently-connected client and allow the resource binding attempt of the newly-connecting client.
              <vspace blankLines='1'/>
              Although this was the traditional behavior of early XMPP server implementations, it is now discouraged because it can lead to a neverending cycle of two clients effectively disconnecting each other; however, note that this behavior can be appropriate in some deployment scenarios or if the server knows that the currently-connected client has a dead connection or broken stream as described under <xref target='streams-silence'/>.</t>
            </list>
          </t>
          <t>If the server follows behavior #1, it returns an &lt;iq/&gt; stanza of type "result" to the newly-connecting client, where the &lt;jid/&gt; child of the &lt;bind/&gt; element contains XML character data that indicates the full JID of the client, including the resourcepart that was generated by the server.</t>
          <figure>
            <artwork><![CDATA[
S: <iq id='wy2xa82b4' type='result'>
    <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'>
      <jid>
   juliet@im.example.com/balcony 4db06f06-1ea4-11dc-aca3-000bcd821bfb
      </jid>
    </bind>
   </iq>
            ]]></artwork>
          </figure>
          <t>If the server follows behavior #2, it sends a &lt;conflict/&gt; stanza error (<xref target='stanzas-error-conditions-conflict'/>) in response to the resource binding attempt of the newly-connecting client but maintains the XML stream so that the newly-connecting client has an opportunity to negotiate a non-conflicting resourcepart (i.e., the newly-connecting client needs to choose a different resourcepart before making another attempt to bind a resource).</t>
          <figure>
            <artwork><![CDATA[
S: <iq id='wy2xa82b4' type='error'>
     <error type='modify'>
       <conflict xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>
            ]]></artwork>
          </figure>
          <t>If the server follows behavior #3, it returns a &lt;conflict/&gt; stream error (<xref target='streams-error-conditions-conflict'/>) to the currently-connected client (as described under <xref target='streams-error-conditions-conflict'/>) and returns an IQ stanza of type "result" (indicating success) in response to the resource binding attempt of the newly-connecting client.</t>
          <figure>
            <artwork><![CDATA[
S: <iq id='wy2xa82b4' type='result'>
     <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'>
       <jid>
         juliet@im.example.com/balcony
       </jid>
     </bind>
   </iq>
            ]]></artwork>
          </figure>
        </section>
      </section>
      <section title="Retries" anchor="bind-clientsubmit-retries">
        <t>If an error occurs when a client submits a resourcepart, the server SHOULD allow a configurable but reasonable number of retries (at least 5 and no more than 10); this enables the client to tolerate incorrectly-provided resourceparts (e.g., bad data formats or duplicate text strings) without being forced to reconnect.</t>
        <t>After the client has reached the retry limit, the server MUST close the stream with a &lt;policy-violation/&gt; stream error (<xref target='streams-error-conditions-policy-violation'/>).</t>
      </section>
    </section>
  </section>

  <section title="XML Stanzas" anchor="stanzas">
    <t>After a client and a server (or two servers) have completed stream negotiation, either party can send XML stanzas.  Three kinds of XML stanza are defined for the 'jabber:client' and 'jabber:server' namespaces: &lt;message/&gt;, &lt;presence/&gt;, and &lt;iq/&gt;.  In addition, there are five common attributes for these stanza types.  These common attributes, as well as the basic semantics of the three stanza types, are defined in this specification; more detailed information regarding the syntax of XML stanzas for instant messaging and presence applications is provided in <xref target="XMPP-IM"/>, and for other applications in the relevant XMPP extension specifications.</t>
    <t>Support for the XML stanza syntax and semantics defined in this specification is REQUIRED in XMPP client and server implementations.</t>
    <t><list style='empty'><t>Security Warning: A server MUST NOT process a partial stanza and MUST NOT attach meaning to the transmission timing of any part of a stanza (before receipt of the close tag).</t></list></t>

    <section title="Common Attributes" anchor="stanzas-attributes">
      <t>The following five attributes are common to message, presence, and IQ stanzas.</t>
      <section title="to" anchor="stanzas-attributes-to">
        <t>The 'to' attribute specifies the JID of the intended recipient for the stanza.</t>
        <figure>
          <artwork><![CDATA[
<message to='romeo@example.net'>
  <body>Art thou not Romeo, and a Montague?</body>
</message>
          ]]></artwork>
        </figure>
        <t>For information about server processing of inbound and outbound XML stanzas based on the 'to' address, refer to <xref target='rules'/>.</t>
        <section title="Client-to-Server Streams" anchor="stanzas-attributes-to-c2s">
          <t>The following rules apply to inclusion of the 'to' attribute in stanzas sent from a connected client to its server over an XML stream qualified by the 'jabber:client' namespace.</t>
          <t>
            <list style='numbers'>
              <t>A stanza with a specific intended recipient (e.g., a conversation partner, a remote service, the server itself, even another resource associated with the user's bare JID) MUST possess a 'to' attribute whose value is an XMPP address.<vspace blankLines='1'/></t>
              <t>A stanza sent from a client to a server for direct processing by the server (e.g., roster processing as described in <xref target='XMPP-IM'/> or presence sent to the server for broadcasting to other entities) MUST NOT possess a 'to' attribute.</t>
            </list>
          </t>
          <t>The following rules apply to inclusion of the 'to' attribute in stanzas sent from a server to a connected client over an XML stream qualified by the 'jabber:client' namespace.</t>
          <t>
            <list style='numbers'>
              <t>If the server has received the stanza from another connected client or from a peer server, the server MUST NOT modify the 'to' address before delivering the stanza to the client.<vspace blankLines='1'/></t>
              <t>If the server has itself generated the stanza (e.g., a response to an IQ stanza of type "get" or "set", even if the stanza did not include a 'to' address), the stanza MAY include a 'to' address, which MUST be the full JID of the client; however, if the stanza does not include a 'to' address then the client MUST treat it as if the 'to' address were included with a value of the client's full JID.</t>
            </list>
          </t>
          <t><list style='empty'><t>Implementation Note: It is the server's responsibility to deliver only stanzas that are addressed to the client's full JID or the user's bare JID; thus there is no need for the client to check the 'to' address of incoming stanzas.  However, if the client does check the 'to' address then it is suggested to check at most the bare JID portion (not the full JID), since the 'to' address might be the user's bare JID, the client's current full JID, or even a full JID with a different resourcepart (e.g., in the case of so-called "offline messages" as described in <xref target='XEP-0160'/>).</t></list></t>
        </section>
        <section title="Server-to-Server Streams" anchor="stanzas-attributes-to-s2s">
          <t>The following rules apply to inclusion of the 'to' attribute in the context of XML streams qualified by the 'jabber:server' namespace (i.e., server-to-server streams).</t>
          <t>
            <list style='numbers'>
              <t>A stanza MUST possess a 'to' attribute whose value is an XMPP address; if a server receives a stanza that does not meet this restriction, it MUST close the stream with an &lt;improper-addressing/&gt; stream error (<xref target='streams-error-conditions-improper-addressing'/>).<vspace blankLines='1'/></t>
              <t>The domainpart of the JID contained in the stanza's 'to' attribute MUST match the FQDN of the receiving server (or any validated domain thereof) as communicated via SASL negotiation (see <xref target='sasl'/>), Server Dialback (see <xref target='XEP-0220'/>), or similar means; if a server receives a stanza that does not meet this restriction, it MUST close the stream with a &lt;host-unknown/&gt; stream error (<xref target='streams-error-conditions-host-unknown'/>) or a &lt;host-gone/&gt; stream error (<xref target='streams-error-conditions-host-gone'/>).</t>
            </list>
          </t>
        </section>
      </section>
      <section title="from" anchor="stanzas-attributes-from">
        <t>The 'from' attribute specifies the JID of the sender.</t>
        <figure>
          <artwork><![CDATA[
<message from='juliet@im.example.com/balcony'
         to='romeo@example.net'>
  <body>Art thou not Romeo, and a Montague?</body>
</message>
          ]]></artwork>
        </figure>
        <section title="Client-to-Server Streams" anchor="stanzas-attributes-from-c2s">
          <t>The following rules apply to the 'from' attribute in the context of XML streams qualified by the 'jabber:client' namespace (i.e., client-to-server streams).</t>
          <t>
            <list style='numbers'>
              <t>When a server receives an XML stanza from a connected client, the server MUST add a 'from' attribute to the stanza or override the 'from' attribute specified by the client, where the value of the 'from' attribute MUST be the full JID (&lt;localpart@domainpart/resource&gt;) determined by the server for the connected resource that generated the stanza (see <xref target="streams-negotiation-address"/>), or the bare JID (&lt;localpart@domainpart&gt;) in the case of subscription-related presence stanzas (see <xref target='XMPP-IM'/>).<vspace blankLines='1'/></t>
              <t>When the server generates a stanza on its own behalf for delivery to the client from the server itself, the stanza MUST include a 'from' attribute whose value is the bare JID (i.e., &lt;domainpart&gt;) of the server as agreed upon during stream negotiation (e.g., based on the 'to' attribute of the initial stream header).<vspace blankLines='1'/></t>
              <t>When the server generates a stanza from the server for delivery to the client on behalf of the account of the connected client (e.g., in the context of data storage services provided by the server on behalf of the client), the stanza MUST either (a) not include a 'from' attribute or (b) include a 'from' attribute whose value is the account's bare JID (&lt;localpart@domainpart&gt;).<vspace blankLines='1'/></t>
              <t>A server MUST NOT send to the client a stanza without a 'from' attribute if the stanza was not generated by the server on its own behalf (e.g., if it was generated by another client or a peer server and the server is merely delivering it to the client on behalf of some other entity); therefore, when a client receives a stanza that does not include a 'from' attribute, it MUST assume that the stanza is from the user's account on the server.</t>
            </list>
          </t>
        </section>
        <section title="Server-to-Server Streams" anchor="stanzas-attributes-from-s2s">
          <t>The following rules apply to the 'from' attribute in the context of XML streams qualified by the 'jabber:server' namespace (i.e., server-to-server streams).</t>
          <t>
            <list style='numbers'>
              <t>A stanza MUST possess a 'from' attribute whose value is an XMPP address; if a server receives a stanza that does not meet this restriction, it MUST close the stream with an &lt;improper-addressing/&gt; stream error (<xref target='streams-error-conditions-improper-addressing'/>).<vspace blankLines='1'/></t>
              <t>The domainpart of the JID contained in the stanza's 'from' attribute MUST match the FQDN of the sending server (or any validated domain thereof) as communicated via SASL negotiation (see <xref target='sasl'/>), Server Dialback (see <xref target='XEP-0220'/>), or similar means; if a server receives a stanza that does not meet this restriction, it MUST close the stream with an &lt;invalid-from/&gt; stream error (<xref target='streams-error-conditions-invalid-from'/>).</t>
            </list>
          </t>
          <t>Enforcement of these rules helps to prevent certain denial of service attacks as described under <xref target='security-dos'/>.</t>
        </section>
      </section>
      <section title="id" anchor="stanzas-attributes-id">
        <t>The 'id' attribute is used by the originating entity to track any response or error stanza that it might receive in relation to the generated stanza from another entity (such as an intermediate server or the intended recipient).</t>
        <t>It is up to the originating entity whether the value of the 'id' attribute is unique only within its current stream or unique globally.</t>
        <t>For &lt;message/&gt; and &lt;presence/&gt; stanzas, it is RECOMMENDED for the originating entity to include an 'id' attribute; for &lt;iq/&gt; stanzas, it is REQUIRED.</t>
        <t>If the generated stanza includes an 'id' attribute then it is REQUIRED for the response or error stanza to also include an 'id' attribute, where the value of the 'id' attribute MUST match that of the generated stanza.</t>
        <t>The semantics of IQ stanzas impose additional restrictions as described under <xref target="stanzas-semantics-iq"/>.</t>
      </section>
      <section title="type" anchor="stanzas-attributes-type">
        <t>The 'type' attribute specifies the purpose or context of the message, presence, or IQ stanza.  The particular allowable values for the 'type' attribute vary depending on whether the stanza is a message, presence, or IQ stanza.  The defined values for message and presence stanzas are specific to instant messaging and presence applications and therefore are defined in <xref target="XMPP-IM"/>, whereas the values for IQ stanzas specify the part of the semantics for all structured request-response exchanges (no matter what the payload) and therefore are specified under <xref target="stanzas-semantics-iq"/>.  The only 'type' value common to all three kinds of stanzas is "error" as described under <xref target="stanzas-error"/>.</t>
      </section>
      <section title="xml:lang" anchor="stanzas-attributes-lang">
        <t>A stanza SHOULD possess an 'xml:lang' attribute (as defined in Section 2.12 of <xref target="XML"/>) if the stanza contains XML character data that is intended to be presented to a human user (as explained in <xref target="CHARSETS"/>, "internationalization is for humans").  The value of the 'xml:lang' attribute specifies the default language of any such human-readable XML character data.</t>
        <figure>
          <artwork><![CDATA[
<presence from='romeo@example.net/orchard' xml:lang='en'>
  <show>dnd</show>
  <status>Wooing Juliet</status>
</presence>
          ]]></artwork>
        </figure>
        <t>The value of the 'xml:lang' attribute MAY be overridden by the 'xml:lang' attribute of a specific child element.</t>
        <figure>
          <artwork><![CDATA[
<presence from='romeo@example.net/orchard' xml:lang='en'>
  <show>dnd</show>
  <status>Wooing Juliet</status>
  <status xml:lang='cs'>Dvo&#x0159;&#x00ED;m se Julii</status>
</presence
          ]]></artwork>
        </figure>
        <t>If an outbound stanza generated by a client does not possess an 'xml:lang' attribute, the client's server SHOULD add an 'xml:lang' attribute whose value is that specified for the client's output stream as defined under <xref target="streams-attr-xmllang"/>.</t>
        <figure>
          <artwork><![CDATA[
C: <presence from='romeo@example.net/orchard'>
     <show>dnd</show>
     <status>Wooing Juliet</status>
   </presence>

S: <presence from='romeo@example.net/orchard'
             to='juliet@im.example.com'
             xml:lang='en'>
     <show>dnd</show>
     <status>Wooing Juliet</status>
   </presence>
          ]]></artwork>
        </figure>
        <t>If an inbound stanza received by a client or server does not possess an 'xml:lang' attribute, an implementation MUST assume that the default language is that specified for the entity's input stream as defined under <xref target="streams-attr-xmllang"/>.</t>
        <t>The value of the 'xml:lang' attribute MUST conform to the NMTOKEN datatype (as defined in Section 2.3 of <xref target="XML"/>) and MUST conform to the format defined in <xref target="LANGTAGS"/>.</t>
        <t>A server MUST NOT modify or delete 'xml:lang' attributes on stanzas it receives from other entities.</t>
      </section>
    </section>

    <section title="Basic Semantics" anchor="stanzas-semantics">
      <section title="Message Semantics" anchor="stanzas-semantics-message">
        <t>The &lt;message/&gt; stanza is a "push" mechanism whereby one entity pushes information to another entity, similar to the communications that occur in a system such as email.  All message stanzas will possess a 'to' attribute that specifies the intended recipient of the message (see <xref target='stanzas-attributes-to'/> and <xref target='rules-noto'/>), unless the message is being sent to the bare JID of a connected client's account.  Upon receiving a message stanza with a 'to' address, a server SHOULD attempt to route or deliver it to the intended recipient (see <xref target="rules"/> for general routing and delivery rules related to XML stanzas).</t>
      </section>
      <section title="Presence Semantics" anchor="stanzas-semantics-presence">
        <t>The &lt;presence/&gt; stanza is a specialized "broadcast" or "publish-subscribe" mechanism, whereby multiple entities receive information (in this case, network availability information) about an entity to which they have subscribed.  In general, a publishing client SHOULD send a presence stanza with no 'to' attribute, in which case the server to which the client is connected will broadcast that stanza to all subscribed entities.  However, a publishing client MAY also send a presence stanza with a 'to' attribute, in which case the server will route or deliver that stanza to the intended recipient.  Although the &lt;presence/&gt; stanza is most often used by XMPP clients, it can also be used by servers, add-on services, and any other kind of XMPP entity.  See <xref target="rules"/> for general routing and delivery rules related to XML stanzas, and <xref target="XMPP-IM"/> for rules specific to presence applications.</t>
      </section>
      <section title="IQ Semantics" anchor="stanzas-semantics-iq">
        <t>Info/Query, or IQ, is a "request-response" mechanism, similar in some ways to the Hypertext Transfer Protocol <xref target="HTTP"/>.  The semantics of IQ enable an entity to make a request of, and receive a response from, another entity.  The data content of the request and response is defined by the schema or other structural definition associated with the XML namespace that qualifies the direct child element of the IQ element (see <xref target='stanzas-extended'/>), and the interaction is tracked by the requesting entity through use of the 'id' attribute.  Thus, IQ interactions follow a common pattern of structured data exchange such as get/result or set/result (although an error can be returned in reply to a request if appropriate):</t>
        <figure anchor='figure-5' title='Semantics of IQ Stanzas'>
          <artwork><![CDATA[
Requesting                  Responding
  Entity                      Entity
----------                  ----------
    |                            |
    | <iq id='1' type='get'>     |
    |   [ ... payload ... ]      |
    | </iq>                      |
    | -------------------------> |
    |                            |
    | <iq id='1' type='result'>  |
    |   [ ... payload ... ]      |
    | </iq>                      |
    | <------------------------- |
    |                            |
    | <iq id='2' type='set'>     |
    |   [ ... payload ... ]      |
    | </iq>                      |
    | -------------------------> |
    |                            |
    | <iq id='2' type='error'>   |
    |   [ ... condition ... ]    |
    | </iq>                      |
    | <------------------------- |
    |                            |
          ]]></artwork>
        </figure>
        <t>To enforce these semantics, the following rules apply:</t>
        <t><list style='numbers'>
          <t>The 'id' attribute is REQUIRED for IQ stanzas.<vspace blankLines='1'/></t>
          <t>The 'type' attribute is REQUIRED for IQ stanzas.  The value MUST be one of the following; if not, the recipient or an intermediate router MUST return a &lt;bad-request/&gt; stanza error (<xref target='stanzas-error-conditions-bad-request'/>).
            <vspace blankLines='1'/>
            <list style='symbols'>
              <t>get -- The stanza requests information, inquires about what data is needed in order to complete further operations, etc.<vspace blankLines='1'/></t>
              <t>set -- The stanza provides data that is needed for an operation to be completed, sets new values, replaces existing values, etc.<vspace blankLines='1'/></t>
              <t>result -- The stanza is a response to a successful get or set request.<vspace blankLines='1'/></t>
              <t>error -- The stanza reports an error that has occurred regarding processing or delivery of a get or set request (see <xref target="stanzas-error"/>).</t>
            </list>
          <vspace blankLines='1'/></t>
          <t>An entity that receives an IQ request of type "get" or "set" MUST reply with an IQ response of type "result" or "error".  The response MUST preserve the 'id' attribute of the request (or be empty if the generated stanza did not include an 'id' attribute).<vspace blankLines='1'/></t>
          <t>An entity that receives a stanza of type "result" or "error" MUST NOT respond to the stanza by sending a further IQ response of type "result" or "error"; however, the requesting entity MAY send another request (e.g., an IQ of type "set" to provide obligatory information discovered through a get/result pair).<vspace blankLines='1'/></t>
          <t>An IQ stanza of type "get" or "set" MUST contain exactly one child element, which specifies the semantics of the particular request.<vspace blankLines='1'/></t>
          <t>An IQ stanza of type "result" MUST include zero or one child elements.<vspace blankLines='1'/></t>
          <t>An IQ stanza of type "error" MAY include the child element contained in the associated "get" or "set" and MUST include an &lt;error/&gt; child; for details, see <xref target="stanzas-error"/>.</t>
        </list></t>
      </section>
    </section>

    <section title="Stanza Errors" anchor="stanzas-error">
      <t>Stanza-related errors are handled in a manner similar to <xref target="streams-error">stream errors</xref>.  Unlike stream errors, stanza errors are recoverable; therefore they do not result in termination of the XML stream and underlying TCP connection.  Instead, the entity that discovers the error condition returns an error stanza, which is a stanza that:</t>
      <t>
        <list style='symbols'>
          <t>is of the same kind (message, presence, or IQ) as the generated stanza that triggered the error<vspace blankLines='1'/></t>
          <t>has a 'type' attribute set to a value of "error"<vspace blankLines='1'/></t>
          <t>typically swaps the 'from' and 'to' addresses of the generated stanza<vspace blankLines='1'/></t>
          <t>mirrors the 'id' attribute (if any) of the generated stanza that triggered the error<vspace blankLines='1'/></t>
          <t>contains an &lt;error/&gt; child element that specifies the error condition and therefore provides a hint regarding actions that the sender might be able to take in an effort to remedy the error (however, it is not always possible to remedy the error)</t>
        </list>
      </t>
      <section title="Rules" anchor="stanzas-error-rules">
        <t>The following rules apply to stanza errors:</t>
        <t><list style='numbers'>
          <t>The receiving or processing entity that detects an error condition in relation to a stanza SHOULD return an error stanza (and MUST do so for IQ stanzas).<vspace blankLines='1'/></t>
          <t>The error stanza SHOULD simply swap the 'from' and 'to' addresses from the generated stanza, unless doing so would (1) result in an information leak (see under <xref target='security-leaks'/>) or other breach of security, or (2) force the sender of the error stanza to include a malformed JID in the 'from' or 'to' address of the error stanza.<vspace blankLines='1'/></t>
          <t>If the generated stanza was &lt;message/&gt; or &lt;presence/&gt; and included an 'id' attribute then it is REQUIRED for the error stanza to also include an 'id' attribute.  If the generated stanza was &lt;iq/&gt; then the error stanza MUST include an 'id' attribute.  In all cases, the value of the 'id' attribute MUST match that of the generated stanza (or be empty if the generated stanza did not include an 'id' attribute).<vspace blankLines='1'/></t>
          <t>An error stanza MUST contain an &lt;error/&gt; child element.<vspace blankLines='1'/></t>
          <t>The entity that returns an error stanza MAY pass along its JID to the sender of the generated stanza (e.g., for diagnostic or tracking purposes) through the addition of a 'by' attribute to the &lt;error/&gt; child element.<vspace blankLines='1'/></t>
          <t>The entity that returns an error stanza MAY include the original XML sent so that the sender can inspect and, if necessary, correct the XML before attempting to resend (however, this is a courtesy only and the originating entity MUST NOT depend on receiving the original payload); naturally, the entity MUST NOT include the original data if it not well-formed XML, violates the XML restrictions of XMPP (see under <xref target='xml-restrictions'/>), or is otherwise harmful (e.g, exceeds a size limit).<vspace blankLines='1'/></t>
          <t>An &lt;error/&gt; child MUST NOT be included if the 'type' attribute has a value other than "error" (or if there is no 'type' attribute).<vspace blankLines='1'/></t>
          <t>An entity that receives an error stanza MUST NOT respond to the stanza with a further error stanza; this helps to prevent looping.</t>
        </list></t>
      </section>
      <section title="Syntax" anchor="stanzas-error-syntax">
        <t>The syntax for stanza-related errors is as follows, where XML data shown within the square brackets '[' and ']' is OPTIONAL, 'intended-recipient' is the JID of the entity to which the original stanza was addressed, 'sender' is the JID of the originating entity, and 'error-generator' is the entity that detects the fact that an error has occurred and thus returns an error stanza.</t>
        <figure>
          <artwork><![CDATA[
<stanza-kind from='intended-recipient' to='sender' type='error'>
  [OPTIONAL to include sender XML here]
  <error [by='error-generator']
         type='error-type'>
    <defined-condition xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    [<text xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'
           xml:lang='langcode'>
      OPTIONAL descriptive text
    </text>]
    [OPTIONAL application-specific condition element]
  </error>
</stanza-kind>
          ]]></artwork>
        </figure>
        <t>The "stanza-kind" MUST be one of message, presence, or iq.</t>
        <t>The "error-type" MUST be one of the following:</t>
        <t>
          <list style='symbols'>
            <t>auth -- retry after providing credentials</t>
            <t>cancel -- do not retry (the error cannot be remedied)</t>
            <t>continue -- proceed (the condition was only a warning)</t>
            <t>modify -- retry after changing the data sent</t>
            <t>wait -- retry after waiting (the error is temporary)</t>
          </list>
        </t>
        <t>The "defined-condition" MUST correspond to one of the stanza error conditions defined under <xref target='stanzas-error-conditions'/>.  However, because additional error conditions might be defined in the future, if an entity receives a stanza error condition that it does not understand then it MUST treat the unknown condition as equivalent to &lt;undefined-condition/&gt; (<xref target='stanzas-error-conditions-undefined-condition'/>).  If the designers of an XMPP protocol extension or the developers of an XMPP implementation need to communicate a stanza error condition that is not defined in this specification, they can do so by defining an application-specific error condition element qualified by an application-specific namespace.</t>
        <t>The &lt;error/&gt; element:</t>
        <t><list style='symbols'>
          <t>MUST contain a defined condition element.<vspace blankLines='1'/></t>
          <t>MAY contain a &lt;text/&gt; child element containing XML character data that describes the error in more detail; this element MUST be qualified by the 'urn:ietf:params:xml:ns:xmpp-stanzas' namespace and SHOULD possess an 'xml:lang' attribute specifying the natural language of the XML character data.<vspace blankLines='1'/></t>
          <t>MAY contain a child element for an application-specific error condition; this element MUST be qualified by an application-specific namespace that defines the syntax and semantics of the element.</t>
        </list></t>
        <t>The &lt;text/&gt; element is OPTIONAL.  If included, it is to be used only to provide descriptive or diagnostic information that supplements the meaning of a defined condition or application-specific condition.  It MUST NOT be interpreted programmatically by an application.  It SHOULD NOT be used as the error message presented to a human user, but MAY be shown in addition to the error message associated with the defined condition element (and, optionally, the application-specific condition element).</t>
        <t><list style='empty'><t>Interoperability Note: The syntax defined in <xref target='RFC3920'/> included a legacy 'code' attribute, whose semantics have been replaced by the defined condition elements; information about mapping defined condition elements to values of the legacy 'code' attribute can be found in <xref target='XEP-0086'/>.</t></list></t>
      </section>
      <section title="Defined Conditions" anchor="stanzas-error-conditions">
        <t>The following conditions are defined for use in stanza errors.</t>
        <t>The error-type value that is RECOMMENDED for each defined condition is the usual expected type; however, in some circumstances a different type might be more appropriate.</t>
        <section title="bad-request" anchor="stanzas-error-conditions-bad-request">
          <t>The sender has sent a stanza containing XML that does not conform to the appropriate schema or that cannot be processed (e.g., an IQ stanza that includes an unrecognized value of the 'type' attribute, or an element that is qualified by a recognized namespace but that violates the defined syntax for the element); the associated error type SHOULD be "modify".</t>
          <figure>
            <artwork><![CDATA[
C: <iq from='juliet@im.example.com/balcony' 
       id='zj3v142b'
       to='im.example.com'
       type='subscribe'>
     <ping xmlns='urn:xmpp:ping'/>
   </iq>

S: <iq from='im.example.com'
       id='zj3v142b'
       to='juliet@im.example.com/balcony'
       type='error'>
     <error type='modify'>
       <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>
            ]]></artwork>
          </figure>
        </section>
        <section title="conflict" anchor="stanzas-error-conditions-conflict">
          <t>Access cannot be granted because an existing resource exists with the same name or address; the associated error type SHOULD be "cancel".</t>
          <figure>
            <artwork><![CDATA[
C: <iq id='wy2xa82b4' type='set'>
     <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'>
       <resource>balcony</resource>
     </bind>
   </iq>

S: <iq id='wy2xa82b4' type='error'>
     <error type='cancel'>
       <conflict xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>
            ]]></artwork>
          </figure>
        </section>
        <section title="feature-not-implemented" anchor="stanzas-error-conditions-feature-not-implemented">
          <t>The feature represented in the XML stanza is not implemented by the intended recipient or an intermediate server and therefore the stanza cannot be processed (e.g., the entity understands the namespace but does not recognize the element name); the associated error type SHOULD be "cancel" or "modify".</t>
          <figure>
            <artwork><![CDATA[
C: <iq from='juliet@im.example.com/balcony'
       id='9u2bax16'
       to='pubsub.example.com'
       type='get'>
     <pubsub xmlns='http://jabber.org/protocol/pubsub'>
       <subscriptions/>
     </pubsub>
   </iq>

E: <iq from='pubsub.example.com
       id='9u2bax16'
       to='juliet@im.example.com/balcony'
       type='error'>
     <error type='cancel'>
       <feature-not-implemented 
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
       <unsupported 
           xmlns='http://jabber.org/protocol/pubsub#errors'
           feature='retrieve-subscriptions'/>
     </error>
   </iq>
            ]]></artwork>
          </figure>
        </section>
        <section title="forbidden" anchor="stanzas-error-conditions-forbidden">
          <t>The requesting entity does not possess the necessary permissions to perform an action that only certain authorized roles or individuals are allowed to complete (i.e., it typically relates to authorization rather than authentication); the associated error type SHOULD be "auth".</t>
          <figure>
            <artwork><![CDATA[
C: <presence
       from='juliet@im.example.com/balcony'
       id='y2bs71v4'
       to='characters@muc.example.com/JulieC'>
     <x xmlns='http://jabber.org/protocol/muc'/>
   </presence>

E: <presence
       from='characters@muc.example.com/JulieC'
       id='y2bs71v4'
       to='juliet@im.example.com/balcony'
       type='error'>
     <error type='auth'>
       <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </presence>
            ]]></artwork>
          </figure>
        </section>
        <section title="gone" anchor="stanzas-error-conditions-gone">
          <t>The recipient or server can no longer be contacted at this address, typically on a permanent basis (as opposed to the &lt;redirect/&gt; error condition, which is used for temporary addressing failures); the associated error type SHOULD be "cancel" and the error stanza SHOULD include a new address (if available) as the XML character data of the &lt;gone/&gt; element (which MUST be a Uniform Resource Identifier <xref target='URI'/> or Internationalized Resource Identifier <xref target='IRI'/> at which the entity can be contacted, typically an XMPP IRI as specified in <xref target='XMPP-URI'/>).</t>
          <figure>
            <artwork><![CDATA[
C: <message
       from='juliet@im.example.com/churchyard'
       id='sj2b371v'
       to='romeo@example.net'
       type='chat'>
     <body>Thy lips are warm.</body>
   </message>

S: <message
       from='romeo@example.net'
       id='sj2b371v'
       to='juliet@im.example.com/churchyard'
       type='error'>
     <error by='example.net'
            type='cancel'>
       <gone xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'>
         xmpp:romeo@afterlife.example.net
       </gone>
     </error>
   </message>
            ]]></artwork>
          </figure>
        </section>
        <section title="internal-server-error" anchor="stanzas-error-conditions-internal-server-error">
          <t>The server has experienced a misconfiguration or other internal error that prevents it from processing the stanza; the associated error type SHOULD be "cancel".</t>
          <figure>
            <artwork><![CDATA[
C: <presence
       from='juliet@im.example.com/balcony'
       id='y2bs71v4'
       to='characters@muc.example.com/JulieC'>
     <x xmlns='http://jabber.org/protocol/muc'/>
   </presence>

E: <presence
       from='characters@muc.example.com/JulieC'
       id='y2bs71v4'
       to='juliet@im.example.com/balcony'
       type='error'>
     <error type='wait'>
       <internal-server-error 
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </presence>
            ]]></artwork>
          </figure>
        </section>
        <section title="item-not-found" anchor="stanzas-error-conditions-item-not-found">
          <t>The addressed JID or item requested cannot be found; the associated error type SHOULD be "cancel".</t>
          <figure>
            <artwork><![CDATA[
C: <presence from='userfoo@example.com/bar'
             id='pwb2n78i'
             to='nosuchroom@conference.example.org/foo'/>

S: <presence from='nosuchroom@conference.example.org/foo' 
             id='pwb2n78i'
             to='userfoo@example.com/bar'
             type='error'>
     <error type='cancel'>
       <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>
            ]]></artwork>
          </figure>
          <t><list style='empty'><t>Security Warning: An application MUST NOT return this error if doing so would provide information about the intended recipient's network availability to an entity that is not authorized to know such information (for a more detailed discussion of presence authorization, refer to the discussion of presence subscriptions in <xref target='XMPP-IM'/>); instead it MUST return a &lt;service-unavailable/&gt; stanza error (<xref target='stanzas-error-conditions-service-unavailable'/>).</t></list></t>
        </section>
        <section title="jid-malformed" anchor="stanzas-error-conditions-jid-malformed">
          <t>The sending entity has provided (e.g., during resource binding) or communicated (e.g., in the 'to' address of a stanza) an XMPP address or aspect thereof that violates the rules defined in <xref target="XMPP-ADDR"/>; the associated error type SHOULD be "modify".</t>
          <figure>
            <artwork><![CDATA[
C: <presence
       from='juliet@im.example.com/balcony'
       id='y2bs71v4'
       to='ch@r@cters@muc.example.com/JulieC'>
     <x xmlns='http://jabber.org/protocol/muc'/>
   </presence>

E: <presence
       from='ch@r@cters@muc.example.com/JulieC'
       id='y2bs71v4'
       to='juliet@im.example.com/balcony'
       type='error'>
     <error by='muc.example.com'
            type='modify'>
       <jid-malformed
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </presence>
            ]]></artwork>
          </figure>
          <t><list style='empty'><t>Implementation Note: Enforcement of the format for XMPP localparts is primarily the responsibility of the service at which the associated account or entity is located (e.g., the example.com service is responsible for returning &lt;jid-malformed/&gt; errors related to all JIDs of the form &lt;localpart@example.com&gt;), whereas enforcement of the format for XMPP domainparts is primarily the responsibility of the service that seeks to route a stanza to the service identified by that domainpart (e.g., the example.org service is responsible for returning &lt;jid-malformed/&gt; errors related to stanzas that users of that service have to tried send to JIDs of the form &lt;localpart@example.com&gt;).  However, any entity that detects a malformed JID MAY return this error.</t></list></t>
        </section>
        <section title="not-acceptable" anchor="stanzas-error-conditions-not-acceptable">
          <t>The recipient or server understands the request but cannot process it because the request does not meet criteria defined by the recipient or server (e.g., a request to subscribe to information that does not simultaneously include configuration parameters needed by the recipient); the associated error type SHOULD be "modify".</t>
          <figure>
            <artwork><![CDATA[
C: <message to='juliet@im.example.com' id='yt2vs71m'>
     <body>[ ... the-emacs-manual ... ]</body>
   </message>

S: <message from='juliet@im.example.com' id='yt2vs71m'>
     <error type='modify'>
       <not-acceptable
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </message>
            ]]></artwork>
          </figure>
        </section>
        <section title="not-allowed" anchor="stanzas-error-conditions-not-allowed">
          <t>The recipient or server does not allow any entity to perform the action (e.g., sending to entities at a blacklisted domain); the associated error type SHOULD be "cancel".</t>
          <figure>
            <artwork><![CDATA[
C: <presence
       from='juliet@im.example.com/balcony'
       id='y2bs71v4'
       to='characters@muc.example.com/JulieC'>
     <x xmlns='http://jabber.org/protocol/muc'/>
   </presence>

E: <presence
       from='characters@muc.example.com/JulieC'
       id='y2bs71v4'
       to='juliet@im.example.com/balcony'
       type='error'>
     <error type='cancel'>
       <not-allowed xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </presence>
            ]]></artwork>
          </figure>
        </section>
        <section title="not-authorized" anchor="stanzas-error-conditions-not-authorized">
          <t>The sender needs to provide credentials before being allowed to perform the action, or has provided improper credentials (the name "not-authorized", which was borrowed from the "401 Unauthorized" error of <xref target='HTTP'/>, might lead the reader to think that this condition relates to authorization, but instead it is typically used in relation to authentication); the associated error type SHOULD be "auth".</t>
          <figure>
            <artwork><![CDATA[
C: <presence
       from='juliet@im.example.com/balcony'
       id='y2bs71v4'
       to='characters@muc.example.com/JulieC'>
     <x xmlns='http://jabber.org/protocol/muc'/>
   </presence>

E: <presence
       from='characters@muc.example.com/JulieC'
       id='y2bs71v4'
       to='juliet@im.example.com/balcony'>
     <error type='auth'>
       <not-authorized xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </presence>
            ]]></artwork>
          </figure>
        </section>
        <section title="policy-violation" anchor="stanzas-error-conditions-policy-violation">
          <t>The entity has violated some local service policy (e.g., a message contains words that are prohibited by the service) and the server MAY choose to specify the policy in the &lt;text/&gt; element or in an application-specific condition element; the associated error type SHOULD be "modify" or "wait" depending on the policy being violated.</t>
          <t>(In the following example, the client sends an XMPP message containing words that are forbidden according to the server's local service policy.)</t>
          <figure>
            <artwork><![CDATA[
C: <message from='romeo@example.net/foo' 
            to='bill@im.example.com'
            id='vq71f4nb'>
     <body>%#&@^!!!</body>
   </message>

S: <message from='bill@im.example.com' 
            id='vq71f4nb'
            to='romeo@example.net/foo'>
     <error by='example.net' type='modify'>
       <policy-violation 
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </message>
            ]]></artwork>
          </figure>
        </section>
        <section title="recipient-unavailable" anchor="stanzas-error-conditions-recipient-unavailable">
          <t>The intended recipient is temporarily unavailable, undergoing maintenance, etc.; the associated error type SHOULD be "wait".</t>
          <figure>
            <artwork><![CDATA[
C: <presence
       from='juliet@im.example.com/balcony'
       id='y2bs71v4'
       to='characters@muc.example.com/JulieC'>
     <x xmlns='http://jabber.org/protocol/muc'/>
   </presence>

E: <presence
       from='characters@muc.example.com/JulieC'
       id='y2bs71v4'
       to='juliet@im.example.com/balcony'>
     <error type='wait'>
       <recipient-unavailable 
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </presence>
            ]]></artwork>
          </figure>
          <t><list style='empty'><t>Security Warning: An application MUST NOT return this error if doing so would provide information about the intended recipient's network availability to an entity that is not authorized to know such information (for a more detailed discussion of presence authorization, refer to the discussion of presence subscriptions in <xref target='XMPP-IM'/>); instead it MUST return a &lt;service-unavailable/&gt; stanza error (<xref target='stanzas-error-conditions-service-unavailable'/>).</t></list></t>
        </section>
        <section title="redirect" anchor="stanzas-error-conditions-redirect">
          <t>The recipient or server is redirecting requests for this information to another entity, typically in a temporary fashion (as opposed to the &lt;gone/&gt; error condition, which is used for permanent addressing failures); the associated error type SHOULD be "modify" and the error stanza SHOULD contain the alternate address in the XML character data of the &lt;redirect/&gt; element (which MUST be a URI or IRI with which the sender can communicate, typically an XMPP IRI as specified in <xref target='XMPP-URI'/>).</t>
          <figure>
            <artwork><![CDATA[
C: <presence
       from='juliet@im.example.com/balcony'
       id='y2bs71v4'
       to='characters@muc.example.com/JulieC'>
     <x xmlns='http://jabber.org/protocol/muc'/>
   </presence>

E: <presence
       from='characters@muc.example.com/JulieC'
       id='y2bs71v4'
       to='juliet@im.example.com/balcony'
       type='error'>
     <error type='modify'>
       <redirect xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'>
         xmpp:characters@conference.example.org
       </redirect>
     </error>
   </presence>
            ]]></artwork>
          </figure>
          <t><list style='empty'><t>Security Warning: An application receiving a stanza-level redirect SHOULD warn a human user of the redirection attempt and request approval before proceeding to communicate with the entity whose address is contained in the XML character data of the &lt;redirect/&gt; element, because that entity might have a different identity or might enforce different security policies.  The end-to-end authentication or signing of XMPP stanzas could help to mitigate this risk, since it would enable the sender to determine if the entity to which it has been redirected has the same identity as the entity it originally attempted to contact.  An application MAY have a policy of following redirects only if it has authenticated the receiving entity.  In addition, an application SHOULD abort the communication attempt after a certain number of successive redirects (e.g., at least 2 but no more than 5).</t></list></t>
        </section>
        <section title="registration-required" anchor="stanzas-error-conditions-registration-required">
          <t>The requesting entity is not authorized to access the requested service because prior registration is necessary (examples of prior registration include members-only rooms in XMPP multi-user chat <xref target='XEP-0045'/> and gateways to non-XMPP instant messaging services, which traditionally required registration in order to use the gateway <xref target='XEP-0100'/>); the associated error type SHOULD be "auth".</t>
          <figure>
            <artwork><![CDATA[
C: <presence
       from='juliet@im.example.com/balcony'
       id='y2bs71v4'
       to='characters@muc.example.com/JulieC'>
     <x xmlns='http://jabber.org/protocol/muc'/>
   </presence>

E: <presence
       from='characters@muc.example.com/JulieC'
       id='y2bs71v4'
       to='juliet@im.example.com/balcony'>
     <error type='auth'>
       <registration-required
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </presence>
            ]]></artwork>
          </figure>
        </section>
        <section title="remote-server-not-found" anchor="stanzas-error-conditions-remote-server-not-found">
          <t>A remote server or service specified as part or all of the JID of the intended recipient does not exist or cannot be resolved (e.g., there is no _xmpp-server._tcp DNS SRV record, the A or AAAA fallback resolution fails, or A/AAAA lookups succeed but there is no response on the IANA-registered port 5269); the associated error type SHOULD be "cancel".</t>
          <figure>
            <artwork><![CDATA[
C: <message
       from='romeo@example.net/home'
       id='ud7n1f4h'
       to='bar@example.org'
       type='chat'>
    <body>yt?</body>
   </message>

E: <message
       from='bar@example.org'
       id='ud7n1f4h'
       to='romeo@example.net/home'
       type='error'>
     <error type='cancel'>
       <remote-server-not-found
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </message>
            ]]></artwork>
          </figure>
        </section>
        <section title="remote-server-timeout" anchor="stanzas-error-conditions-remote-server-timeout">
          <t>A remote server or service specified as part or all of the JID of the intended recipient (or needed to fulfill a request) was resolved but communications could not be established within a reasonable amount of time (e.g., an XML stream cannot be established at the resolved IP address and port, or an XML stream can be established but stream negotiation fails because of problems with TLS, SASL, Server Dialback, etc.); the associated error type SHOULD be "wait" (unless the error is of a more permanent nature, e.g., the remote server is found but it cannot be authenticated or it violates security policies).</t>
          <figure>
            <artwork><![CDATA[
C: <message
       from='romeo@example.net/home'
       id='ud7n1f4h'
       to='bar@example.org'
       type='chat'>
    <body>yt?</body>
   </message>

E: <message
       from='bar@example.org'
       id='ud7n1f4h'
       to='romeo@example.net/home'
       type='error'>
     <error type='wait'>
       <remote-server-timeout
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </message>
            ]]></artwork>
          </figure>
        </section>
        <section title="resource-constraint" anchor="stanzas-error-conditions-resource-constraint">
          <t>The server or recipient is busy or lacks the system resources necessary to service the request; the associated error type SHOULD be "wait".</t>
          <figure>
            <artwork><![CDATA[
C: <iq from='romeo@example.net/foo'
       id='kj4vz31m'
       to='pubsub.example.com'
       type='get'>
     <pubsub xmlns='http://jabber.org/protocol/pubsub'>
       <items node='my_musings'/>
     </pubsub>
   </iq>

E: <iq from='pubsub.example.com'
       id='kj4vz31m'
       to='romeo@example.net/foo'
       type='error'>
     <error type='wait'>
       <resource-constraint
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>
            ]]></artwork>
          </figure>
        </section>
        <section title="service-unavailable" anchor="stanzas-error-conditions-service-unavailable">
          <t>The server or recipient does not currently provide the requested service; the associated error type SHOULD be "cancel".</t>
          <figure>
            <artwork><![CDATA[
C: <message from='romeo@example.net/foo'
            to='juliet@im.example.com'>
     <body>Hello?</body>
   </message>

S: <message from='juliet@im.example.com/foo'
            to='romeo@example.net'>
     <error type='cancel'>
       <service-unavailable
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </message>
            ]]></artwork>
          </figure>
          <t><list style='empty'><t>Security Warning: An application MUST return a &lt;service-unavailable/&gt; stanza error (<xref target='stanzas-error-conditions-service-unavailable'/>) instead of &lt;item-not-found/&gt; (<xref target='stanzas-error-conditions-item-not-found'/>) or &lt;recipient-unavailable/&gt; (<xref target='stanzas-error-conditions-recipient-unavailable'/>) if sending one of the latter errors would provide information about the intended recipient's network availability to an entity that is not authorized to know such information (for a more detailed discussion of presence authorization, refer to <xref target='XMPP-IM'/>).</t></list></t>
        </section>
        <section title="subscription-required" anchor="stanzas-error-conditions-subscription-required">
          <t>The requesting entity is not authorized to access the requested service because a prior subscription is necessary (examples of prior subscription include authorization to receive presence information as defined in <xref target='XMPP-IM'/> and opt-in data feeds for XMPP publish-subscribe as defined in <xref target='XEP-0060'/>); the associated error type SHOULD be "auth".</t>
          <figure>
            <artwork><![CDATA[
C: <message
       from='romeo@example.net/orchard'
       id='pa73b4n7'
       to='playwright@shakespeare.example.com'
       type='chat'>
     <subject>ACT II, SCENE II</subject>
     <body>help, I forgot my lines!</body>
   </message>

E: <message
       from='playwright@shakespeare.example.com'
       id='pa73b4n7'
       to='romeo@example.net/orchard'
       type='error'>
     <error type='auth'>
       <subscription-required
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </message>
            ]]></artwork>
          </figure>
        </section>
        <section title="undefined-condition" anchor="stanzas-error-conditions-undefined-condition">
          <t>The error condition is not one of those defined by the other conditions in this list; any error type can be associated with this condition, and it SHOULD NOT used except in conjunction with an application-specific condition.</t>
          <figure>
            <artwork><![CDATA[
C: <message
       from='northumberland@shakespeare.example'
       id='richard2-4.1.247'
       to='kingrichard@royalty.england.example'>
     <body>My lord, dispatch; read o'er these articles.</body>
     <amp xmlns='http://jabber.org/protocol/amp'>
       <rule action='notify' 
             condition='deliver' 
             value='stored'/>
     </amp>

S: <message from='example.org'
            id='amp1'
            to='northumberland@example.net/field'
            type='error'>
     <amp xmlns='http://jabber.org/protocol/amp'
          from='kingrichard@example.org'
          status='error'
          to='northumberland@example.net/field'>
       <rule action='error' 
             condition='deliver' 
             value='stored'/>
     </amp>
     <error type='modify'>
       <undefined-condition 
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
       <failed-rules xmlns='http://jabber.org/protocol/amp#errors'>
         <rule action='error' 
               condition='deliver' 
               value='stored'/>
       </failed-rules>
     </error>
   </message>
            ]]></artwork>
          </figure>
        </section>
        <section title="unexpected-request" anchor="stanzas-error-conditions-unexpected-request">
          <t>The recipient or server understood the request but was not expecting it at this time (e.g., the request was out of order); the associated error type SHOULD be "wait" or "modify".</t>
          <figure>
            <artwork><![CDATA[
C: <iq from='romeo@example.net/foo'
       id='o6hsv25z'
       to='pubsub.example.com'
       type='set'>
     <pubsub xmlns='http://jabber.org/protocol/pubsub'>
        <unsubscribe
            node='my_musings'
            jid='romeo@example.net'/>
     </pubsub>
   </iq>

E: <iq from='pubsub.example.com'
       id='o6hsv25z'
       to='romeo@example.net/foo'
       type='error'>
     <error type='cancel'>
       <unexpected-request 
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
       <not-subscribed 
           xmlns='http://jabber.org/protocol/pubsub#errors'/>
     </error>
   </iq>
            ]]></artwork>
          </figure>
        </section>
      </section>
      <section title="Application-Specific Conditions" anchor="stanzas-error-app">
        <t>As noted, an application MAY provide application-specific stanza error information by including a properly-namespaced child within the error element.  Typically, the application-specific element supplements or further qualifies a defined element.  Thus, the &lt;error/&gt; element will contain two or three child elements.</t>
        <figure>
          <artwork><![CDATA[
<iq id='ixc3v1b9' type='error'>
  <error type='modify'>
    <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <too-many-parameters xmlns='http://example.org/ns'/>
  </error>
</iq>
          ]]></artwork>
        </figure>
        <figure>
          <artwork><![CDATA[
<message type='error' id='7h3baci9'>
  <error type='modify'>
    <undefined-condition
          xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <text xml:lang='en'
          xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'>
      [ ... application-specific information ... ]
    </text>
    <too-many-parameters xmlns='http://example.org/ns'/>
  </error>
</message>
          ]]></artwork>
        </figure>
        <t>An entity that receives an application-specific error condition it does not understand MUST ignore that condition but appropriately process the rest of the error stanza.</t>
      </section>
    </section>

    <section title="Extended Content" anchor="stanzas-extended">
      <t>Although the message, presence, and IQ stanzas provide basic semantics for messaging, availability, and request-response interactions, XMPP uses XML namespaces (see <xref target='XML-NAMES'/>) to extend the basic stanza syntax for the purpose of providing additional functionality.</t>
      <t>A message or presence stanza MAY contain one or more optional child elements specifying content that extends the meaning of the message (e.g., an XHTML-formatted version of the message body as described in <xref target="XEP-0071"/>), and an IQ stanza of type "get" or "set" MUST contain one such child element.  Such a child element MAY have any name and MUST possess a namespace declaration (other than "jabber:client", "jabber:server", or "http://etherx.jabber.org/streams") that defines the data contained within the child element.  Such a child element is called an "extension element".  An extension element can be included either at the direct child level of the stanza or in any mix of levels.</t>
      <t>Similarly, "extension attributes" are allowed.  That is: a stanza itself (i.e., an &lt;iq/&gt;, &lt;message/&gt;, or &lt;presence/&gt; element qualified by the "jabber:client" or "jabber:server" content namespace) or any child element of such a stanza (whether an extension element or a child element qualified by the content namespace) MAY also include one or more attributes qualified by XML namespaces other than the content namespace or the reserved "http://www.w3.org/XML/1998/namespace" namespace (including the so-called "empty namespace" if the attribute is not prefixed as described under <xref target='XML-NAMES'/>).</t>
      <t><list style='empty'><t>Interoperability Note: For the sake of backward compatibility and maximum interoperability, an entity that generates a stanza SHOULD NOT include such attributes in the stanza itself or in child elements of the stanza that are qualified by the content namespaces "jabber:client" or "jabber:server" (e.g., the &lt;body/&gt; child of the &lt;message/&gt; stanza).</t></list></t>
      <t>An extension element or extension attribute is said to be "extended content" and the qualifying namespace for such an element or attribute is said to be an "extended namespace".</t>
      <t><list style='empty'><t>Informational Note: Although extended namespaces for XMPP are commonly defined by the XMPP Standards Foundation (XSF) and by the IETF, no specification or IETF standards action is necessary to define extended namespaces, and any individual or organization is free to define XMPP extensions.</t></list></t>
      <t>To illustrate these concepts, several examples follow.</t>
      <t>The following stanza contains one direct child element whose extended namespace is 'jabber:iq:roster':</t>
      <figure>
        <artwork><![CDATA[
<iq from='juliet@capulet.com/balcony'
    id='h83vxa4c'
    type='get'>
 <query xmlns='jabber:iq:roster'/>
</iq>
        ]]></artwork>
      </figure>
      <t>The following stanza contains two direct child elements with two different extended namespaces.</t>
      <figure>
        <artwork><![CDATA[
<presence from='juliet@capulet.com/balcony'>
  <c xmlns='http://jabber.org/protocol/caps' 
     hash='sha-1'
     node='http://code.google.com/p/exodus'
     ver='QgayPKawpkPSDYmwT/WM94uAlu0='/>
  <x xmlns='vcard-temp:x:update'>
    <photo>sha1-hash-of-image</photo>
  </x>
</presence>
        ]]></artwork>
      </figure>
      <t>The following stanza contains two child elements, one of which is qualified by the "jabber:client" or "jabber:server" content namespace and one of which is qualified by an extended namespace; the extension element in turn contains a child element that is qualified by a different extended namespace.</t>
      <figure>
        <artwork><![CDATA[
<message to='juliet@capulet.com'>
  <body>Hello?</body>
  <html xmlns='http://jabber.org/protocol/xhtml-im'>
    <body xmlns='http://www.w3.org/1999/xhtml'>
      <p style='font-weight:bold'>Hello?</t>
    </body>
  </html>
</message>
        ]]></artwork>
      </figure>
      <t>It is conventional in the XMPP community for implementations to not generate namespace prefixes for elements that are qualified by extended namespaces (in the XML community, this convention is sometimes called "prefix-free canonicalization").  However, if an implementation generates such namespace prefixes then it MUST include the namespace declaration in the stanza itself or a child element of the stanza, not in the stream header (see <xref target='streams-ns-other'/>).</t>
      <t>Routing entities (typically servers) SHOULD try to maintain prefixes when serializing XML stanzas for processing, but receiving entities MUST NOT depend on the prefix strings to have any particular value (the allowance for the 'stream' prefix, described under <xref target='streams-ns-declarations'/>, is an exception to this rule, albeit for streams rather than stanzas).</t>
      <t>Support for any given extended namespace is OPTIONAL on the part of any implementation.  If an entity does not understand such a namespace, the entity's expected behavior depends on whether the entity is (1) the recipient or (2) a server that is routing or delivering the stanza to the recipient.</t>
      <t>If a recipient receives a stanza that contains an element or attribute it does not understand, it MUST NOT attempt to process that XML data and instead MUST proceed as follows.</t>
      <t>
        <list style='symbols'>
          <t>If an intended recipient receives a message stanza whose only child element is qualified by a namespace it does not understand, then depending on the XMPP application it MUST either ignore the entire stanza or return a stanza error, which SHOULD be &lt;service-unavailable/&gt; (<xref target='stanzas-error-conditions-service-unavailable'/>).<vspace blankLines='1'/></t>
          <t>If an intended recipient receives a presence stanza whose only child element is qualified by a namespace it does not understand, then it MUST ignore the child element by treating the presence stanza as if it contained no child element.<vspace blankLines='1'/></t>
          <t>If an intended recipient receives a message or presence stanza that contains XML data qualified by a namespace it does not understand, then it MUST ignore the portion of the stanza qualified by the unknown namespace.<vspace blankLines='1'/></t>
          <t>If an intended recipient receives an IQ stanza of type "get" or "set" containing a child element qualified by a namespace it does not understand, then the entity MUST return an IQ stanza of type "error" with an error condition of &lt;service-unavailable/&gt;.</t>
        </list>
      </t>
      <t>If a server handles a stanza that is intended for delivery to another entity and that contains a child element it does not understand, it MUST route the stanza unmodified to a remote server or deliver the stanza unmodified to a connected client associated with a local account.<vspace blankLines='1'/></t>
    </section>

  </section>

  <section title="Detailed Examples" anchor="examples">
      <t>The detailed examples in this section further illustrate the protocols defined in this specification.</t>
    <section title="Client-to-Server Examples" anchor="examples-c2s">
      <t>The following examples show the XMPP data flow for a client negotiating an XML stream with a server, exchanging XML stanzas, and closing the negotiated stream.  The server is "im.example.com", the server requires use of TLS, the client authenticates via the SASL SCRAM-SHA-1 mechanism as &lt;juliet@im.example.com&gt;, and the client binds a client-submitted resource to the stream.  It is assumed that before sending the initial stream header, the client has already resolved an SRV record of _xmpp-client._tcp.im.example.com and has opened a TCP connection to the advertised port at the resolved IP address.</t>
      <section title="TLS" anchor="examples-c2s-tls">
        <figure>
          <preamble>Step 1: Client initiates stream to server:</preamble>
          <artwork><![CDATA[
C: <stream:stream
     from='juliet@im.example.com'
     to='im.example.com'
     version='1.0'
     xml:lang='en'
     xmlns='jabber:client'
     xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Step 2: Server responds by sending a response stream header to client:</preamble>
          <artwork><![CDATA[
S: <stream:stream
     from='im.example.com'
     id='t7AMCin9zjMNwQKDnplntZPIDEI='
     to='juliet@im.example.com'
     version='1.0'
     xml:lang='en'
     xmlns='jabber:client'
     xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Step 3: Server sends stream features to client (only the STARTTLS extension at this point, which is mandatory-to-negotiate):</preamble>
          <artwork><![CDATA[
S: <stream:features>
     <starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'>
       <required/>
     </starttls>
   </stream:features>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Step 4: Client sends STARTTLS command to server:</preamble>
          <artwork><![CDATA[
C: <starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Step 5: Server informs client that it is allowed to proceed:</preamble>
          <artwork><![CDATA[
S: <proceed xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Step 5 (alt): Server informs client that STARTTLS negotiation has failed, closes the XML stream, and terminates the TCP connection (thus the stream negotiation process ends unsuccessfully and the parties do not move on to the next step):</preamble>
          <artwork><![CDATA[
S: <failure xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>
   </stream:stream>
          ]]></artwork>
        </figure>
        <t>Step 6: Client and server attempt to complete TLS negotiation over the existing TCP connection (see <xref target='TLS'/> for details).</t>
        <figure>
          <preamble>Step 7: If TLS negotiation is successful, client initiates a new stream to server over the TLS-protected TCP connection:</preamble>
          <artwork><![CDATA[
C: <stream:stream
     from='juliet@im.example.com'
     to='im.example.com'
     version='1.0'
     xml:lang='en'
     xmlns='jabber:client'
     xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <t>Step 7 (alt): If TLS negotiation is unsuccessful, server closes TCP connection (thus the stream negotiation process ends unsuccessfully and the parties do not move on to the next step):</t>
      </section>
      <section title="SASL" anchor="examples-c2s-sasl">
        <figure>
          <preamble>Step 8: Server responds by sending a stream header to client along with any available stream features:</preamble>
          <artwork><![CDATA[
S: <stream:stream
     from='im.example.com'
     id='vgKi/bkYME8OAj4rlXMkpucAqe4='
     to='juliet@im.example.com'
     version='1.0'
     xml:lang='en'
     xmlns='jabber:client'
     xmlns:stream='http://etherx.jabber.org/streams'>

S: <stream:features>
     <mechanisms xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
       <mechanism>SCRAM-SHA-1-PLUS</mechanism>
       <mechanism>SCRAM-SHA-1</mechanism>
       <mechanism>PLAIN</mechanism>
     </mechanisms>
   </stream:features>
            ]]></artwork>
          </figure>
        <figure>
          <preamble>Step 9: Client selects an authentication mechanism, in this case SCRAM-SHA-1, including initial response data:</preamble>
          <artwork><![CDATA[
C: <auth xmlns="urn:ietf:params:xml:ns:xmpp-sasl" 
         mechanism="SCRAM-SHA-1">
     biwsbj1qdWxpZXQscj1vTXNUQUF3QUFBQU1BQUFBTlAwVEFBQUFBQUJQVTBBQQ==
   </auth>
          ]]></artwork>
          <postamble>The decoded base 64 data is "n,,n=juliet,r=oMsTAAwAAAAMAAAANP0TAAAAAABPU0AA".</postamble>
        </figure>
        <figure>
          <preamble>Step 10: Server sends a challenge:</preamble>
          <artwork><![CDATA[
S: <challenge xmlns="urn:ietf:params:xml:ns:xmpp-sasl">
     cj1vTXNUQUF3QUFBQU1BQUFBTlAwVEFBQUFBQUJQVTBBQWUxMjQ2OTViLTY5Y
     TktNGRlNi05YzMwLWI1MWIzODA4YzU5ZSxzPU5qaGtZVE0wTURndE5HWTBaaT
     AwTmpkbUxUa3hNbVV0TkRsbU5UTm1ORE5rTURNeixpPTQwOTY=
   </challenge>
          ]]></artwork>
          <postamble>The decoded base 64 data is "r=oMsTAAwAAAAMAAAANP0TAAAAAABPU0AAe124695b-69a9-4de6-9c30-b51b3808c59e,s=NjhkYTM0MDgtNGY0Zi00NjdmLTkxMmUtNDlmNTNmNDNkMDMz,i=4096" (line breaks not included in actual data).</postamble>
        </figure>
        <figure>
          <preamble>Step 11: Client sends a response:</preamble>
          <artwork><![CDATA[
C: <response xmlns="urn:ietf:params:xml:ns:xmpp-sasl">
     Yz1iaXdzLHI9b01zVEFBd0FBQUFNQUFBQU5QMFRBQUFBQUFCUFUwQUFlMTI0N
     jk1Yi02OWE5LTRkZTYtOWMzMC1iNTFiMzgwOGM1OWUscD1VQTU3dE0vU3ZwQV
     RCa0gyRlhzMFdEWHZKWXc9
   </response>
          ]]></artwork>
          <postamble>The decoded base 64 data is "c=biws, r=oMsTAAwAAAAMAAAANP0TAAAAAABPU0AAe124695b-69a9-4de6-9c30-b51b3808c59e, p=UA57tM/SvpATBkH2FXs0WDXvJYw=" (line breaks not included in actual data).</postamble>
        </figure>
        <figure>
          <preamble>Step 12: Server informs client of success, including additional data with success:</preamble>
          <artwork><![CDATA[
S: <success xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
     dj1wTk5ERlZFUXh1WHhDb1NFaVc4R0VaKzFSU289
   </success>
          ]]></artwork>
          <postamble>The decoded base 64 data is "v=pNNDFVEQxuXxCoSEiW8GEZ+1RSo=".</postamble>
        </figure>
        <figure>
          <preamble>Step 12 (alt): Server returns a SASL error to client (thus the stream negotiation process ends unsuccessfully and the parties do not move on to the next step):</preamble>
          <artwork><![CDATA[
S: <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
     <not-authorized/>
   </failure>
   </stream>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Step 13: Client initiates a new stream to server:</preamble>
          <artwork><![CDATA[
C: <stream:stream
     from='juliet@im.example.com'
     to='im.example.com'
     version='1.0'
     xml:lang='en'
     xmlns='jabber:client'
     xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
      </section>
      <section title="Resource Binding" anchor="examples-c2s-bind">
        <figure>
          <preamble>Step 14: Server responds by sending a stream header to client along with supported features (in this case resource binding):</preamble>
          <artwork><![CDATA[
S: <stream:stream
     from='im.example.com'
     id='gPybzaOzBmaADgxKXu9UClbprp0='
     to='juliet@im.example.com'
     version='1.0'
     xml:lang='en'
     xmlns='jabber:client'
     xmlns:stream='http://etherx.jabber.org/streams'>

S: <stream:features>
     <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'/>
   </stream:features>
          ]]></artwork>
        </figure>
        <t>Upon being informed that resource binding is mandatory-to-negotiate, the client needs to bind a resource to the stream; here we assume that the client submits a human-readable text string.</t>
        <figure>
          <preamble>Step 15: Client binds a resource:</preamble>
          <artwork><![CDATA[
C: <iq id='yhc13a95' type='set'>
     <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'>
       <resource>balcony</resource>
     </bind>
   </iq>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Step 16: Server accepts submitted resourcepart and informs client of successful resource binding:</preamble>
          <artwork><![CDATA[
S: <iq id='yhc13a95' type='result'>
     <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'>
       <jid>
         juliet@im.example.com/balcony
       </jid>
     </bind>
   </iq>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Step 16 (alt): Server returns error to client (thus the stream negotiation process ends unsuccessfully and the parties do not move on to the next step):</preamble>
          <artwork><![CDATA[
S: <iq id='yhc13a95' type='error'>
     <error type='cancel'>
       <conflict xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>
          ]]></artwork>
        </figure>
      </section>
      <section title="Stanza Exchange" anchor="examples-c2s-stanzas">
        <t>Now the client is allowed to send XML stanzas over the negotiated stream.</t>
        <figure>
          <artwork><![CDATA[
C: <message from='juliet@im.example.com/balcony'
            id='ju2ba41c'
            to='romeo@example.net'
            type='chat'
            xml:lang='en'>
     <body>Art thou not Romeo, and a Montague?</body>
   </message>
          ]]></artwork>
        </figure>
        <t>If necessary, sender's server negotiates XML streams with intended recipient's server (see <xref target='examples-s2s'/>).</t>
        <t>The intended recipient replies and the message is delivered to the client.</t>
        <figure>
          <artwork><![CDATA[
E: <message from='romeo@example.net/orchard'
            id='ju2ba41c'
            to='juliet@im.example.com/balcony'
            type='chat'
            xml:lang='en'>
     <body>Neither, fair saint, if either thee dislike.</body>
   </message>
          ]]></artwork>
        </figure>
        <t>The client can subsequently send and receive an unbounded number of subsequent XML stanzas over the stream.</t>
      </section>
      <section title="Close" anchor="examples-c2s-close">
        <t>Desiring to send no further messages, the client closes its stream to the server but waits for incoming data from the server.</t>
        <figure>
          <artwork><![CDATA[
C: </stream:stream>
          ]]></artwork>
        </figure>
        <t>Consistent with <xref target='streams-close'/>, the server might send additional data to the client and then closes its stream to the client.</t>
        <figure>
          <artwork><![CDATA[
S: </stream:stream>
          ]]></artwork>
        </figure>
        <t>The client now sends a TLS close_notify alert, receives a responding close_notify alert from the server, and then terminates the underlying TCP connection.</t>
      </section>
    </section>
    <section title="Server-to-Server Examples" anchor="examples-s2s">
      <t>The following examples show the data flow for a server negotiating an XML stream with a peer server, exchanging XML stanzas, and closing the negotiated stream.  The initiating server ("Server1") is im.example.com; the receiving server ("Server2") is example.net and it requires use of TLS; im.example.com presents a certificate and authenticates via the SASL EXTERNAL mechanism.  It is assumed that before sending the initial stream header, Server1 has already resolved an SRV record of _xmpp-server._tcp.example.net and has opened a TCP connection to the advertised port at the resolved IP address.  Note how Server1 declares the content namespace "jabber:server" as the default namespace and uses prefixes for stream-related elements, whereas Server2 uses prefix-free canonicalization.</t>
      <section title="TLS" anchor="examples-s2s-tls">
        <figure>
          <preamble>Step 1: Server1 initiates stream to Server2:</preamble>
          <artwork><![CDATA[
S1: <stream:stream
      from='im.example.com'
      to='example.net'
      version='1.0'
      xmlns='jabber:server'
      xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Step 2: Server2 responds by sending a response stream header to Server1:</preamble>
          <artwork><![CDATA[
S2: <stream
      from='example.net'
      id='hTiXkW+ih9k2SqdGkk/AZi0OJ/Q='
      to='im.example.com'
      version='1.0'
      xmlns='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Step 3: Server2 sends stream features to Server1 (only the STARTTLS extension at this point, which is mandatory-to-negotiate):</preamble>
          <artwork><![CDATA[
S2: <features xmlns='http://etherx.jabber.org/streams'>
      <starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'>
        <required/>
      </starttls>
    </features>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Step 4: Server1 sends the STARTTLS command to Server2:</preamble>
          <artwork><![CDATA[
S1: <starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Step 5: Server2 informs Server1 that it is allowed to proceed:</preamble>
          <artwork><![CDATA[
S2: <proceed xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Step 5 (alt): Server2 informs Server1 that STARTTLS negotiation has failed, closes the stream, and terminates the TCP connection (thus the stream negotiation process ends unsuccessfully and the parties do not move on to the next step):</preamble>
          <artwork><![CDATA[
S2: <failure xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>
    </stream>
          ]]></artwork>
        </figure>
        <t>Step 6: Server1 and Server2 attempt to complete TLS negotiation via TCP (see <xref target='TLS'/> for details).</t>
        <figure>
          <preamble>Step 7: If TLS negotiation is successful, Server1 initiates a new stream to Server2 over the TLS-protected TCP connection:</preamble>
          <artwork><![CDATA[
S1: <stream:stream
      from='im.example.com'
      to='example.net'
      version='1.0'
      xmlns='jabber:server'
      xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <t>Step 7 (alt): If TLS negotiation is unsuccessful, Server2 closes TCP connection (thus the stream negotiation process ends unsuccessfully and the parties do not move on to the next step).</t>
      </section>
      <section title="SASL" anchor="examples-s2s-sasl">
        <figure>
          <preamble>Step 8: Server2 sends a response stream header to Server1 along with available stream features (including a preference for the SASL EXTERNAL mechanism):</preamble>
          <artwork><![CDATA[
S2: <stream
      from='example.net'
      id='RChdjlgj/TIBcbT9Keu31zDihH4='
      to='im.example.com'
      version='1.0'
      xmlns='http://etherx.jabber.org/streams'>

S2: <features xmlns='http://etherx.jabber.org/streams'>
      <mechanisms xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
        <mechanism>EXTERNAL</mechanism>
      </mechanisms>
    </features>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Step 9: Server1 selects the EXTERNAL mechanism (including an empty response of "="):</preamble>
          <artwork><![CDATA[
S1: <auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl'
          mechanism='EXTERNAL'/>=</auth>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Step 10: Server2 returns success:</preamble>
          <artwork><![CDATA[
S2: <success xmlns='urn:ietf:params:xml:ns:xmpp-sasl'/>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Step 10 (alt): Server2 informs Server1 of failed authentication (thus the stream negotiation process ends unsuccessfully and the parties do not move on to the next step):</preamble>
          <artwork><![CDATA[
S2: <failure xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>
      <not-authorized/>
    </failure>
    </stream>
          ]]></artwork>
         </figure>
        <figure>
          <preamble>Step 11: Server1 initiates a new stream to Server2:</preamble>
          <artwork><![CDATA[
S1: <stream:stream
      from='im.example.com'
      to='example.net'
      version='1.0'
      xmlns='jabber:server'
      xmlns:stream='http://etherx.jabber.org/streams'>
          ]]></artwork>
        </figure>
        <figure>
          <preamble>Step 12: Server2 responds by sending a stream header to Server1 along with any additional features (or, in this case, an empty features element):</preamble>
          <artwork><![CDATA[
S2: <stream
      from='example.net'
      id='MbbV2FeojySpUIP6J91qaa+TWHM='
      to='im.example.com'
      version='1.0'
      xmlns='http://etherx.jabber.org/streams'>

S2: <features xmlns='http://etherx.jabber.org/streams'/>
          ]]></artwork>
        </figure>
      </section>
      <section title="Stanza Exchange" anchor="examples-s2s-stanzas">
        <t>Now Server1 is allowed to send XML stanzas to Server2 over the negotiated stream from im.example.com to example.net; here we assume that the transferred stanzas are those shown earlier for client-to-server communication, albeit over a server-to-server stream qualified by the 'jabber:server' namespace.</t>
        <figure>
          <preamble>Server1 sends XML stanza to Server2:</preamble>
          <artwork><![CDATA[
S1: <message from='juliet@im.example.com/balcony'
             id='ju2ba41c'
             to='romeo@example.net'
             type='chat'
             xml:lang='en'>
    <body>Art thou not Romeo, and a Montague?</body>
   </message>
          ]]></artwork>
        </figure>
      </section>
      <section title="Close" anchor="examples-s2s-close">
        <t>Desiring to send no further messages, Server1 closes its stream to Server2 but waits for incoming data from Server2.  (In practice, the stream would most likely remain open for some time, since Server1 and Server2 do not immediately know if the stream will be needed for further communication.)</t>
        <figure>
          <artwork><![CDATA[
S1: </stream:stream>
          ]]></artwork>
        </figure>
        <t>Consistent with the recommended stream closing handshake, Server2 closes the stream as well:</t>
        <figure>
          <artwork><![CDATA[
S2: </stream>
          ]]></artwork>
        </figure>
        <t>Server1 now sends a TLS close_notify alert, receives a responding close_notify alert from Server2, and then terminates the underlying TCP connection.</t>
      </section>
    </section>
  </section>

  <section title="Server Rules for Processing XML Stanzas" anchor="rules">
    <t>Each server implementation will contain its own logic for processing stanzas it receives.  Such logic determines whether the server needs to route a given stanza to another domain, deliver it to a local entity (typically a connected client associated with a local account), or handle it directly within the server itself.  This section provides general rules for processing XML stanzas.  However, particular XMPP applications MAY specify delivery rules that modify or supplement the following rules (e.g., a set of delivery rules for instant messaging and presence applications is defined in <xref target="XMPP-IM"/>).</t>
    <section title="In-Order Processing" anchor="rules-order">
      <t>An XMPP server MUST ensure in-order processing of the stanzas and other XML elements it receives over a given input stream from a connected client or remote server.</t>
      <t>In-order processing applies (a) to any XML elements used to negotiate and manage XML streams, and (b) to all uses of XML stanzas, including but not limited to the following:</t>
      <t>
        <list style='numbers'>
          <t>Stanzas sent by a client to its server or to its own bare JID for direct processing by the server (e.g., in-order processing of a roster get and initial presence as described in <xref target='XMPP-IM'/>).<vspace blankLines='1'/></t>
          <t>Stanzas sent by a connected client and intended for delivery to another entity associated with the server (e.g., stanzas addressed from &lt;juliet@im.example.com&gt; to &lt;nurse@im.example.com&gt;).  The server MUST ensure that it delivers stanzas addressed to the intended recipient in the order it receives them over the input stream from the sending client, treating stanzas addressed to the bare JID and the full JID of the intended recipient as equivalent for delivery purposes.<vspace blankLines='1'/></t>
          <t>Stanzas sent by a connected client and intended for delivery to an entity located at a remote domain (e.g., stanzas addressed from &lt;juliet@im.example.com&gt; to &lt;romeo@example.net&gt;).  The routing server MUST ensure that it routes stanzas addressed to the intended recipient in the order it receives them over the input stream from the sending client, treating stanzas addressed to the bare JID and the full JID of the intended recipient as equivalent for routing purposes.  To help ensure in-order processing, the routing server MUST route such stanzas over a single output stream to the remote domain, rather than sending some stanzas over one server-to-server stream and other stanzas over another server-to-server stream.<vspace blankLines='1'/></t>
          <t>Stanzas routed from one server to another server for delivery to an entity associated with the remote domain (e.g., stanzas addressed from &lt;juliet@im.example.com&gt; to &lt;romeo@example.net&gt; and routed by &lt;im.example.com&gt; over a server-to-server stream to &lt;example.net&gt;).  The delivering server MUST ensure that it delivers stanzas to the intended recipient in the order it receives them over the input stream from the routing server, treating stanzas addressed to the bare JID and the full JID of the intended recipient as equivalent for delivery purposes.<vspace blankLines='1'/></t>
          <t>Stanzas sent by one server to another server for direct processing by the server that is hosting the remote domain (e.g., stanzas addressed from &lt;im.example.com&gt; to &lt;example.net&gt;).</t>
        </list>
      </t>
      <t>If the server's processing of a particular request could have an effect on its processing of subsequent data it might receive over that input stream (e.g., enforcement of communication policies), it MUST suspend processing of subsequent data until it has processed the request.</t>
      <t>In-order processing applies only to a single input stream.  Therefore a server is not responsible for ensuring the coherence of data it receives across multiple input streams associated with the same local account (e.g., stanzas received over two different input streams from &lt;juliet@im.example.com/balcony&gt; and &lt;juliet@im.example.com/chamber&gt;) or the same remote domain (e.g., two different input streams negotiated by a remote domain; however, a server MAY close the stream with a &lt;conflict&gt; stream error (<xref target='streams-error-conditions-conflict'/>) if a remote server attempts to negotiate more than one stream, as described under <xref target="streams-error-conditions-conflict"/>).</t>
    </section>
    <section title="General Considerations" anchor="rules-gen">
      <t>At high level, there are three primary considerations at play in server processing of XML stanzas, which sometimes are at odds but need to be managed in a consistent way:</t>
      <t>
        <list style='numbers'>
          <t>It is good to deliver a stanza to the intended recipient if possible.<vspace blankLines='1'/></t>
          <t>If a stanza cannot be delivered, it is helpful to inform the sender.<vspace blankLines='1'/></t>
          <t>It is bad to facilitate directory harvesting attacks (<xref target='security-harvesting'/>) and presence leaks (<xref target='security-leaks-presence'/>).</t>
        </list>
      </t>
      <t>With regarding to possible delivery-related attacks, the following points need to be kept in mind:</t>
      <t>
        <list style='numbers'>
          <t>From the perspective of an attacker, there is little if any effective difference between the server's (i) delivering the stanza or storing it offline for later delivery (see <xref target='XMPP-IM'/>) and (ii) silently ignoring it (because an error is not returned immediately in any of those cases); therefore, in scenarios where a server delivers a stanza or places the stanza into offline storage for later delivery, it needs to silently ignore the stanza if that account does not exist.<vspace blankLines='1'/></t>
          <t>How a server processes stanzas sent to the bare JID &lt;localpart@domainpart&gt; has implications for directory harvesting, because an attacker could determine whether an account exists if the server responds differently depending on whether there there is an account for a given bare JID.<vspace blankLines='1'/></t>
          <t>How a server processes stanzas sent to a full JID has implications for presence leaks, because an attacker could send requests to multiple full JIDs and receive different replies depending on whether the user has a device currently online at that full JID.  The use of randomized resourceparts (whether generated by the client or the server as described under <xref target='bind'/>) significantly helps to mitigate this attack, so it is of somewhat lesser concern than the directory harvesting attack.</t>
        </list>
      </t>
      <t>Naturally, presence is not leaked if the entity to which a user's server returns an error already knows the user's presence or is authorized to do so (e.g., by means of a presence subscription or directed presence), and a server does not enable a directory harvesting attack if it returns an error to an entity that already knows if a user exists (e.g., because the entity is in the user's contact list); these matters are discussed more fully in <xref target='XMPP-IM'/>.</t>
    </section>
    <section title="No 'to' Address" anchor="rules-noto">
      <t>If the stanza possesses no 'to' attribute, the server MUST handle it directly on behalf of the entity that sent it, where the meaning of "handle it directly" depends on whether the stanza is message, presence, or IQ.  Because all stanzas received from other servers MUST possess a 'to' attribute, this rule applies only to stanzas received from a local entity (typically a client) that is connected to the server.</t>
      <section title="Message" anchor="rules-noto-message">
        <t>If the server receives a message stanza with no 'to' attribute, it MUST treat the message as if the 'to' address were the bare JID &lt;localpart@domainpart&gt; of the sending entity.</t>
      </section>
      <section title="Presence" anchor="rules-noto-presence">
        <t>If the server receives a presence stanza with no 'to' attribute, it MUST broadcast it to the entities that are subscribed to the sending entity's presence, if applicable (<xref target="XMPP-IM"/> defines the semantics of such broadcasting for presence applications).</t>
      </section>
      <section title="IQ" anchor="rules-noto-IQ">
        <t>If the server receives an IQ stanza with no 'to' attribute, it MUST process the stanza on behalf of the account from which received the stanza, as follows:</t>
        <t>
          <list style='numbers'>
            <t>If the IQ stanza is of type "get" or "set" and the server understands the namespace that qualifies the payload, the server MUST handle the stanza on behalf of the sending entity or return an appropriate error to the sending entity.  Although the meaning of "handle" is determined by the semantics of the qualifying namespace, in general the server will respond to the IQ stanza of type "get" or "set" by returning an appropriate IQ stanza of type "result" or "error", responding as if the server were the bare JID of the sending entity.  As an example, if the sending entity sends an IQ stanza of type "get" where the payload is qualified by the 'jabber:iq:roster' namespace (as described in <xref target='XMPP-IM'/>), then the server will return the roster associated with the sending entity's bare JID to the particular resource of the sending entity that requested the roster.<vspace blankLines='1'/></t>
            <t>If the IQ stanza is of type "get" or "set" and the server does not understand the namespace that qualifies the payload, the server MUST return an error to the sending entity, which MUST be &lt;service-unavailable/&gt;.<vspace blankLines='1'/></t>
            <t>If the IQ stanza is of type "error" or "result", the server MUST handle the error or result in accordance with the payload of the associated IQ stanza or type "get" or "set" (if there is no such associated stanza, the server MUST ignore the error or result stanza).</t>
          </list>
        </t>
      </section>
    </section>
    <section title="Remote Domain" anchor="rules-remote">
      <t>If the domainpart of the JID contained in the 'to' attribute does not match one of the configured FQDNs of the server, the server SHOULD attempt to route the stanza to the remote domain (subject to local service provisioning and security policies regarding inter-domain communication, since such communication is OPTIONAL for any given deployment).  As described in the following sections, there are two possible cases.</t>
      <t><list style='empty'><t>Security Warning: These rules apply only client-to-server streams.  As described under <xref target='stanzas-attributes-to-s2s'/>, a server MUST NOT accept a stanza over a server-to-server stream if the domainpart of the JID in the 'to' attribute does not match an FQDN serviced by the receiving server.</t></list></t>
      <section title="Existing Stream" anchor="rules-remote-existing">
        <t>If a server-to-server stream already exists between the two domains, the sender's server SHOULD attempt to route the stanza to the authoritative server for the remote domain over the existing stream.</t>
      </section>
      <section title="No Existing Stream" anchor="rules-remote-nostream">
        <t>If there exists no server-to-server stream between the two domains, the sender's server will proceed as follows:</t>
        <t>
          <list style='numbers'>
            <t>Resolve the FQDN of the remote domain (as described under <xref target="security-reuse-dns"/>).<vspace blankLines='1'/></t>
            <t>Negotiate a server-to-server stream between the two domains (as defined under <xref target='tls'/> and <xref target='sasl'/>).<vspace blankLines='1'/></t>
            <t>Route the stanza to the authoritative server for the remote domain over the newly-established stream.</t>
          </list>
        </t>
      </section>
      <section title="Error Handling" anchor="rules-remote-error">
        <t>If routing of a stanza to the intended recipient's server is unsuccessful, the sender's server MUST return an error to the sender.  If resolution of the remote domain is unsuccessful, the stanza error MUST be &lt;remote-server-not-found/&gt; (<xref target='stanzas-error-conditions-remote-server-not-found'/>).  If resolution succeeds but streams cannot be negotiated, the stanza error MUST be &lt;remote-server-timeout/&gt; (<xref target='stanzas-error-conditions-remote-server-timeout'/>).</t>
        <t>If stream negotiation with the intended recipient's server is successful but the remote server cannot deliver the stanza to the recipient, the remote server MUST return an appropriate error to the sender by way of the sender's server.</t>
      </section>
    </section>
    <section title="Local Domain" anchor="rules-local">
      <t>If the domainpart of the JID contained in the 'to' attribute matches one of the configured FQDNs of the server, the server MUST first determine if the FQDN is serviced by the server itself or by a specialized local service.  If the latter, the server MUST route the stanza to that service.  If the former, the server MUST proceed as follows.  However, the server MUST NOT route or "forward" the stanza to another domain, because it is the server's responsibility to process all stanzas for which the domainpart of the 'to' address matches one of the configured FQDNs of the server (among other things, this helps to prevent looping).</t>
      <section title="domainpart" anchor="rules-local-domain">
        <t>If the JID contained in the 'to' attribute is of the form &lt;domainpart&gt;, then the server MUST either (a) handle the stanza as appropriate for the stanza kind or (b) return an error stanza to the sender.</t>
      </section>
      <section title="domainpart/resourcepart" anchor="rules-local-domainresource">
        <t>If the JID contained in the 'to' attribute is of the form &lt;domainpart/resourcepart&gt;, then the server MUST either (a) handle the stanza as appropriate for the stanza kind or (b) return an error stanza to the sender.</t>
      </section>
      <section title="localpart@domainpart" anchor="rules-local-barejid">
        <t>An address of this type is normally associated with an account on the server.  The following rules provide some general guidelines; more detailed rules in the context of instant messaging and presence applications are provided in <xref target='XMPP-IM'/>.</t>
        <section title="No Such User" anchor="rules-local-barejid-nosuchuser">
          <t>If there is no local account associated with the &lt;localpart@domainpart&gt;, how the stanza is processed depends on the stanza type.</t>
          <t>
            <list style='symbols'>
              <t>For a message stanza, the server MUST either (a) silently ignore the stanza or (b) return a &lt;service-unavailable/&gt; stanza error (<xref target='stanzas-error-conditions-service-unavailable'/>) to the sender.<vspace blankLines='1'/></t>
              <t>For a presence stanza, the server SHOULD ignore the stanza (or behave as described in <xref target='XMPP-IM'/>).<vspace blankLines='1'/></t>
              <t>For an IQ stanza, the server MUST return a &lt;service-unavailable/&gt; stanza error (<xref target='stanzas-error-conditions-service-unavailable'/>) to the sender.</t>
            </list>
          </t>
        </section>
        <section title="User Exists" anchor="rules-local-barejid-userexists">
          <t>If the JID contained in the 'to' attribute is of the form &lt;localpart@domainpart&gt;, how the stanza is processed depends on the stanza type.</t>
          <t>
            <list style='symbols'>
              <t>For a message stanza, if there exists at least one connected resource for the account then the server SHOULD deliver it to at least one of the connected resources.  If there exists no connected resource then the server MUST either (a) store the message offline for delivery when the account next has a connected resource or (b) return a &lt;service-unavailable/&gt; stanza error (<xref target='stanzas-error-conditions-service-unavailable'/>).<vspace blankLines='1'/></t>
              <t>For a presence stanza, if there exists at least one connected resource that has sent initial presence (i.e., has a "presence session" as defined in <xref target='XMPP-IM'/>) then the server SHOULD deliver it to such resources.  If there exists no connected resource then the server SHOULD ignore the stanza (or behave as described in <xref target='XMPP-IM'/>).<vspace blankLines='1'/></t>
              <t>For an IQ stanza, the server MUST handle it directly on behalf of the intended recipient.</t>
            </list>
          </t>
        </section>
      </section>
      <section title="localpart@domainpart/resourcepart" anchor="rules-local-fulljid">
        <t>If the JID contained in the 'to' attribute is of the form &lt;localpart@domainpart/resourcepart&gt; and the user exists but there is no connected resource that exactly matches the full JID, the stanza SHOULD be processed as if the JID were of the form &lt;localpart@domainpart&gt; as described under <xref target='rules-local-barejid-userexists'/>.</t>
        <t>If the JID contained in the 'to' attribute is of the form &lt;localpart@domainpart/resourcepart&gt;, the user exists, and there is a connected resource that exactly matches the full JID, the server MUST deliver the stanza to that connected resource.</t>
      </section>
    </section>
  </section>

  <section title="XML Usage" anchor="xml">
    <section title="XML Restrictions" anchor="xml-restrictions">
      <t>XMPP defines a class of data objects called XML streams as well as the behavior of computer programs that process XML streams.  XMPP is an application profile or restricted form of the Extensible Markup Language <xref target='XML'/>, and a complete XML stream (including start and end stream tags) is a conforming XML document.</t>
      <t>However, XMPP does not deal with XML documents but with XML streams.  Because XMPP does not require the parsing of arbitrary and complete XML documents, there is no requirement that XMPP needs to support the full feature set of <xref target="XML"/>.  Furthermore, XMPP uses XML to define protocol data structures and extensions for the purpose of structured interactions between network entities and therefore adheres to the recommendations provided in <xref target='XML-GUIDE'/> regarding restrictions on the use of XML in IETF protocols.  As a result, the following features of XML are prohibited in XMPP:</t>
      <t>
        <list style='symbols'>
          <t>comments (as defined in Section 2.5 of <xref target="XML"/>)</t>
          <t>processing instructions (Section 2.6 therein)</t>
          <t>internal or external DTD subsets (Section 2.8 therein)</t>
          <t>internal or external entity references (Section 4.2 therein) with the exception of the predefined entities (Section 4.6 therein)</t>
        </list>
      </t>
      <t>An XMPP implementation MUST behave as follows with regard to these features:</t>
      <t>
        <list style='numbers'>
          <t>An XMPP implementation MUST NOT inject characters matching such features into an XML stream.<vspace blankLines='1'/></t>
          <t>If an XMPP implementation receives characters matching such features over an XML stream, it MUST close the stream with a stream error, which SHOULD be &lt;restricted-xml/&gt; (<xref target='streams-error-conditions-restricted-xml'/>), although some existing implementations send &lt;bad-format/&gt; (<xref target='streams-error-conditions-bad-format'/>) instead.</t>
        </list>
      </t>
    </section>

    <section title="XML Namespace Names and Prefixes" anchor="xml-ns">
      <t>XML namespaces (see <xref target="XML-NAMES"/>) are used within XMPP streams to create strict boundaries of data ownership.  The basic function of namespaces is to separate different vocabularies of XML elements that are structurally mixed together.  Ensuring that XMPP streams are namespace-aware enables any allowable XML to be structurally mixed with any data element within XMPP.  XMPP-specific rules for XML namespace names and prefixes are defined under <xref target='streams-ns'/> for XML streams and <xref target='stanzas-extended'/> for XML stanzas.</t>
    </section>

    <section title="Well-Formedness" anchor="xml-wellformed">
      <t>In XML, there are two varieties of well-formedness:</t>
      <t>
        <list style='symbols'>
          <t>"XML-well-formedness" in accordance with the definition of "well-formed" from Section 2.1 of <xref target='XML'/>.<vspace blankLines='1'/></t>
          <t>"Namespace-well-formedness" in accordance with the definition of "namespace-well-formed" from Section 7 of <xref target='XML-NAMES'/>.</t>
        </list>
      </t>
      <t>The following rules apply.</t>
      <t>
        <list style='numbers'>
          <t>An XMPP entity MUST NOT generate data that is not XML-well-formed.<vspace blankLines='1'/></t>
          <t>An XMPP entity MUST NOT accept data that is not XML-well-formed; instead it MUST close the stream over which the data was received with a &lt;not-well-formed/&gt; stream error (<xref target='streams-error-conditions-not-well-formed'/>).<vspace blankLines='1'/></t>
          <t>An XMPP entity MUST NOT generate data that is not namespace-well-formed.<vspace blankLines='1'/></t>
          <t>An XMPP entity MUST NOT accept data that is not namespace-well-formed (in particular, an XMPP server MUST NOT route or deliver data that is not namespace-well-formed); instead it MUST return either a &lt;not-acceptable/&gt; stanza error (<xref target='stanzas-error-conditions-not-acceptable'/>) or close the stream with a &lt;not-well-formed/&gt; stream error (<xref target='streams-error-conditions-not-well-formed'/>), where it is preferable to close the stream with a stream error because accepting such data can open an entity to certain denial of service attacks.</t>
        </list>
      </t>
      <t><list style='empty'><t>Interoperability Note: Because these restrictions were underspecified in <xref target='RFC3920'/>, it is possible that implementations based on that specification will send data that does not comply with these restrictions.</t></list></t>
    </section>

    <section title="Validation" anchor="xml-validation">
      <t>A server is not responsible for ensuring that XML data delivered to a connected client or routed to a peer server is valid, in accordance with the definition of "valid" provided in Section 2.8 of <xref target='XML'/>.  An implementation MAY choose to accept or send only data that has been explicitly validated against the schemas provided in this document, but such behavior is OPTIONAL.  Clients are advised not to rely on the ability to send data that does not conform to the schemas, and SHOULD ignore any non-conformant elements or attributes on the incoming XML stream.</t>
      <t><list style='empty'><t>Informational Note: The terms "valid" and "well-formed" are distinct in XML.</t></list></t>
    </section>

    <section title="Inclusion of XML Declaration" anchor="xml-declaration">
      <t>Before sending a stream header, an implementation SHOULD send an XML declaration (matching the "XMLDecl" production from <xref target='XML'/>).  Applications MUST follow the rules provided in <xref target="XML"/> regarding the format of the XML declaration and the circumstances under which the XML declaration is included.</t>
      <t>Because external markup declarations are prohibited in XMPP (as described under <xref target='xml-restrictions'/>), the standalone document declaration (matching the "SDDecl" production from <xref target='XML'/>) would have no meaning and therefore MUST NOT be included in an XML declaration sent over an XML stream.  If an XMPP entity receives an XML declaration containing a standalone document declaration set to a value of "no", the entity MUST either ignore the standalone document declaration or close the stream with a stream error, which SHOULD be &lt;restricted-xml/&gt; (<xref target='streams-error-conditions-restricted-xml'/>).</t>
    </section>

    <section title="Character Encoding" anchor="xml-encoding">
      <t>Implementations MUST support the UTF-8 transformation of Universal Character Set <xref target="UCS2"/> characters, as needed for conformance with <xref target="CHARSETS"/> and as defined in <xref target='UTF-8'/>.  Implementations MUST NOT attempt to use any other encoding.  If one party to an XML stream detects that the other party has attempted to send XML data with an encoding other than UTF-8, it MUST close the stream with a stream error, which SHOULD be &lt;unsupported-encoding/&gt; (<xref target='streams-error-conditions-unsupported-encoding'/>), although some existing implementations send &lt;bad-format/&gt; (<xref target='streams-error-conditions-bad-format'/>) instead.</t>
      <t>Because it is mandatory for an XMPP implementation to support all and only the UTF-8 encoding and because UTF-8 always has the same byte order, an implementation MUST NOT send a byte order mark ("BOM") at the beginning of the data stream.  If an entity receives the <xref target='UNICODE'/> character U+FEFF anywhere in an XML stream (including as the first character of the stream), it MUST interpret that character as a zero width no-break space, not as a byte order mark.</t>
    </section>

    <section title="Whitespace" anchor="xml-whitespace">
      <t>Except where explicitly disallowed (e.g., during <xref target='tls'>TLS negotiation</xref> and <xref target='sasl'>SASL negotiation</xref>), either entity MAY send whitespace as separators between XML stanzas or between any other first-level elements sent over the stream.  One common use for sending such whitespace is explained under <xref target='streams-close'/>.</t>
    </section>

    <section title="XML Versions" anchor="xml-versions">
      <t>XMPP is an application profile of XML 1.0.  A future version of XMPP might be defined in terms of higher versions of XML, but this specification defines XMPP only in terms of XML 1.0.</t>
    </section>

  </section>

  <section title="Internationalization Considerations" anchor="i18n">
    <t>As specified under <xref target="xml-encoding"/>, XML streams MUST be encoded in UTF-8.</t>
    <t>As specified under <xref target="streams-attr"/>, an XML stream SHOULD include an 'xml:lang' attribute specifying the default language for any XML character data that is intended to be presented to a human user.  As specified under <xref target="stanzas-attributes-lang"/>, an XML stanza SHOULD include an 'xml:lang' attribute if the stanza contains XML character data that is intended to be presented to a human user.  A server SHOULD apply the default 'xml:lang' attribute to stanzas it routes or delivers on behalf of connected entities, and MUST NOT modify or delete 'xml:lang' attributes on stanzas it receives from other entities.</t>
    <t>Internationalization of XMPP addresses is specified in <xref target='XMPP-ADDR'/>.</t>
  </section>

  <section title="Security Considerations" anchor="security">
    <section title="Fundamentals" anchor="security-fundamentals">
      <t>XMPP technologies are typically deployed using a decentralized client-server architecture.  As a result, several paths are possible when two XMPP entities need to communicate:</t>
      <t>
        <list style='numbers'>
          <t>Both entities are servers.  In this case, the entities can establish a direct server-to-server stream between themselves.<vspace blankLines='1'/></t>
          <t>One entity is a server and the other entity is a client whose account is hosted on that server.  In this case, the entities can establish a direct client-to-server stream between themselves.<vspace blankLines='1'/></t>
          <t>Both entities are clients whose accounts are hosted on the same server.  In this case, the entities cannot establish a direct stream between themselves, but there is only one intermediate entity between them, whose policies they might understand and in which they might have some level of trust (e.g., the server might require the use of Transport Layer Security for all client connections).<vspace blankLines='1'/></t>
          <t>Both entities are clients but their accounts are hosted on different servers.  In this case, the entities cannot establish a direct stream between themselves and there are two intermediate entities between them; each client might have some trust in the server that hosts its account but might know nothing about the policies of the server to which the other client connects.</t>
        </list>
      </t>
      <t>This specification covers only the security of a direct XML stream between two servers or between a client and a server (cases #1 and #2), where each stream can be considered a single "hop" along a communication path.  The goal of security for a multi-hop path (cases #3 and #4), although very desirable, is out of scope for this specification.</t>
      <t>In accordance with <xref target='SEC-GUIDE'/>, this specification covers communication security (confidentiality, data integrity, and peer entity authentication), non-repudiation, and systems security (unauthorized usage, inappropriate usage, and denial of service).  We also discuss common security issues such as information leaks, firewalls, and directory harvesting, as well as best practices related to the re-use of technologies such as base 64, DNS, cryptographic hash functions, SASL, TLS, UTF-8, and XML.</t>
    </section>
    <section title="Threat Model" anchor="security-threats">
      <t>The threat model for XMPP is in essence the standard "Internet Threat Model" described in <xref target='SEC-GUIDE'/>.  Attackers are assumed to be interested in and capable of launching the following attacks against unprotected XMPP systems:</t>
      <t>
        <list style='symbols'>
          <t>Eavesdropping</t>
          <t>Sniffing passwords</t>
          <t>Breaking passwords through dictionary attacks</t>
          <t>Discovering usernames through directory harvesting attacks</t>
          <t>Replaying, inserting, deleting, or modifying stanzas</t>
          <t>Spoofing users</t>
          <t>Gaining unauthorized entry to a server or account</t>
          <t>Using a server or account inappropriately</t>
          <t>Denying service to other entities</t>
          <t>Subverting communication streams through man-in-the-middle attacks</t>
          <t>Gaining control over on-path servers</t>
        </list>
      </t>
      <t>Where appropriate, the following sections describe methods for protecting against these threats.</t>
    </section>
    <section title="Order of Layers" anchor="security-layers">
      <t>The order of layers in which protocols MUST be stacked is as follows:</t>
      <t>
        <list style='numbers'>
          <t>TCP</t>
          <t>TLS</t>
          <t>SASL</t>
          <t>XMPP</t>
        </list>
      </t>
      <t>This order has important security implications, as described throughout these security considerations.</t>
      <t>Within XMPP, XML stanzas are further ordered on top of XML streams, as described under <xref target='streams'/>.</t>
    </section>
    <section title="Confidentiality and Integrity" anchor="security-confidentiality">
      <t>The use of Transport Layer Security (TLS) with appropriate ciphersuites provides a reliable mechanism to ensure the confidentiality and integrity of data exchanged between a client and a server or between two servers.  Therefore TLS can help to protect against eavesdropping, password sniffing, man-in-the-middle attacks, and stanza replays, insertion, deletion, and modification over an XML stream.  XMPP clients and servers MUST support TLS as defined under <xref target='tls'/>.</t>
      <t><list style='empty'><t>Informational Note: The confidentiality and integrity of a stream can be protected by methods other than TLS, e.g. by means of a SASL mechanism that involves negotiation of a security layer.</t></list></t>
      <t><list style='empty'><t>Security Warning: The use of TLS in XMPP applies to a single stream.  Because XMPP is typically deployed using a distributed client-server architecture (as explained under <xref target='arch-network'/>), a stanza might traverse multiple streams, and not all of those streams might be TLS-protected.  For example, a stanza sent from a client with a session at one server (e.g., &lt;romeo@example.net/orchard&gt;) and intended for delivery to a client with a session at another server (e.g., &lt;juliet@example.com/balcony&gt;) will traverse three streams: (1) the stream from the sender's client to its server, (2) the stream from the sender's server to the recipient's server, and (3) the stream from the recipient's server to the recipient's client.  Furthermore, the stanza will be processed as cleartext within the sender's server and the recipient's server.  Therefore, even if the stream from the sender's client to its server is protected, the confidentiality and integrity of a stanza sent over that protected stream cannot be guaranteed when the stanza is processed by the sender's server, sent from the sender's server to the recipient's server, processed by the recipient's server, or sent from the recipient's server to the recipient's client.  Only a robust technology for end-to-end encryption could ensure the confidentiality and integrity of a stanza as it traverses all of the "hops" along a communication path (e.g., a technology that meets the requirements defined in <xref target='E2E-REQS'/>).  Unfortunately, the XMPP community has so far failed to produce an end-to-end encryption technology that might be suitable for widespread implementation and deployment, and definition of such a technology is out of scope for this document.</t></list></t>
    </section>
    <section title="Peer Entity Authentication" anchor="security-authentication">
      <t>The use of the Simple Authentication and Security Layer (SASL) for authentication provides a reliable mechanism for peer entity authentication.  Therefore SASL helps to protect against user spoofing, unauthorized usage, and man-in-the middle attacks.  XMPP clients and servers MUST support SASL as defined under <xref target='sasl'/>.</t>
    </section>
    <section title="Strong Security" anchor="security-strong">
      <t><xref target='STRONGSEC'/> defines "strong security" and its importance to communication over the Internet.  For the purpose of XMPP communication over client-to-server and server-to-server streams, the term "strong security" refers to the use of security technologies that provide both mutual authentication and integrity checking (e.g., a combination of TLS encryption and SASL authentication using appropriate SASL mechanisms).</t>
      <t>Implementations MUST support strong security.  Service provisioning SHOULD use strong security.</t>
      <t>An implementation SHOULD make it possible for an end user or service administrator to provision a deployment with specific trust anchors for the certificate presented by a connecting entity (either client or server); when an application is thus provisioned, it MUST NOT use a generic PKI trust store to authenticate the connecting entity.  More detailed rules and guidelines regarding certificate validation are provided in the next section.</t>
      <t>The initial stream and the response stream MUST be secured separately, although security in both directions MAY be established via mechanisms that provide mutual authentication.</t>
    </section>
    <section title="Certificates" anchor="security-certificates">
      <t>Channel encryption of an XML stream using Transport Layer Security as described under <xref target='tls'/>, and in some cases also authentication as described under <xref target='sasl'/>, is commonly based on a PKIX certificate presented by the receiving entity (or, in the case of mutual certificate authentication, both the receiving entity and the initiating entity).  This section describes best practices regarding the generation of PKIX certificates to be presented by XMPP entities and the verification of PKIX certificates presented by XMPP entities.</t>
      <t>In general, the following sections rely on and extend the rules and guidelines provided in the <xref target='PKIX'/> profile of <xref target='X509'/>, and in <xref target='TLS-CERTS'/>.  The reader is referred to those specifications for a detailed understanding of PKIX certificates and their use in TLS.</t>
      <section title="Certificate Generation" anchor="security-certificates-generation">
        <section title="General Considerations" anchor="security-certificates-generation-general">
          <t>The following rules apply to end entity public key certificates that are issued to XMPP servers or clients:</t>
          <t>
            <list style='numbers'>
              <t>The certificate MUST conform to <xref target='PKIX'/>.<vspace blankLines='1'/></t>
              <t>The certificate MUST NOT contain a basicConstraints extension with the cA boolean set to TRUE.<vspace blankLines='1'/></t>
              <t>The subject field MUST NOT be null.<vspace blankLines='1'/></t>
              <t>The signatureAlgorithm SHOULD be the PKCS #1 version 1.5 signature algorithm with SHA-256 as defined by <xref target='PKIX-ALGO'/>, or a strong algorithm if available.<vspace blankLines='1'/></t>
              <t>The certificate SHOULD include an Authority Information Access (AIA) extension that specifies the address of an Online Certificate Status Protocol <xref target='OCSP'/> responder (if not, a relying party would need to fall back on the use of Certificate Revocation Lists (CRLs) as described in <xref target='PKIX'/>).</t>
            </list>
          </t>
          <t>The following rules apply to certification authority (CA) certificates that are used by issuers of XMPP end entity certificates:</t>
          <t>
            <list style='numbers'>
              <t>The certificate MUST conform to <xref target='PKIX'/>.<vspace blankLines='1'/></t>
              <t>The certificate MUST contain a keyUsage extension with the digitalSignature bit set.<vspace blankLines='1'/></t>
              <t>The subject field MUST NOT be null.<vspace blankLines='1'/></t>
              <t>The signatureAlgorithm SHOULD be the PKCS #1 version 1.5 signature algorithm with SHA-256 as defined by <xref target='PKIX-ALGO'/>.<vspace blankLines='1'/></t>
              <t>For issuers of public key certificates, the issuer's certificate MUST contain a basicConstraints extension with the cA boolean set to TRUE.</t>
            </list>
          </t>
        </section>
        <section title="Server Certificates" anchor="security-certificates-generation-server">
          <section title="Rules" anchor="security-certificates-generation-server-rules">
            <t>In a PKIX certificate to be presented by an XMPP server (i.e., a "server certificate"), the certificate MUST include one or more XMPP addresses (i.e., domainparts) associated with XMPP services hosted at the server.  The rules and guidelines defined in <xref target='TLS-CERTS'/> apply to XMPP server certificates, with the following XMPP-specific considerations:</t>
            <t>
              <list style='symbols'>
                <t>Support for the DNS-ID identifier type <xref target='PKIX'/> is REQUIRED in XMPP client and server software implementations.  Certification authorities that issue XMPP-specific certificates MUST support the DNS-ID identifier type.  XMPP service providers SHOULD include the DNS-ID identifier type in certificate requests.<vspace blankLines='1'/></t>
                <t>Support for the SRV-ID identifier type <xref target='PKIX-SRV'/> is REQUIRED for XMPP client and server software implementations (for verification purposes XMPP client implementations need to support only the "_xmpp-client" service type, whereas XMPP server implementations need to support both the "_xmpp-client" and "_xmpp-server" service types).  Certification authorities that issue XMPP-specific certificates SHOULD support the SRV-ID identifier type.  XMPP service providers SHOULD include the SRV-ID identifier type in certificate requests.<vspace blankLines='1'/></t>
                <t>Support for the XmppAddr identifier type (specified under <xref target='security-certificates-generation-xmppaddr'/>) is encouraged in XMPP client and server software implementations for the sake of backward-compatibility, but is no longer encouraged in certificates issued by certification authorities or requested by XMPP service providers.<vspace blankLines='1'/></t>
                <t>DNS domain names in server certificates MAY contain the wildcard character '*' as the complete left-most label within the identifier.</t>
              </list>
            </t>
          </section>
          <section title="Examples" anchor="security-certificates-generation-server-examples">
            <t>For our first (relatively simple) example, consider a company called "Example Products, Inc."  It hosts an XMPP service at "im.example.com" (i.e., user addresses at the service are of the form "user@im.example.com"), and SRV lookups for the xmpp-client and xmpp-server services at "im.example.com" yield one machine, called "x.example.com", as follows:</t>
            <figure>
              <artwork><![CDATA[
_xmpp-client._tcp.im.example.com. 400 IN SRV 20 0 5222 x.example.com
_xmpp-server._tcp.im.example.com. 400 IN SRV 20 0 5269 x.example.com
              ]]></artwork>
            </figure>
            <t>The certificate presented by x.example.com contains the following representations:</t>
            <t>
              <list style='symbols'>
                <t>An otherName type of SRVName (id-on-dnsSRV) containing an IA5String (ASCII) string of: "_xmpp-client.im.example.com"<vspace blankLines='1'/></t>
                <t>An otherName type of SRVName (id-on-dnsSRV) containing an IA5String (ASCII) string of: "_xmpp-server.im.example.com"<vspace blankLines='1'/></t>
                <t>A dNSName containing an ASCII string of "im.example.com"<vspace blankLines='1'/></t>
                <t>An otherName type of XmppAddr (id-on-xmppAddr) containing a UTF-8 string of: "im.example.com"<vspace blankLines='1'/></t>
                <t>A CN containing an ASCII string of "Example Products, Inc."</t>
              </list>
            </t>
            <t>For our second (more complex) example, consider an ISP called "Example Internet Services".  It hosts an XMPP service at "example.net" (i.e., user addresses at the service are of the form "user@example.net"), but SRV lookups for the xmpp-client and xmpp-server services at "example.net" yield two machines ("x1.example.net" and "x2.example.net"), as follows:</t>
            <figure>
              <artwork><![CDATA[
_xmpp-client._tcp.example.net. 68400 IN SRV 20 0 5222 x1.example.net.
_xmpp-client._tcp.example.net. 68400 IN SRV 20 0 5222 x2.example.net.
_xmpp-server._tcp.example.net. 68400 IN SRV 20 0 5269 x1.example.net.
_xmpp-server._tcp.example.net. 68400 IN SRV 20 0 5269 x2.example.net.
              ]]></artwork>
            </figure>
            <t>Example Internet Services also hosts chatrooms at chat.example.net, and provides an xmpp-server SRV record for that service as well (thus enabling entities from remote domains to access that service).  It also might provide other such services in the future, so it wishes to represent a wildcard in its certificate to handle such growth.</t>
            <t>The certificate presented by either x1.example.net or x2.example.net contains the following representations:</t>
            <t>
              <list style='symbols'>
                <t>An otherName type of SRVName (id-on-dnsSRV) containing an IA5String (ASCII) string of: "_xmpp-client.example.net"<vspace blankLines='1'/></t>
                <t>An otherName type of SRVName (id-on-dnsSRV) containing an IA5String (ASCII) string of: "_xmpp-server.example.net"<vspace blankLines='1'/></t>
                <t>An otherName type of SRVName (id-on-dnsSRV) containing an IA5String (ASCII) string of: "_xmpp-server.chat.example.net"<vspace blankLines='1'/></t>
                <t>A dNSName containing an ASCII string of "example.net"<vspace blankLines='1'/></t>
                <t>A dNSName containing an ASCII string of "*.example.net"<vspace blankLines='1'/></t>
                <t>An otherName type of XmppAddr (id-on-xmppAddr) containing a UTF-8 string of: "example.net"<vspace blankLines='1'/></t>
                <t>An otherName type of XmppAddr (id-on-xmppAddr) containing a UTF-8 string of: "chat.example.net"<vspace blankLines='1'/></t>
                <t>A CN containing an ASCII string of "Example Internet Services"</t>
              </list>
            </t>
          </section>
        </section>
        <section title="Client Certificates" anchor="security-certificates-generation-client">
          <t>In a PKIX certificate to be presented by an XMPP client controlled by a human user (i.e., a "client certificate"), it is RECOMMENDED for the certificate to include one or more JIDs associated with an XMPP user.  If included, a JID MUST be represented as an XmppAddr as specified under <xref target='security-certificates-generation-xmppaddr'/>.</t>
        </section>
        <section title="XmppAddr Identifier Type" anchor="security-certificates-generation-xmppaddr">
          <t>The XmppAddr identifier type is a UTF8String within an otherName entity inside the subjectAltName, using the <xref target="ASN.1"/> Object Identifier "id-on-xmppAddr" specified below.</t>
          <figure>
            <artwork><![CDATA[
id-pkix OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)
        dod(6) internet(1) security(5) mechanisms(5) pkix(7) }

id-on  OBJECT IDENTIFIER ::= { id-pkix 8 }  -- other name forms

id-on-xmppAddr  OBJECT IDENTIFIER ::= { id-on 5 }

XmppAddr ::= UTF8String
            ]]></artwork>
          </figure>
          <t>As an alternative to the "id-on-xmppAddr" notation, this Object Identifier MAY be represented in dotted display format (i.e., "1.3.6.1.5.5.7.8.5") or in the Uniform Resource Name notation specified in <xref target='URN-OID'/> (i.e., "urn:oid:1.3.6.1.5.5.7.8.5").</t>
          <t>Thus for example the JID &lt;juliet@im.example.com&gt; as included in a certificate could be formatted in any of the following three ways:</t>
          <t>
            <list style='hanging'>
              <t hangText="id-on-xmppAddr:">subjectAltName=otherName:id-on-xmppAddr;UTF8:juliet@im.example.com<vspace blankLines='1'/></t>
              <t hangText="dotted display format:">subjectAltName=otherName:1.3.6.1.5.5.7.8.5;UTF8:juliet@im.example.com<vspace blankLines='1'/></t>
              <t hangText="URN notation:">subjectAltName=otherName:urn:oid:1.3.6.1.5.5.7.8.5;UTF8:juliet@im.example.com</t>
            </list>
          </t>
          <t>Use of the "id-on-xmppAddr" format is RECOMMENDED in the generation of certificates, but all three formats MUST be supported for the purpose of certificate validation.</t>
          <t>The "id-on-xmppAddr" object identifier MAY be used on conjunction with the extended key usage extension specified in Section 4.2.1.12 of <xref target='PKIX'/> in order to explicitly define and limit the intended use of a certificate to the XMPP network.</t>
        </section>
      </section>
      <section title="Certificate Validation" anchor="security-certificates-validation">
        <t>When an XMPP entity is presented with a server certificate or client certificate by a peer for the purpose of encryption or authentication of XML streams as described under <xref target='tls'/> and <xref target='sasl'/>, the entity MUST attempt to validate the certificate to determine if the certificate will be considered a "trusted certificate", i.e., a certificate that is acceptable for encryption and/or authentication in accordance with the XMPP entity's local service policies or configured settings.</t>
        <t>For both server certificates and client certificates, the validating entity MUST do the following:</t>
        <t>
          <list style='numbers'>
            <t>Attempt to verify the integrity of the certificate.<vspace blankLines='1'/></t>
            <t>Attempt to verify that the certificate has been properly signed by the issuing Certificate Authority.<vspace blankLines='1'/></t>
            <t>Attempt to validate the full certification path.<vspace blankLines='1'/></t>
            <t>Check the rules for end entity public key certificates and certification authority certificates specified under <xref target='security-certificates-generation-general'/> for the general case and under either <xref target='security-certificates-generation-server'/> or <xref target='security-certificates-generation-server'/> for XMPP server or client certificates, respectively.<vspace blankLines='1'/></t>
            <t>Check certificate revocation messages via Certificate Revocation Lists (CRLs), the Online Certificate Status Protocol <xref target='OCSP'/>, or both.</t>
          </list>
        </t>
        <t>If any of those validation attempts fail, the validating entity MUST unilaterally terminate the session.</t>
        <t>The following sections describe the additional identity verification rules that apply to server-to-server and client-to-server streams.</t>
        <t>Once the identity of the stream peer has been validated, the validating entity SHOULD also correlate the validated identity with the 'from' address (if any) of the stream header it received from the peer.  If the two identities do not match, the validating entity SHOULD terminate the connection attempt (however, there might be good reasons why the identities do not match, as described under <xref target='streams-attr-from'/>).</t>
        <section title="Server Certificates" anchor="security-certificates-validation-server">
          <t>For server certificates, the rules and guidelines defined in <xref target='TLS-CERTS'/> apply, with the proviso that the XmppAddr identifier specified under <xref target='security-certificates-generation-xmppaddr'/> is allowed as a reference identifier.</t>
          <t>The identities to be checked are set as follows:</t>
          <t>
            <list style='symbols'>
              <t>The initiating entity sets its reference identifier to the 'to' address it communicates in the initial stream header; i.e., this is the identity it expects the receiving entity to provide in a PKIX certificate.<vspace blankLines='1'/></t>
              <t>The receiving entity sets its reference identifier to the 'from' address communicated by the initiating entity in the initial stream header; i.e., this is the identity that the initiating entity is trying to assert.</t>
            </list>
          </t>
          <t>In the case of server-to-server communication, the matching procedure described in <xref target='TLS-CERTS'/> can be performed by an application server (receiving entity) when verifying an incoming server-to-server connection from a peer server (initiating entity).  In this case, the receiving entity verifies the identity of the initiating entity and uses as its reference identifier the DNS domain name asserted by the initiating entity in the 'from' attribute of the initial stream header.  However, the matching procedure described in <xref target='TLS-CERTS'/> remains unchanged and is applied in the same way.</t>
        </section>
        <section title="Client Certificates" anchor="security-certificates-validation-client">
          <t>When an XMPP server validates a certificate presented by a client, there are three possible cases, as discussed in the following sections.</t>
          <t>The identities to be checked are set as follows:</t>
          <t>
            <list style='symbols'>
              <t>The client sets its reference identifier to the 'to' address it communicates in the initial stream header; i.e., this is the identity it expects the server to provide in a PKIX certificate.<vspace blankLines='1'/></t>
              <t>The server sets its reference identifier to the 'from' address communicated by the initiating entity in the initial stream header; i.e., this is the identity that the client is trying to assert.</t>
            </list>
          </t>
          <section title="Case #1" anchor="security-certificates-validation-client-case1">
            <t>If the client certificate appears to be certified by a certification path terminating in a trust anchor (as described in Section 6.1 of <xref target="PKIX"/>), the server MUST check the certificate for any instances of the XmppAddr as described under <xref target='security-certificates-generation-xmppaddr'/>.  There are three possible sub-cases:</t>
            <t>
              <list style='hanging'>
                <t hangText='Sub-Case #1:'>The server finds one XmppAddr for which the domainpart of the represented JID matches one of the configured FQDNs of the server; the server SHOULD use this represented JID as the validated identity of the client.<vspace blankLines='1'/></t>
                <t hangText='Sub-Case #2:'>The server finds more than one XmppAddr for which the domainpart of the represented JID matches one of the configured FQDNs of the server; the server SHOULD use one of these represented JIDs as the validated identity of the client, choosing among them based on the bare JID contained in the 'from' address of the initial stream header (if any), based on the domainpart contained in the 'to' address of the initial stream header, or in accordance with local service policies (such as a lookup in a user database based on other information contained in the client certificate).<vspace blankLines='1'/></t>
                <t hangText='Sub-Case #3:'>The server finds no XmppAddrs, or finds at least one XmppAddr but the domainpart of the represented JID does not match one of the configured FQDNs of the server; the server MUST NOT use the represented JID (if any) as the validated identity of the client but instead MUST validate the identity of the client using other means in accordance with local service policies (such as a lookup in a user database based on other information contained in the client certificate).  If the identity cannot be so validated, the server MAY abort the validation process and terminate the TLS negotiation.</t>
              </list>
            </t>
          </section>
          <section title="Case #2" anchor="security-certificates-validation-client-case2">
            <t>If the client certificate is certified by a Certificate Authority not known to the server, the server MUST proceed as under Case #1, Sub-Case #3.</t>
          </section>
          <section title="Case #3" anchor="security-certificates-validation-client-case3">
            <t>If the client certificate is self-signed, the server MUST proceed as under Case #1, Sub-Case #3.</t>
          </section>
        </section>
        <section title="Checking of Certificates in Long-Lived Streams" anchor="security-certificates-validation-streams">
          <t>Because XMPP uses long-lived XML streams, it is possible that a certificate presented during stream negotiation might expire or be revoked while the stream is still live (this is especially relevant in the context of server-to-server streams).  Therefore, each party to a long-lived stream SHOULD:</t>
          <t>
            <list style='numbers'>
              <t>Cache the expiration date of the certificate presented by the other party and any certificates on which that certificate depends (such as a root or intermediate certificate for a certification authority), and close the stream when any such certificate expires, with a stream error of &lt;reset/&gt; (<xref target='streams-error-conditions-reset'/>).<vspace blankLines='1'/></t>
              <t>Periodically query the Online Certificate Status Protocol <xref target='OCSP'/> responder listed in the Authority Information Access (AIA) extension of the certificate presented by the other party and any certificates on which that certificate depends (such as a root or intermediate certificate for a certification authority), and close the stream if any such certificate has been revoked, with a stream error of &lt;reset/&gt; (<xref target='streams-error-conditions-reset'/>).  It is RECOMMENDED to query the OSCP responder at or near the time communicated via the nextUpdate field received in the OCSP response or, if the nextUpdate field is not set, to query every 24 hours.</t>
            </list>
          </t>
          <t>After the stream is closed, the initiating entity from the closed stream will need to re-connect and the receiving entity will need to authenticate the initiating entity based on whatever certificate it presents during negotiation of the new stream.</t>
        </section>
        <section title="Use of Certificates in XMPP Extensions" anchor="security-certificates-validation-extensions">
          <t>Certificates MAY be used in extensions to XMPP for the purpose of application-layer encryption or authentication above the level of XML streams (e.g., for end-to-end encryption).  Such extensions will define their own certificate handling rules.  At a minimum, such extensions are encouraged to remain consistent with the rules defined in this specification, specifying additional rules only when necessary.</t>
        </section>
      </section>
    </section>
    <section title="Mandatory-to-Implement TLS and SASL Technologies" anchor="security-mti">
      <t>The following TLS ciphersuites and SASL mechanisms are mandatory-to-implement (naturally, implementations MAY support other ciphersuites and mechanisms as well).  For security considerations related to TLS ciphersuites, see <xref target='security-reuse-sasl'/> and <xref target='TLS'/>.  For security considerations related to SASL mechanisms, see <xref target='security-reuse-sasl'/>, <xref target='SASL'/>, and specifications for particular SASL mechanisms such as <xref target='SCRAM'/>, <xref target='DIGEST-MD5'/>, and <xref target='PLAIN'/>.</t>
      <section title="For Authentication Only" anchor="security-mti-auth">
        <t>For authentication only, servers and clients MUST support the SASL Salted Challenge Response mechanism <xref target='SCRAM'/>, in particular the SCRAM-SHA-1 and SCRAM-SHA-1-PLUS variants.</t>
        <t><list style='empty'><t>Security Warning: Even though it is possible to complete authentication only without confidentiality, it is RECOMMENDED for servers and clients to protect the stream with TLS before attempting authentication with SASL, both to help protect the information exchanged during SASL negotiation and to help prevent certain downgrade attacks as described under <xref target='security-reuse-sasl'/> and <xref target='security-reuse-tls'/>.  Even if TLS is used, implementations SHOULD also enforce channel binding as described under <xref target='security-reuse-sasl'/>.</t></list></t>
        <t><list style='empty'><t>Interoperability Note: The SCRAM-SHA-1 or SASL-SCRAM-SHA-1-PLUS variants of the SCRAM mechanism replace the SASL DIGEST-MD5 mechanism as XMPP's mandatory-to-implement password-based method for authentication only.  For backward-compatibility with existing deployed infrastructure, implementations are encouraged to continue supporting the DIGEST-MD5 mechanism as specified in <xref target='DIGEST-MD5'/>; however, there are known interoperability issues with DIGEST-MD5 that make it impractical in the long term.</t></list></t>
      </section>
      <section title="For Confidentiality Only" anchor="security-mti-conf">
        <t>For confidentiality only, servers MUST support TLS with the TLS_RSA_WITH_AES_128_CBC_SHA ciphersuite.</t>
        <t><list style='empty'><t>Security Warning: Because a connection with confidentiality only has weaker security properties than a connection with both confidentiality and authentication, it is RECOMMENDED for servers and clients to prefer connections with both qualities (e.g., by protecting the stream with TLS before attempting authentication with SASL).  In practice, confidentiality only is employed merely for server-to-server connections when the peer server does not present a trusted certificate and the servers use Server Dialback <xref target='XEP-0220'/> for weak identity verification, but TLS with confidentiality only is still desirable to protect the connection against casual eavesdropping.</t></list></t>
      </section>
      <section title="For Confidentiality and Authentication With Passwords" anchor="security-mti-bothpass">
        <t>For both confidentiality and authentication with passwords, servers and clients MUST implement TLS with the TLS_RSA_WITH_AES_128_CBC_SHA ciphersuite plus SASL SCRAM, in particular the SCRAM-SHA-1 and SCRAM-SHA-1-PLUS variants (with SCRAM-SHA1-PLUS being preferred, as described under <xref target='security-reuse-sasl'/>).</t>
        <t>As further explained in the following Security Warning, in certain circumstances a server MAY offer TLS with the TLS_RSA_WITH_AES_128_CBC_SHA ciphersuite plus SASL PLAIN when it is not possible to offer more secure alternatives; in addition, clients SHOULD implement PLAIN over TLS in order to maximize interoperability with servers that are not able to deploy more secure alternatives.</t>
        <t><list style='empty'><t>Security Warning: In practice, many servers offer, and many clients use, TLS plus SASL PLAIN.  The SCRAM-SHA-1 and especially SCRAM-SHA-1-PLUS variants of the SCRAM mechanism are strongly preferred over the PLAIN mechanism because of their superior security properties (including for SCRAM-SHA-1-PLUS the ability to enforce channel binding as described under <xref target='security-reuse-sasl'/>).  A client SHOULD treat TLS plus SASL PLAIN as a technology of last resort to be used only when interacting with a server that does not offer SCRAM (or other alternatives that are more secure than TLS plus SASL PLAIN), MUST prefer more secure mechanisms (e.g., EXTERNAL, SCRAM-SHA-1-PLUS, SCRAM-SHA-1, or the older DIGEST-MD5 mechanism) to the PLAIN mechanism, and MUST NOT use the PLAIN mechanism if the stream does not at a minimum have confidentiality and integrity protection via TLS with full certificate validation as described under <xref target='security-certificates-validation-server'/>.  A server MUST NOT offer SASL PLAIN if the confidentiality and integrity of the stream are not protected via TLS or an equivalent security layer.  A server SHOULD NOT offer TLS plus SASL PLAIN unless it is unable to offer some variant of SASL SCRAM (or other alternatives that are more secure than TLS plus SASL PLAIN), e.g., because the XMPP service depends for authentication purposes on a database or directory that is not under the control of the XMPP administrators, such as Pluggable Authentication Modules (PAM), an LDAP directory <xref target='LDAP'/>, or an Authentication, Authorization, and Accounting (AAA) key management protocol (for guidance, refer to <xref target='AAA'/>); however, offering TLS plus SASL PLAIN even when the server supports more secure alternatives might be appropriate if the server needs to enable interoperability with an installed base of clients that do not yet support SCRAM or other alternatives that are more secure than TLS plus SASL PLAIN.</t></list></t>
      </section>
      <section title="For Confidentiality and Authentication Without Passwords" anchor="security-mti-bothnopass">
        <t>For both confidentiality and authentication without passwords, servers MUST and clients SHOULD implement TLS with the TLS_RSA_WITH_AES_128_CBC_SHA ciphersuite plus the SASL EXTERNAL mechanism (see Appendix A of <xref target='SASL'/>) with PKIX certificates.</t>
      </section>
    </section>
    <section title="Technology Reuse" anchor="security-reuse">
      <section title="Use of Base 64 in SASL" anchor="security-reuse-base64">
        <t>Both the client and the server MUST verify any base 64 data received during <xref target='sasl'>SASL negotiation</xref>.  An implementation MUST reject (not ignore) any characters that are not explicitly allowed by the base 64 alphabet; this helps to guard against creation of a covert channel that could be used to "leak" information.</t>
        <t>An implementation MUST NOT break on invalid input and MUST reject any sequence of base 64 characters containing the pad ('=') character if that character is included as something other than the last character of the data (e.g., "=AAA" or "BBBB=CCC"); this helps to guard against buffer overflow attacks and other attacks on the implementation.</t>
        <t>While base 64 encoding visually hides otherwise easily recognized information (such as passwords), it does not provide any computational confidentiality.</t>
        <t>All uses of base 64 encoding MUST follow the definition in Section 4 of <xref target="BASE64"/> and padding bits MUST be set to zero.</t>
      </section>
      <section title="Use of DNS" anchor="security-reuse-dns">
        <t>XMPP typically relies on the Domain Name System (specifically <xref target='DNS-SRV'/> records) to resolve a fully-qualified domain name to an IP address before a client connects to a server or before a peer server connects to another server.  Before attempting to negotiate an XML stream, the initiating entity MUST NOT proceed until it has resolved the DNS domain name of the receiving entity as specified under <xref target='tcp'/> (although it is not necessary to resolve the DNS domain name before each connection attempt, because DNS resolution results can be temporarily cached in accordance with time-to-live values). However, in the absence of a secure DNS option (e.g., as provided by <xref target='DNSSEC'/>), a malicious attacker with access to the DNS server data, or able to cause spoofed answers to be cached in a recursive resolver, can potentially cause the initiating entity to connect to any XMPP server chosen by the attacker.  Deployment and validation of server certificates helps to prevent such attacks.</t>
      </section>
      <section title="Use of Hash Functions" anchor="security-reuse-hash">
        <t>XMPP itself does not directly mandate the use of any particular cryptographic hash function.  However, technologies on which XMPP depends (e.g., TLS and particular SASL mechanisms), as well as various XMPP extensions, might make use of cryptographic hash functions.  Those who implement XMPP technologies or who develop XMPP extensions are advised to closely monitor the state of the art regarding attacks against cryptographic hash functions in Internet protocols as they relate to XMPP.  For helpful guidance, refer to <xref target="HASHES"/>.</t>
      </section>
      <section title="Use of SASL" anchor="security-reuse-sasl">
        <t>Because the initiating entity chooses an acceptable SASL mechanism from the list presented by the receiving entity, the initiating entity depends on the receiving entity's list for authentication.  This dependency introduces the possibility of a downgrade attack if an attacker can gain control of the channel and therefore present a weak list of mechanisms.  To mitigate this attack, the parties SHOULD protect the channel using TLS before attempting SASL negotiation and either perform full certificate validation as described under <xref target='security-certificates-validation-server'/> or use a SASL mechanism that provides channel bindings, such as SCRAM-SHA-1-PLUS.  (Protecting the channel via TLS with full certificate validation can help to ensure the confidentiality and integrity of the information exchanged during SASL negotiation.)</t>
        <t>The SASL framework itself does not provide a method for binding SASL authentication to a security layer providing confidentiality and integrity protection that was negotiated at a lower layer (e.g., TLS).  Such a binding is known as a "channel binding" (see <xref target='CHANNEL'/>).  Some SASL mechanisms provide channel bindings, which in the case of XMPP would typically be a binding to TLS (see <xref target='CHANNEL-TLS'/>).  If a SASL mechanism provides a channel binding (e.g., this is true of <xref target='SCRAM'/>), then XMPP entities using that mechanism SHOULD prefer the channel binding variant (e.g., preferring "SCRAM-SHA-1-PLUS" over "SCRAM-SHA-1").  If a SASL mechanism does not provide a channel binding, then the mechanism cannot provide a way to verify that the source and destination end points to which the lower layer's security is bound are equivalent to the end points that SASL is authenticating; furthermore, if the end points are not identical, then the lower layer's security cannot be trusted to protect data transmitted between the SASL-authenticated entities.  In such a situation, a SASL security layer SHOULD be negotiated that effectively ignores the presence of the lower-layer security.</t>
        <t>Many deployed XMPP services authenticate client connections by means of passwords.  It is well known that most human users choose relatively weak passwords.  Although service provisioning is out of scope for this document, XMPP servers that allow password-based authentication SHOULD enforce minimal criteria for password strength to help prevent dictionary attacks.  Because all password-based authentication mechanisms are susceptible to password guessing attacks, XMPP servers MUST limit the number of retries allowed during SASL authentication, as described under <xref target='sasl-process-neg-failure'/>.</t>
        <t>Some SASL mechanisms (e.g., <xref target='ANONYMOUS'/>) do not provide strong peer entity authentication of the client to the server.  Service administrators are advised to enable such mechanisms with caution.  Best practices for the use of the SASL ANONYMOUS mechanism in XMPP are described in <xref target='XEP-0175'/>.</t>
      </section>
      <section title="Use of TLS" anchor="security-reuse-tls">
        <t>Implementations of TLS typically support multiple versions of the Transport Layer Security protocol as well as the older Secure Sockets Layer (SSL) protocol.  Because of known security vulnerabilities, XMPP servers and clients MUST NOT request, offer, or use SSL 2.0.  For further details, see Appendix E.2 of <xref target='TLS'/> along with <xref target='TLS-SSL2'/>.</t>
        <t>To prevent man-in-the-middle attacks, the TLS client (which might be an XMPP client or an XMPP server) MUST verify the certificate of the TLS server and MUST check its understanding of the server FQDN against the server's identity as presented in the TLS Certificate message as described under <xref target='security-certificates-validation-server'/> (for further details, see <xref target='TLS-CERTS'/>.</t>
        <t>Support for TLS renegotiation is strictly OPTIONAL.  However, implementations that support TLS renegotiation MUST implement and use the TLS Renegotiation Extension <xref target='TLS-NEG'/>.  Further details are provided under <xref target='tls-rules-renegotiation'/>.</t>
      </section>
      <section title="Use of UTF-8" anchor="security-reuse-utf8">
        <t>The use of UTF-8 makes it possible to transport non-ASCII characters, and thus enables character "spoofing" scenarios, in which a displayed value appears to be something other than it is.  Furthermore, there are known attack scenarios related to the decoding of UTF-8 data.  On both of these points, refer to <xref target='UTF-8'/> for more information.</t>
      </section>
      <section title="Use of XML" anchor="security-reuse-xml">
        <t>Because XMPP is an application profile of the Extensible Markup Language <xref target='XML'/>, many of the security considerations described in <xref target='XML-MEDIA'/> and <xref target='XML-GUIDE'/> also apply to XMPP.  Several aspects of XMPP mitigate the risks described there, such as the prohibitions specified under <xref target='xml-restrictions'/> and the lack of external references to style sheets or transformations, but these mitigating factors are by no means comprehensive.</t>
      </section>
    </section>
    <section title="Information Leaks" anchor="security-leaks">
      <section title="IP Addresses" anchor="security-leaks-ipaddress">
        <t>A client's IP address and method of access MUST NOT be made public by a server (e.g., as typically occurs in <xref target='IRC'/>).</t>
      </section>
      <section title="Presence Information" anchor="security-leaks-presence">
        <t>One of the core aspects of XMPP is presence: information about the network availability of an XMPP entity (i.e., whether the entity is currently online or offline).  A "presence leak" occurs when an entity's network availability is inadvertently and involuntarily revealed to a second entity that is not authorized to know the first entity's network availability.</t>
        <t>Although presence is discussed more fully in <xref target='XMPP-IM'/>, it is important to note that an XMPP server MUST NOT leak presence.  In particular at the core XMPP level, real-time addressing and network availability is associated with a specific connected resource; therefore, any disclosure of a connected resource's full JID comprises a presence leak.  To help prevent such a presence leak, a server MUST NOT return different stanza errors depending on whether a potential attacker sends XML stanzas to the entity's bare JID (&lt;localpart@domainpart&gt;) or full JID (&lt;localpart@domainpart/resourcepart&gt;).</t>
      </section>
    </section>
    <section title="Directory Harvesting" anchor="security-harvesting">
      <t>If a server generates an error stanza in response to receiving a stanza for a user account that does not exist, using the &lt;service-unavailable/&gt; stanza error condition (<xref target='stanzas-error-conditions-service-unavailable'/>) can help protect against directory harvesting attacks, since this is the same error condition that is returned if, for instance, the namespace of an IQ child element is not understood, or if "offline message storage" (<xref target='XEP-0160'/>) or message forwarding is not enabled for a domain.  However, subtle differences in the exact XML of error stanzas, as well as in the timing with which such errors are returned, can enable an attacker to determine the network presence of a user when more advanced blocking technologies are not used (see for instance <xref target='XEP-0016'/> and <xref target='XEP-0191'/>).  Therefore, a server that exercises a higher level of caution might not return any error at all in response to certain kinds of received stanzas, so that a non-existent user appears to behave like a user that has no interest in conversing with the sender.</t>
    </section>
    <section title="Denial of Service" anchor="security-dos">
      <t><xref target='DOS'/> defines denial of service as follows:</t>
      <t>
        <list style='hanging'>
          <t>A Denial-of-Service (DoS) attack is an attack in which one or more machines target a victim and attempt to prevent the victim from doing useful work. The victim can be a network server, client or router, a network link or an entire network, an individual Internet user or a company doing business using the Internet, an Internet Service Provider (ISP), country, or any combination of or variant on these.</t>
        </list>
      </t>
      <t>Some considerations discussed in this document help to prevent denial of service attacks (e.g., the mandate that a server MUST NOT process XML stanzas from clients that have not yet provided appropriate authentication credentials and MUST NOT process XML stanzas from peer servers whose identity it has not either authenticated via SASL or weakly verified via Server Dialback).</t>
      <t>In addition, <xref target='XEP-0205'/> provides a detailed discussion of potential denial of service attacks against XMPP systems along with best practices for preventing such attacks.  The recommendations include:</t>
      <t>
        <list style='numbers'>
          <t>A server implementation SHOULD enable a server administrator to limit the number of TCP connections that it will accept from a given IP address at any one time.  If an entity attempts to connect but the maximum number of TCP connections has been reached, the receiving server MUST NOT allow the new connection to proceed.<vspace blankLines='1'/></t>
          <t>A server implementation SHOULD enable a server administrator to limit the number of TCP connection attempts that it will accept from a given IP address in a given time period.  If an entity attempts to connect but the maximum number of connection attempts has been reached, the receiving server MUST NOT allow the new connection to proceed.<vspace blankLines='1'/></t>
          <t>A server implementation SHOULD enable a server administrator to limit the number of connected resources it will allow an account to bind at any one time.  If a client attempts to bind a resource but it has already reached the configured number of allowable resources, the receiving server MUST return a &lt;resource-constraint/&gt; stanza error (<xref target='stanzas-error-conditions-resource-constraint'/>).<vspace blankLines='1'/></t>
          <t>A server implementation SHOULD enable a server administrator to limit the size of stanzas it will accept from a connected client or peer server (where "size" is inclusive of all XML markup as defined in Section 2.4 of <xref target='XML'/>, from the opening "&lt;" character of the stanza to the closing "&gt;" character).  A deployed server's maximum stanza size MUST NOT be smaller than 10000 bytes, which reflects a reasonable compromise between the benefits of expressiveness for originating entities and the costs of stanza processing for servers.  A server implementation SHOULD NOT blindly set 10000 bytes as the value for all deployments but instead SHOULD enable server administrators to set their own limits.  If a connected resource or peer server sends a stanza that violates the upper limit, the receiving server MUST either return a &lt;policy-violation/&gt; stanza error (<xref target='stanzas-error-conditions-policy-violation'/>), thus allowing the sender to recover, or close the stream with a &lt;policy-violation/&gt; stream error (<xref target='streams-error-conditions-policy-violation'/>).<vspace blankLines='1'/></t>
          <t>A server implementation SHOULD enable a server administrator to limit the number of XML stanzas that a connected client is allowed to send to distinct recipients within a given time period.  If a connected client sends too many stanzas to distinct recipients in a given time period, the receiving server SHOULD NOT process the stanza and instead SHOULD return a &lt;policy-violation/&gt; stanza error (<xref target='stanzas-error-conditions-policy-violation'/>).<vspace blankLines='1'/></t>
          <t>A server implementation SHOULD enable a server administrator to limit the amount of bandwidth it will allow a connected client or peer server to use in a given time period.<vspace blankLines='1'/></t>
          <t>A server implementation MAY enable a server administrator to limit the types of stanzas (based on the extended content "payload") that it will allow a connected resource or peer server send over an active connection.  Such limits and restrictions are a matter of deployment policy.<vspace blankLines='1'/></t>
          <t>A server implementation MAY refuse to route or deliver any stanza that it considers to be abusive, with or without returning an error to the sender.</t>
        </list>
      </t>
      <t>For more detailed recommendations regarding denial of service attacks in XMPP systems, refer to <xref target='XEP-0205'/>.</t>
    </section>
    <section title="Firewalls" anchor="security-firewalls">
      <t>Although DNS SRV records can instruct connecting entities to use TCP ports other than 5222 (client-to-server) and 5269 (server-to-server), communication using XMPP typically occurs over those ports, which are registered with the IANA (see <xref target="iana"/>).  Use of these well-known ports allows administrators to easily enable or disable XMPP activity through existing and commonly-deployed firewalls.</t>
    </section>
    <section title="Interdomain Federation" anchor="security-federation">
      <t>The term "federation" is commonly used to describe communication between two servers.</t>
      <t>Because service provisioning is a matter of policy, it is OPTIONAL for any given server to support federation.  If a particular server enables federation, it SHOULD enable strong security as previously described to ensure both authentication and confidentiality; compliant implementations SHOULD support TLS and SASL for this purpose.</t>
      <t>Before RFC 3920 defined TLS plus SASL EXTERNAL with certificates for encryption and authentication of server-to-server streams, the only method for weak identity verification of a peer server was Server Dialback as defined in <xref target='XEP-0220'/>.  Even when <xref target='DNSSEC'/> is used, Server Dialback provides only weak identity verification and provides no confidentiality or integrity.  At the time of writing, Server Dialback is still the most widely-used technique for some level of assurance over server-to-server streams.  This reality introduces the possibility of a downgrade attack from TLS + SASL EXTERNAL to Server Dialback if an attacker can gain control of the channel and therefore convince the initiating server that the receiving server does not support TLS or does not have an appropriate certificate.  To help prevent this attack, the parties SHOULD protect the channel using TLS before proceeding, even if the presented certificates are self-signed or otherwise untrusted.</t>
    </section>
    <section title="Non-Repudiation" anchor="security-nonrepudiation">
      <t>Systems that provide both peer entity authentication and data integrity have the potential to enable an entity to prove to a third party that another entity intended to send particular data.  Although XMPP systems can provide both peer entity authentication and data integrity, XMPP was never designed to provide non-repudiation.</t>
    </section>
  </section>

  <section title="IANA Considerations" anchor="iana">
    <t>The following subsections update the registrations provided in <xref target='RFC3920'/>.  This section is to be interpreted according to <xref target='IANA-GUIDE'/>.</t>
    <section title="XML Namespace Name for TLS Data" anchor="iana-ns-tls">
      <t>A URN sub-namespace for STARTTLS negotiation data in the Extensible Messaging and Presence Protocol (XMPP) is defined as follows.  (This namespace name adheres to the format defined in <xref target="XML-REG"/>.)</t>
      <t><list style='hanging'>
        <t hangText='URI:'>urn:ietf:params:xml:ns:xmpp-tls</t>
        <t hangText='Specification:'>RFC &rfc.number;</t>
        <t hangText='Description:'>This is the XML namespace name for STARTTLS negotiation data in the Extensible Messaging and Presence Protocol (XMPP) as defined by RFC &rfc.number;.</t>
        <t hangText='Registrant Contact:'>IESG &lt;iesg@ietf.org&gt;</t>
      </list></t>
    </section>
    <section title="XML Namespace Name for SASL Data" anchor="iana-ns-sasl">
      <t>A URN sub-namespace for SASL negotiation data in the Extensible Messaging and Presence Protocol (XMPP) is defined as follows.  (This namespace name adheres to the format defined in <xref target="XML-REG"/>.)</t>
      <t><list style='hanging'>
        <t hangText='URI:'>urn:ietf:params:xml:ns:xmpp-sasl</t>
        <t hangText='Specification:'>RFC &rfc.number;</t>
        <t hangText='Description:'>This is the XML namespace name for SASL negotiation data in the Extensible Messaging and Presence Protocol (XMPP) as defined by RFC &rfc.number;.</t>
        <t hangText='Registrant Contact:'>IESG &lt;iesg@ietf.org&gt;</t>
      </list></t>
    </section>
    <section title="XML Namespace Name for Stream Errors" anchor="iana-ns-streams">
      <t>A URN sub-namespace for stream error data in the Extensible Messaging and Presence Protocol (XMPP) is defined as follows.  (This namespace name adheres to the format defined in <xref target="XML-REG"/>.)</t>
      <t><list style='hanging'>
        <t hangText='URI:'>urn:ietf:params:xml:ns:xmpp-streams</t>
        <t hangText='Specification:'>RFC &rfc.number;</t>
        <t hangText='Description:'>This is the XML namespace name for stream error data in the Extensible Messaging and Presence Protocol (XMPP) as defined by RFC &rfc.number;.</t>
        <t hangText='Registrant Contact:'>IESG &lt;iesg@ietf.org&gt;</t>
      </list></t>
    </section>
    <section title="XML Namespace Name for Resource Binding" anchor="iana-ns-bind">
      <t>A URN sub-namespace for resource binding in the Extensible Messaging and Presence Protocol (XMPP) is defined as follows.  (This namespace name adheres to the format defined in <xref target="XML-REG"/>.)</t>
      <t><list style='hanging'>
        <t hangText='URI:'>urn:ietf:params:xml:ns:xmpp-bind</t>
        <t hangText='Specification:'>RFC &rfc.number;</t>
        <t hangText='Description:'>This is the XML namespace name for resource binding in the Extensible Messaging and Presence Protocol (XMPP) as defined by RFC &rfc.number;.</t>
        <t hangText='Registrant Contact:'>IESG &lt;iesg@ietf.org&gt;</t>
      </list></t>
    </section>
    <section title="XML Namespace Name for Stanza Errors" anchor="iana-ns-stanzas">
      <t>A URN sub-namespace for stanza error data in the Extensible Messaging and Presence Protocol (XMPP) is defined as follows.  (This namespace name adheres to the format defined in <xref target="XML-REG"/>.)</t>
      <t><list style='hanging'>
        <t hangText='URI:'>urn:ietf:params:xml:ns:xmpp-stanzas</t>
        <t hangText='Specification:'>RFC &rfc.number;</t>
        <t hangText='Description:'>This is the XML namespace name for stanza error data in the Extensible Messaging and Presence Protocol (XMPP) as defined by RFC &rfc.number;.</t>
        <t hangText='Registrant Contact:'>IESG &lt;iesg@ietf.org&gt;</t>
      </list></t>
    </section>
    <section title="GSSAPI Service Name" anchor="iana-gssapi">
      <t>The IANA has registered "xmpp" as a <xref target="GSS-API"/> service name, as defined under <xref target="sasl-def"/>.</t>
    </section>
    <section title="Port Numbers and Service Names" anchor="iana-ports">
      <t>The IANA has registered "xmpp-client" and "xmpp-server" as keywords for <xref target="TCP"/> ports 5222 and 5269 respectively.  In accordance with <xref target='IANA-PORTS'/>, this document updates the existing registration, as follows.</t>
      <t>
        <list style='hanging'>
          <t hangText='Service Name:'>xmpp-client</t>
          <t hangText='Transport Protocol:'>TCP</t>
          <t hangText='Description:'>A service offering support for connections by XMPP client applications</t>
          <t hangText='Registrant:'>IETF XMPP Working Group</t>
          <t hangText='Contact:'>IESG &lt;iesg@ietf.org&gt;</t>
          <t hangText='Reference:'>RFC &rfc.number;</t>
          <t hangText='Port Number:'>5222</t>
        </list>
      </t>
      <t>
        <list style='hanging'>
          <t hangText='Service Name:'>xmpp-server</t>
          <t hangText='Transport Protocol:'>TCP</t>
          <t hangText='Description:'>A service offering support for connections by XMPP server applications</t>
          <t hangText='Registrant:'>IETF XMPP Working Group</t>
          <t hangText='Contact:'>IESG &lt;iesg@ietf.org&gt;</t>
          <t hangText='Reference:'>RFC &rfc.number;</t>
          <t hangText='Port Number:'>5269</t>
        </list>
      </t>
    </section>
  </section>

  <section title="Conformance Requirements" anchor="conformance">
    <t>This section describes a protocol feature set that summarizes the conformance requirements of this specification.  This feature set is appropriate for use in software certification, interoperability testing, and implementation reports.  For each feature, this section provides the following information:</t>
    <t>
      <list style='symbols'>
        <t>A human-readable name<vspace blankLines='1'/></t>
        <t>An informational description<vspace blankLines='1'/></t>
        <t>A reference to the particular section of this document that normatively defines the feature<vspace blankLines='1'/></t>
        <t>Whether the feature applies to the Client role, the Server role, or both (where "N/A" signifies that the feature is not applicable to the specified role)<vspace blankLines='1'/></t>
        <t>Whether the feature MUST or SHOULD be implemented, where the capitalized terms are to be understood as described in <xref target='KEYWORDS'/></t>
      </list>
    </t>
    <t>The feature set specified here attempts to adhere to the concepts and formats proposed by Larry Masinter within the IETF's NEWTRK Working Group in 2005, as captured in <xref target='INTEROP'/>.  Although this feature set is more detailed than called for by <xref target="REPORTS"/>, it provides a suitable basis for the generation of implementation reports to be submitted in support of advancing this specification from Proposed Standard to Draft Standard in accordance with <xref target="PROCESS"/>.</t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">bind-gen</t>
        <t hangText="Description:">Generate a random resource on demand.</t>
        <t hangText="Section:"><xref target='bind-servergen'/></t>
        <t hangText="Roles:">Client N/A, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">bind-mtn</t>
        <t hangText="Description:">Consider resource binding as mandatory-to-negotiate.</t>
        <t hangText="Section:"><xref target='bind-rules-mtn'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">bind-restart</t>
        <t hangText="Description:">Do not restart the stream after negotiation of resource binding.</t>
        <t hangText="Section:"><xref target='bind-rules-restart'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">bind-support</t>
        <t hangText="Description:">Support binding of client resources to an authenticated stream.</t>
        <t hangText="Section:"><xref target='bind'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">sasl-correlate</t>
        <t hangText="Description:">When authenticating a stream peer using SASL, correlate the authentication identifier resulting from SASL negotiation with the 'from' address (if any) of the stream header it received from the peer.</t>
        <t hangText="Section:"><xref target='sasl-process-neg-success'/></t>
        <t hangText="Roles:">Client SHOULD, Server SHOULD.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">sasl-errors</t>
        <t hangText="Description:">Support SASL errors during the negotiation process.</t>
        <t hangText="Section:"><xref target='sasl-errors'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">sasl-mtn</t>
        <t hangText="Description:">Consider SASL as mandatory-to-negotiate.</t>
        <t hangText="Section:"><xref target='sasl-rules-mtn'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">sasl-restart</t>
        <t hangText="Description:">Initiate or handle a stream restart after SASL negotiation.</t>
        <t hangText="Section:"><xref target='sasl-rules-restart'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">sasl-support</t>
        <t hangText="Description:">Support the Simple Authentication and Security Layer for stream authentication.</t>
        <t hangText="Section:"><xref target='sasl'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">security-mti-auth-scram</t>
        <t hangText="Description:">Support the SASL Salted Challenge Response (SCRAM) mechanism for authentication only (this implies support for both the SCRAM-SHA-1 and SCRAM-SHA-1-PLUS variants).</t>
        <t hangText="Section:"><xref target='security-mti'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">security-mti-both-external</t>
        <t hangText="Description:">Support TLS with SASL EXTERNAL for confidentiality and authentication.</t>
        <t hangText="Section:"><xref target='security-mti'/></t>
        <t hangText="Roles:">Client SHOULD, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">security-mti-both-plain</t>
        <t hangText="Description:">Support TLS using the TLS_RSA_WITH_AES_128_CBC_SHA ciphersuite plus the SASL PLAIN mechanism for confidentiality and authentication.</t>
        <t hangText="Section:"><xref target='security-mti'/></t>
        <t hangText="Roles:">Client SHOULD, Server MAY.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">security-mti-both-scram</t>
        <t hangText="Description:">Support TLS using the TLS_RSA_WITH_AES_128_CBC_SHA ciphersuite plus the SCRAM-SHA-1 and SCRAM-SHA-1-PLUS variants of the SASL SCRAM mechanism for confidentiality and authentication.</t>
        <t hangText="Section:"><xref target='security-mti'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">security-mti-confidentiality</t>
        <t hangText="Description:">Support TLS using the TLS_RSA_WITH_AES_128_CBC_SHA ciphersuite for confidentiality only.</t>
        <t hangText="Section:"><xref target='security-mti'/></t>
        <t hangText="Roles:">Client N/A, Server SHOULD.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stanza-attribute-from</t>
        <t hangText="Description:">Support the common 'from' attribute for all stanza kinds.</t>
        <t hangText="Section:"><xref target='stanzas-attributes-to'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stanza-attribute-from-stamp</t>
        <t hangText="Description:">Stamp or rewrite the 'from' address of all stanzas received from connected clients.</t>
        <t hangText="Section:"><xref target='stanzas-attributes-from-c2s'/></t>
        <t hangText="Roles:">Client N/A, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stanza-attribute-from-validate</t>
        <t hangText="Description:">Validate the 'from' address of all stanzas received from peer servers.</t>
        <t hangText="Section:"><xref target='stanzas-attributes-from-s2s'/></t>
        <t hangText="Roles:">Client N/A, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stanza-attribute-id</t>
        <t hangText="Description:">Support the common 'id' attribute for all stanza kinds.</t>
        <t hangText="Section:"><xref target='stanzas-attributes-id'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stanza-attribute-to</t>
        <t hangText="Description:">Support the common 'to' attribute for all stanza kinds.</t>
        <t hangText="Section:"><xref target='stanzas-attributes-to'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stanza-attribute-to-validate</t>
        <t hangText="Description:">Ensure that all stanzas received from peer servers include a 'to' address.</t>
        <t hangText="Section:"><xref target='stanzas-attributes-to'/></t>
        <t hangText="Roles:">Client N/A, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stanza-attribute-type</t>
        <t hangText="Description:">Support the common 'type' attribute for all stanza kinds.</t>
        <t hangText="Section:"><xref target='stanzas-attributes-type'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stanza-attribute-xmllang</t>
        <t hangText="Description:">Support the common 'xml:lang' attribute for all stanza kinds.</t>
        <t hangText="Section:"><xref target='stanzas-attributes-lang'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stanza-error</t>
        <t hangText="Description:">Generate and handle stanzas of type "error" for all stanza kinds.</t>
        <t hangText="Section:"><xref target='stanzas-error'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stanza-error-child</t>
        <t hangText="Description:">Ensure that stanzas of type "error" include an &lt;error/&gt; child element.</t>
        <t hangText="Section:"><xref target='stanzas-error'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stanza-error-id</t>
        <t hangText="Description:">Ensure that stanzas of type "error" preserve the 'id' provided in the triggering stanza.</t>
        <t hangText="Section:"><xref target='stanzas-error'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stanza-error-reply</t>
        <t hangText="Description:">Do not reply to a stanza of type "error" with another stanza of type "error".</t>
        <t hangText="Section:"><xref target='stanzas-error'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stanza-extension</t>
        <t hangText="Description:">Correctly process XML data qualified by an unsupported XML namespace, where "correctly process" means to ignore that portion of the stanza in the case of a message or presence stanza and return an error in the case of an IQ stanza (for the intended recipient), and to route or deliver the stanza (for a routing entity such as a server).</t>
        <t hangText="Section:"><xref target='stanzas-extended'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stanza-iq-child</t>
        <t hangText="Description:">Include exactly one child element in an &lt;iq/&gt; stanza of type "get" or "set", zero or one child elements in an &lt;iq/&gt; stanza of type "result", and one or two child elements in an &lt;iq/&gt; stanza of type "error".</t>
        <t hangText="Section:"><xref target='stanzas-semantics-iq'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stanza-iq-id</t>
        <t hangText="Description:">Ensure that all &lt;iq/&gt; stanzas include an 'id' attribute.</t>
        <t hangText="Section:"><xref target='stanzas-semantics-iq'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stanza-iq-reply</t>
        <t hangText="Description:">Reply to an &lt;iq/&gt; stanza of type "get" or "set" with an &lt;iq/&gt; stanza of type "result" or "error".</t>
        <t hangText="Section:"><xref target='stanzas-semantics-iq'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stanza-iq-type</t>
        <t hangText="Description:">Ensure that all &lt;iq/&gt; stanzas include a 'type' attribute whose value is "get", "set", "result", or "error".</t>
        <t hangText="Section:"><xref target='stanzas-semantics-iq'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stanza-kind-iq</t>
        <t hangText="Description:">Support the &lt;iq/&gt; stanza.</t>
        <t hangText="Section:"><xref target='stanzas-semantics-iq'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stanza-kind-message</t>
        <t hangText="Description:">Support the &lt;message/&gt; stanza.</t>
        <t hangText="Section:"><xref target='stanzas-semantics-message'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stanza-kind-presence</t>
        <t hangText="Description:">Support the &lt;presence/&gt; stanza.</t>
        <t hangText="Section:"><xref target='stanzas-semantics-presence'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stream-attribute-initial-from</t>
        <t hangText="Description:">Include a 'from' attribute in the initial stream header.</t>
        <t hangText="Section:"><xref target='streams-attr-from'/></t>
        <t hangText="Roles:">Client SHOULD, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stream-attribute-initial-lang</t>
        <t hangText="Description:">Include an 'xml:lang' attribute in the initial stream header.</t>
        <t hangText="Section:"><xref target='streams-attr-xmllang'/></t>
        <t hangText="Roles:">Client SHOULD, Server SHOULD.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stream-attribute-initial-to</t>
        <t hangText="Description:">Include a 'to' attribute in the initial stream header.</t>
        <t hangText="Section:"><xref target='streams-attr-to'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stream-attribute-response-from</t>
        <t hangText="Description:">Include a 'from' attribute in the response stream header.</t>
        <t hangText="Section:"><xref target='streams-attr-from'/></t>
        <t hangText="Roles:">Client N/A, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stream-attribute-response-id</t>
        <t hangText="Description:">Include an 'id' attribute in the response stream header.</t>
        <t hangText="Section:"><xref target='streams-attr-id'/></t>
        <t hangText="Roles:">Client N/A, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stream-attribute-response-id-unique</t>
        <t hangText="Description:">Ensure that the 'id' attribute in the response stream header is unique within the context of the receiving entity.</t>
        <t hangText="Section:"><xref target='streams-attr-id'/></t>
        <t hangText="Roles:">Client N/A, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stream-attribute-response-to</t>
        <t hangText="Description:">Include a 'to' attribute in the response stream header.</t>
        <t hangText="Section:"><xref target='streams-attr-to'/></t>
        <t hangText="Roles:">Client N/A, Server SHOULD.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stream-error-generate</t>
        <t hangText="Description:">Generate a stream error (followed by a closing stream tag and termination of the TCP connection) upon detecting a stream-related error condition.</t>
        <t hangText="Section:"><xref target='streams-error'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stream-fqdn-resolution</t>
        <t hangText="Description:">Resolve FQDNs before opening a TCP connection to the receiving entity.</t>
        <t hangText="Section:"><xref target='tcp-resolution'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stream-negotiation-complete</t>
        <t hangText="Description:">Do not consider the stream negotiation process to be complete until the receiving entity sends a stream features advertisement that is empty or that contains only voluntary-to-negotiate features.</t>
        <t hangText="Section:"><xref target='streams-negotiation-complete'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stream-negotiation-features</t>
        <t hangText="Description:">Send stream features after sending a response stream header.</t>
        <t hangText="Section:"><xref target='streams-negotiation-features'/></t>
        <t hangText="Roles:">Client N/A, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stream-negotiation-restart</t>
        <t hangText="Description:">Consider the previous stream to be replaced upon negotiation of a stream feature that necessitates a stream restart, and send or receive a new initial stream header after negotiation of such a stream feature.</t>
        <t hangText="Section:"><xref target='streams-negotiation-restart'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stream-reconnect</t>
        <t hangText="Description:">Reconnect with exponential backoff if a TCP connection is terminated unexpectedly.</t>
        <t hangText="Section:"><xref target='tcp-reconnect'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">stream-tcp-binding</t>
        <t hangText="Description:">Bind an XML stream to a TCP connection.</t>
        <t hangText="Section:"><xref target='tcp'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">tls-certs</t>
        <t hangText="Description:">Check the identity specified in a certificate that is presented during TLS negotiation.</t>
        <t hangText="Section:"><xref target='security-certificates-validation'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">tls-mtn</t>
        <t hangText="Description:">Consider TLS as mandatory-to-negotiate if STARTTLS is the only feature advertised or if the STARTTLS feature advertisement includes an empty &lt;required/&gt; element.</t>
        <t hangText="Section:"><xref target='tls-rules-mtn'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">tls-restart</t>
        <t hangText="Description:">Initiate or handle a stream restart after TLS negotiation.</t>
        <t hangText="Section:"><xref target='tls-rules-restart'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">tls-support</t>
        <t hangText="Description:">Support Transport Layer Security for stream encryption.</t>
        <t hangText="Section:"><xref target='tls'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">tls-correlate</t>
        <t hangText="Description:">When validating a certificate presented by a stream peer during TLS negotiation, correlate the validated identity with the 'from' address (if any) of the stream header it received from the peer.</t>
        <t hangText="Section:"><xref target='security-certificates-validation'/></t>
        <t hangText="Roles:">Client SHOULD, Server SHOULD.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">xml-namespace-content-client</t>
        <t hangText="Description:">Support 'jabber:client' as a content namespace.</t>
        <t hangText="Section:"><xref target='streams-ns-content'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">xml-namespace-content-server</t>
        <t hangText="Description:">Support 'jabber:server' as a content namespace.</t>
        <t hangText="Section:"><xref target='streams-ns-content'/></t>
        <t hangText="Roles:">Client N/A, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">xml-namespace-streams-declaration</t>
        <t hangText="Description:">Ensure that there is a namespace declaration for the 'http://etherx.jabber.org/streams' namespace.</t>
        <t hangText="Section:"><xref target='streams-ns-stream'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">xml-namespace-streams-prefix</t>
        <t hangText="Description:">Ensure that all elements qualified by the 'http://etherx.jabber.org/streams' namespace are prefixed by the prefix (if any) defined in the namespace declaration.</t>
        <t hangText="Section:"><xref target='streams-ns-stream'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">xml-restriction-comment</t>
        <t hangText="Description:">Do not generate or accept XML comments.</t>
        <t hangText="Section:"><xref target='xml-restrictions'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">xml-restriction-dtd</t>
        <t hangText="Description:">Do not generate or accept internal or external DTD subsets.</t>
        <t hangText="Section:"><xref target='xml-restrictions'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">xml-restriction-pi</t>
        <t hangText="Description:">Do not generate or accept XML processing instructions.</t>
        <t hangText="Section:"><xref target='xml-restrictions'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">xml-restriction-ref</t>
        <t hangText="Description:">Do not generate or accept internal or external entity references with the exception of the predefined entities.</t>
        <t hangText="Section:"><xref target='xml-restrictions'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">xml-wellformed-xml</t>
        <t hangText="Description:">Do not generate or accept data that is not XML-well-formed.</t>
        <t hangText="Section:"><xref target='xml-wellformed'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
    <t>
      <list style='hanging'>
        <t hangText="Feature:">xml-wellformed-ns</t>
        <t hangText="Description:">Do not generate or accept data that is not namespace-well-formed.</t>
        <t hangText="Section:"><xref target='xml-wellformed'/></t>
        <t hangText="Roles:">Client MUST, Server MUST.</t>
      </list>
    </t>
  </section>

  </middle>

  <back>

    <references title="Normative References">

<reference anchor="BASE64">
<front>
<title>The Base16, Base32, and Base64 Data Encodings</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'>
<organization /></author>
<date year='2006' month='October' />
<abstract>
<t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='4648' />
<format type='TXT' octets='35491' target='ftp://ftp.isi.edu/in-notes/rfc4648.txt' />
</reference>

<reference anchor='CHANNEL'>
<front>
<title>On the Use of Channel Bindings to Secure Channels</title>
<author initials='N.' surname='Williams' fullname='N. Williams'>
<organization /></author>
<date year='2007' month='November' />
<abstract>
<t>The concept of channel binding allows applications to establish that the two end-points of a secure channel at one network layer are the same as at a higher layer by binding authentication at the higher layer to the channel at the lower layer. This allows applications to delegate session protection to lower layers, which has various performance benefits.&lt;/t>&lt;t> This document discusses and formalizes the concept of channel binding to secure channels. [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5056' />
<format type='TXT' octets='49995' target='ftp://ftp.isi.edu/in-notes/rfc5056.txt' />
</reference>

<reference anchor='CHANNEL-TLS'>
<front>
<title>Channel Bindings for TLS</title>
<author initials='J.' surname='Altman' fullname='J. Altman'>
<organization /></author>
<author initials='N.' surname='Williams' fullname='N. Williams'>
<organization /></author>
<author initials='L.' surname='Zhu' fullname='L. Zhu'>
<organization /></author>
<date year='2010' month='July' />
<abstract>
<t>This document defines three channel binding types for Transport Layer Security (TLS), tls-unique, tls-server-end-point, and tls-unique-for-telnet, in accordance with RFC 5056 (On Channel Binding).&lt;/t>&lt;t> Note that based on implementation experience, this document changes the original definition of 'tls-unique' channel binding type in the channel binding type IANA registry. [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5929' />
<format type='TXT' octets='34061' target='http://www.rfc-editor.org/rfc/rfc5929.txt' />
</reference>

<reference anchor="CHARSETS">
<front>
<title abbrev='Charset Policy'>IETF Policy on Character Sets and Languages</title>
<author initials='H.T.' surname='Alvestrand' fullname='Harald Tveit Alvestrand'>
<organization>UNINETT</organization>
<address>
<postal>
<street>P.O.Box 6883 Elgeseter</street>
<street>N-7002 TRONDHEIM</street>
<country>NORWAY</country></postal>
<phone>+47 73 59 70 94</phone>
<email>Harald.T.Alvestrand@uninett.no</email></address></author>
<date month='January' year='1998' />
<area>Applications</area>
<keyword>Internet Engineering Task Force</keyword>
<keyword>character encoding</keyword></front>
<seriesInfo name='BCP' value='18' />
<seriesInfo name='RFC' value='2277' />
<format type='TXT' octets='16622' target='ftp://ftp.isi.edu/in-notes/rfc2277.txt' />
<format type='HTML' octets='26556' target='http://xml.resource.org/public/rfc/html/rfc2277.html' />
<format type='XML' octets='15544' target='http://xml.resource.org/public/rfc/xml/rfc2277.xml' />
</reference>

<reference anchor='DNS-CONCEPTS'>
<front>
<title abbrev='Domain Concepts and Facilities'>Domain names - concepts and facilities</title>
<author initials='P.' surname='Mockapetris' fullname='P. Mockapetris'>
<organization>Information Sciences Institute (ISI)</organization></author>
<date year='1987' day='1' month='November' /></front>
<seriesInfo name='STD' value='13' />
<seriesInfo name='RFC' value='1034' />
<format type='TXT' octets='129180' target='http://www.rfc-editor.org/rfc/rfc1034.txt' />
</reference>

<reference anchor='DNS-SRV'>
<front>
<title abbrev='DNS SRV RR'>A DNS RR for specifying the location of services (DNS SRV)</title>
<author initials='A.' surname='Gulbrandsen' fullname='Arnt Gulbrandsen'>
<organization>Troll Tech</organization>
<address>
<postal>
<street>Waldemar Thranes gate 98B</street>
<city>Oslo</city>
<region />
<code>N-0175</code>
<country>NO</country></postal>
<phone>+47 22 806390</phone>
<facsimile>+47 22 806380</facsimile>
<email>arnt@troll.no</email></address></author>
<author initials='P.' surname='Vixie' fullname='Paul Vixie'>
<organization>Internet Software Consortium</organization>
<address>
<postal>
<street>950 Charter Street</street>
<city>Redwood City</city>
<region>CA</region>
<code>94063</code>
<country>US</country></postal>
<phone>+1 650 779 7001</phone></address></author>
<author initials='L.' surname='Esibov' fullname='Levon Esibov'>
<organization>Microsoft Corporation</organization>
<address>
<postal>
<street>One Microsoft Way</street>
<city>Redmond</city>
<region>WA</region>
<code>98052</code>
<country>US</country></postal>
<email>levone@microsoft.com</email></address></author>
<date month='February' year='2000' />
<abstract>
<t>This document describes a DNS RR which specifies the location of the
   server(s) for a specific protocol and domain.</t></abstract></front>
<seriesInfo name='RFC' value='2782' />
<format type='TXT' octets='24013' target='ftp://ftp.isi.edu/in-notes/rfc2782.txt' />
</reference>

<reference anchor='IPv6-ADDR'>
<front>
<title>A Recommendation for IPv6 Address Text Representation</title>
<author initials='S.' surname='Kawamura' fullname='S. Kawamura'>
<organization /></author>
<author initials='M.' surname='Kawashima' fullname='M. Kawashima'>
<organization /></author>
<date year='2010' month='August' />
<abstract>
<t>As IPv6 deployment increases, there will be a dramatic increase in the need to use IPv6 addresses in text.  While the IPv6 address architecture in Section 2.2 of RFC 4291 describes a flexible model for text representation of an IPv6 address, this flexibility has been causing problems for operators, system engineers, and users.  This document defines a canonical textual representation format.  It does not define a format for internal storage, such as within an application or database.  It is expected that the canonical format will be followed by humans and systems when representing IPv6 addresses as text, but all implementations must accept and be able to handle any legitimate RFC 4291 format. [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5952' />
<format type='TXT' octets='26570' target='http://www.rfc-editor.org/rfc/rfc5952.txt' />
</reference>

<reference anchor="KEYWORDS">
<front>
<title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='Scott Bradner'>
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass.  Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>
<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date month='March' year='1997' />
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL
      NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;,  &quot;MAY&quot;, and
      &quot;OPTIONAL&quot; in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>
<seriesInfo name='BCP' value='14' />
<seriesInfo name='RFC' value='2119' />
<format type='TXT' octets='4723' target='ftp://ftp.isi.edu/in-notes/rfc2119.txt' />
<format type='HTML' octets='14486' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
<format type='XML' octets='5661' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
</reference>

<reference anchor='LANGMATCH'>
<front>
<title>Matching of Language Tags</title>
<author initials='A.' surname='Phillips' fullname='A. Phillips'>
<organization /></author>
<author initials='M.' surname='Davis' fullname='M. Davis'>
<organization /></author>
<date year='2006' month='September' />
<abstract>
<t>This document describes a syntax, called a "language-range", for specifying items in a user's list of language preferences.  It also describes different mechanisms for comparing and matching these to language tags.  Two kinds of matching mechanisms, filtering and lookup, are defined.  Filtering produces a (potentially empty) set of language tags, whereas lookup produces a single language tag.  Possible applications include language negotiation or content selection.  This document, in combination with RFC 4646, replaces RFC 3066, which replaced RFC 1766.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract></front>
<seriesInfo name='BCP' value='47' />
<seriesInfo name='RFC' value='4647' />
<format type='TXT' octets='45595' target='http://www.rfc-editor.org/rfc/rfc4647.txt' />
</reference>

<reference anchor="LANGTAGS">
<front>
<title>Tags for Identifying Languages</title>
<author initials='A.' surname='Phillips' fullname='A. Phillips'>
<organization /></author>
<author initials='M.' surname='Davis' fullname='M. Davis'>
<organization /></author>
<date year='2009' month='September' />
<abstract>
<t>This document describes the structure, content, construction, and semantics of language tags for use in cases where it is desirable to indicate the language used in an information object.  It also describes how to register values for use in language tags and the creation of user-defined extensions for private interchange.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract></front>
<seriesInfo name='BCP' value='47' />
<seriesInfo name='RFC' value='5646' />
<format type='TXT' octets='208592' target='ftp://ftp.isi.edu/in-notes/rfc5646.txt' />
</reference>

<reference anchor='OCSP'>
<front>
<title abbrev='PKIX OCSP'>X.509 Internet Public Key Infrastructure Online Certificate Status Protocol - OCSP</title>
<author initials='M.' surname='Myers' fullname='Michael Myers'>
<organization>VeriSign, Inc.</organization>
<address>
<postal>
<street>1350 Charleston Road</street>
<city>Mountain View</city>
<region>CA</region>
<code>94043</code>
<country>US</country></postal>
<email>mmyers@verisign.com</email></address></author>
<author initials='R.' surname='Ankney' fullname='Rich Ankney'>
<organization>CertCo, LLC</organization>
<address>
<postal>
<street>13506 King Charles Dr.</street>
<city>Chantilly</city>
<region>VA</region>
<code>20151</code>
<country>US</country></postal>
<email>rankney@erols.com</email></address></author>
<author initials='A.' surname='Malpani' fullname='Ambarish Malpani'>
<organization>ValiCert, Inc.</organization>
<address>
<postal>
<street>1215 Terra Bella Avenue</street>
<city>Mountain View</city>
<region>CA</region>
<code>94043</code>
<country>US</country></postal>
<phone>+1 650 567 5457</phone>
<email>ambarish@valicert.com</email></address></author>
<author initials='S.' surname='Galperin' fullname='Slava Galperin'>
<organization>My CFO, Inc.</organization>
<address>
<postal>
<street>1945 Charleston Road</street>
<city>Mountain View</city>
<region>CA</region>
<code>94043</code>
<country>US</country></postal>
<email>galperin@mycfo.com</email></address></author>
<author initials='C.' surname='Adams' fullname='Carlisle Adams'>
<organization>Entrust Technologies</organization>
<address>
<postal>
<street>750 Heron Road</street>
<street>Suite E08</street>
<city>Ottawa</city>
<region>Ontario</region>
<code>K1V 1A7</code>
<country>CA</country></postal>
<email>cadams@entrust.com</email></address></author>
<date year='1999' month='June' />
<abstract>
<t>This document specifies a protocol useful in determining the current
   status of a digital certificate without requiring CRLs. Additional
   mechanisms addressing PKIX operational requirements are specified in
   separate documents.</t>
<t>An overview of the protocol is provided in section 2. Functional
   requirements are specified in section 4. Details of the protocol are
   in section 5. We cover security issues with the protocol in section
   6. Appendix A defines OCSP over HTTP, appendix B accumulates ASN.1
   syntactic elements and appendix C specifies the mime types for the
   messages.</t>
<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document (in uppercase, as shown) are to be interpreted as described
   in.</t></abstract></front>
<seriesInfo name='RFC' value='2560' />
<format type='TXT' octets='43243' target='ftp://ftp.isi.edu/in-notes/rfc2560.txt' />
</reference>

<reference anchor='PKIX'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author initials='D.' surname='Cooper' fullname='D. Cooper'>
<organization /></author>
<author initials='S.' surname='Santesson' fullname='S. Santesson'>
<organization /></author>
<author initials='S.' surname='Farrell' fullname='S. Farrell'>
<organization /></author>
<author initials='S.' surname='Boeyen' fullname='S. Boeyen'>
<organization /></author>
<author initials='R.' surname='Housley' fullname='R. Housley'>
<organization /></author>
<author initials='W.' surname='Polk' fullname='W. Polk'>
<organization /></author>
<date year='2008' month='May' />
<abstract>
<t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices. [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5280' />
<format type='TXT' octets='352580' target='ftp://ftp.isi.edu/in-notes/rfc5280.txt' />
</reference>

<reference anchor='PKIX-ALGO'>
<front>
<title>Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1</title>
<author initials='J.' surname='Jonsson' fullname='J. Jonsson'>
<organization /></author>
<author initials='B.' surname='Kaliski' fullname='B. Kaliski'>
<organization /></author>
<date year='2003' month='February' />
<abstract>
<t>This memo represents a republication of PKCS #1 v2.1 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document is taken directly from the PKCS #1 v2.1 document, with certain corrections made during the publication process.  This memo provides information for the Internet community.</t></abstract></front>
<seriesInfo name='RFC' value='3447' />
<format type='TXT' octets='143173' target='ftp://ftp.isi.edu/in-notes/rfc3447.txt' />
</reference>

<reference anchor='PKIX-SRV'>
<front>
<title>Internet X.509 Public Key Infrastructure Subject Alternative Name for Expression of Service Name</title>
<author initials='S.' surname='Santesson' fullname='S. Santesson'>
<organization /></author>
<date year='2007' month='August' />
<abstract>
<t>This document defines a new name form for inclusion in the otherName field of an X.509 Subject Alternative Name extension that allows a certificate subject to be associated with the service name and domain name components of a DNS Service Resource Record. [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='4985' />
<format type='TXT' octets='17868' target='http://www.rfc-editor.org/rfc/rfc4985.txt' />
</reference>

<reference anchor='PLAIN'>
<front>
<title>The PLAIN Simple Authentication and Security Layer (SASL) Mechanism</title>
<author initials='K.' surname='Zeilenga' fullname='K. Zeilenga'>
<organization /></author>
<date year='2006' month='August' />
<abstract>
<t>This document defines a simple clear-text user/password Simple Authentication and Security Layer (SASL) mechanism called the PLAIN mechanism.  The PLAIN mechanism is intended to be used, in combination with data confidentiality services provided by a lower layer, in protocols that lack a simple password authentication command. [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='4616' />
<format type='TXT' octets='20270' target='ftp://ftp.isi.edu/in-notes/rfc4616.txt' />
</reference>

<reference anchor='RANDOM'>
<front>
<title>Randomness Requirements for Security</title>
<author initials='D.' surname='Eastlake' fullname='D. Eastlake'>
<organization /></author>
<author initials='J.' surname='Schiller' fullname='J. Schiller'>
<organization /></author>
<author initials='S.' surname='Crocker' fullname='S. Crocker'>
<organization /></author>
<date year='2005' month='June' />
<abstract>
<t>Security systems are built on strong cryptographic algorithms that foil pattern analysis attempts. However, the security of these systems is dependent on generating secret quantities for passwords, cryptographic keys, and similar quantities. The use of pseudo-random processes to generate secret quantities can result in pseudo-security. A sophisticated attacker may find it easier to reproduce the environment that produced the secret quantities and to search the resulting small set of possibilities than to locate the quantities in the whole of the potential number space.&lt;/t>&lt;t> Choosing random quantities to foil a resourceful and motivated adversary is surprisingly difficult. This document points out many pitfalls in using poor entropy sources or traditional pseudo-random number generation techniques for generating such quantities. It recommends the use of truly random hardware techniques and shows that the existing hardware on many systems can be used for this purpose. It provides suggestions to ameliorate the problem when a hardware solution is not available, and it gives examples of how large such quantities need to be for some applications. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract></front>
<seriesInfo name='BCP' value='106' />
<seriesInfo name='RFC' value='4086' />
<format type='TXT' octets='114321' target='ftp://ftp.isi.edu/in-notes/rfc4086.txt' />
</reference>

<reference anchor="SASL">
<front>
<title>Simple Authentication and Security Layer (SASL)</title>
<author initials='A.' surname='Melnikov' fullname='A. Melnikov'>
<organization /></author>
<author initials='K.' surname='Zeilenga' fullname='K. Zeilenga'>
<organization /></author>
<date year='2006' month='June' />
<abstract>
<t>&lt;p>The Simple Authentication and Security Layer (SASL) is a framework for providing authentication and data security services in connection-oriented protocols via replaceable mechanisms. It provides a structured interface between protocols and mechanisms. The resulting framework allows new protocols to reuse existing mechanisms and allows old protocols to make use of new mechanisms. The framework also provides a protocol for securing subsequent protocol exchanges within a data security layer.&lt;/p>&lt;p> This document describes how a SASL mechanism is structured, describes how protocols include support for SASL, and defines the protocol for carrying a data security layer over a connection. In addition, this document defines one SASL mechanism, the EXTERNAL mechanism.&lt;/p>&lt;p> This document obsoletes RFC 2222. [STANDARDS TRACK]&lt;/p></t></abstract></front>
<seriesInfo name='RFC' value='4422' />
<format type='TXT' octets='73206' target='ftp://ftp.isi.edu/in-notes/rfc4422.txt' />
</reference>

<reference anchor='SCRAM'>
<front>
<title>Salted Challenge Response Authentication Mechanism (SCRAM) SASL and GSS-API Mechanisms</title>
<author initials='C.' surname='Newman' fullname='C. Newman'>
<organization /></author>
<author initials='A.' surname='Menon-Sen' fullname='A. Menon-Sen'>
<organization /></author>
<author initials='A.' surname='Melnikov' fullname='A. Melnikov'>
<organization /></author>
<author initials='N.' surname='Williams' fullname='N. Williams'>
<organization /></author>
<date year='2010' month='July' />
<abstract>
<t>The secure authentication mechanism most widely deployed and used by Internet application protocols is the transmission of clear-text passwords over a channel protected by Transport Layer Security (TLS). There are some significant security concerns with that mechanism, which could be addressed by the use of a challenge response authentication mechanism protected by TLS. Unfortunately, the challenge response mechanisms presently on the standards track all fail to meet requirements necessary for widespread deployment, and have had success only in limited use.&lt;/t>&lt;t> This specification describes a family of Simple Authentication and Security Layer (SASL; RFC 4422) authentication mechanisms called the Salted Challenge Response Authentication Mechanism (SCRAM), which addresses the security concerns and meets the deployability requirements. When used in combination with TLS or an equivalent security layer, a mechanism from this family could improve the status quo for application protocol authentication and provide a suitable choice for a mandatory-to-implement mechanism for future application protocol standards. [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5802' />
<format type='TXT' octets='59049' target='http://www.rfc-editor.org/rfc/rfc5802.txt' />
</reference>

<reference anchor='STRONGSEC'>
<front>
<title>Strong Security Requirements for Internet Engineering Task Force Standard Protocols</title>
<author initials='J.' surname='Schiller' fullname='J. Schiller'>
<organization /></author>
<date year='2002' month='August' /></front>
<seriesInfo name='BCP' value='61' />
<seriesInfo name='RFC' value='3365' />
<format type='TXT' octets='16411' target='ftp://ftp.isi.edu/in-notes/rfc3365.txt' />
</reference>

<reference anchor='TCP'>
<front>
<title abbrev='Transmission Control Protocol'>Transmission Control Protocol</title>
<author initials='J.' surname='Postel' fullname='Jon Postel'>
<organization>University of Southern California (USC)/Information Sciences Institute</organization>
<address>
<postal>
<street>4676 Admiralty Way</street>
<city>Marina del Rey</city>
<region>CA</region>
<code>90291</code>
<country>US</country></postal></address></author>
<date year='1981' day='1' month='September' /></front>
<seriesInfo name='STD' value='7' />
<seriesInfo name='RFC' value='793' />
<format type='TXT' octets='172710' target='http://www.rfc-editor.org/rfc/rfc793.txt' />
</reference>

<reference anchor='TLS'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'>
<organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'>
<organization /></author>
<date year='2008' month='August' />
<abstract>
<t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery. [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5246' />
<format type='TXT' octets='222395' target='ftp://ftp.isi.edu/in-notes/rfc5246.txt' />
</reference>

<reference anchor='TLS-CERTS'>
<front>
<title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
<author initials='P' surname='Saint-Andre' fullname='Peter Saint-Andre'>
    <organization />
</author>
<author initials='J' surname='Hodges' fullname='Jeff Hodges'>
    <organization />
</author>
<date month='December' day='13' year='2010' />
<abstract><t>Many application technologies enable a secure connection between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS).  This document specifies best current practices for representing and verifying the identity of application services in such interactions.</t></abstract>
</front>
<seriesInfo name='Internet-Draft' value='draft-saintandre-tls-server-id-check-12' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-saintandre-tls-server-id-check-12.txt' />
</reference>

<reference anchor='TLS-NEG'>
<front>
<title>Transport Layer Security (TLS) Renegotiation Indication Extension</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'>
<organization /></author>
<author initials='M.' surname='Ray' fullname='M. Ray'>
<organization /></author>
<author initials='S.' surname='Dispensa' fullname='S. Dispensa'>
<organization /></author>
<author initials='N.' surname='Oskov' fullname='N. Oskov'>
<organization /></author>
<date year='2010' month='February' />
<abstract>
<t>Secure Socket Layer (SSL) and Transport Layer Security (TLS) renegotiation are vulnerable to an attack in which the attacker forms a TLS connection with the target server, injects content of his choice, and then splices in a new TLS connection from a client.  The server treats the client's initial TLS handshake as a renegotiation and thus believes that the initial data transmitted by the attacker is from the same entity as the subsequent client data.  This specification defines a TLS extension to cryptographically tie renegotiations to the TLS connections they are being performed over, thus preventing this attack. [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5746' />
<format type='TXT' octets='33790' target='http://www.rfc-editor.org/rfc/rfc5746.txt' />
</reference>

<reference anchor='TLS-SSL2'>
<front>
<title>Prohibiting SSL Version 2.0</title>
<author initials='T' surname='Polk' fullname='Tim Polk'>
    <organization />
</author>
<author initials='S' surname='Turner' fullname='Sean Turner'>
    <organization />
</author>
<date month='December' day='16' year='2010' />
<abstract><t>This document requires that when TLS clients and servers establish connections that they never negotiate the use of Secure Sockets Layer (SSL) version 2.0.  This document updates the backward compatibility sections found in the Transport Security Layer (TLS) Protocol, RFC 5246.</t></abstract>
</front>
<seriesInfo name='Internet-Draft' value='draft-ietf-tls-ssl2-must-not-04' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tls-ssl2-must-not-04.txt' />
</reference>

<reference anchor="UCS2">
  <front>
    <title>Information Technology - Universal Multiple-octet coded Character Set (UCS) - Amendment 2: UCS Transformation Format 8 (UTF-8)</title>
    <author>
      <organization>International Organization for Standardization</organization>
    </author>
    <date month="October" year="1996" />
  </front>
  <seriesInfo name="ISO" value="Standard 10646-1 Addendum 2" />
</reference>

<reference anchor="UNICODE" target="http://www.unicode.org/versions/Unicode6.0.0/">
  <front>
    <title>The Unicode Standard, Version 6.0</title>
    <author>
      <organization>The Unicode Consortium</organization>
    </author>
    <date year="2010" />
  </front>
</reference>

<reference anchor='UTF-8'>
<front>
<title>UTF-8, a transformation format of ISO 10646</title>
<author initials='F.' surname='Yergeau' fullname='F. Yergeau'>
<organization /></author>
<date month='November' year='2003' /></front>
<seriesInfo name='STD' value='63' />
<seriesInfo name='RFC' value='3629' />
<format type='TXT' octets='33856' target='ftp://ftp.isi.edu/in-notes/rfc3629.txt' />
</reference>

<reference anchor='URI'>
<front>
<title abbrev='URI Generic Syntax'>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
<organization abbrev='W3C/MIT'>World Wide Web Consortium</organization>
<address>
<postal>
<street>Massachusetts Institute of Technology</street>
<street>77 Massachusetts Avenue</street>
<city>Cambridge</city>
<region>MA</region>
<code>02139</code>
<country>USA</country></postal>
<phone>+1-617-253-5702</phone>
<facsimile>+1-617-258-5999</facsimile>
<email>timbl@w3.org</email>
<uri>http://www.w3.org/People/Berners-Lee/</uri></address></author>
<author initials='R.' surname='Fielding' fullname='Roy T. Fielding'>
<organization abbrev='Day Software'>Day Software</organization>
<address>
<postal>
<street>5251 California Ave., Suite 110</street>
<city>Irvine</city>
<region>CA</region>
<code>92617</code>
<country>USA</country></postal>
<phone>+1-949-679-2960</phone>
<facsimile>+1-949-679-2972</facsimile>
<email>fielding@gbiv.com</email>
<uri>http://roy.gbiv.com/</uri></address></author>
<author initials='L.' surname='Masinter' fullname='Larry Masinter'>
<organization abbrev='Adobe Systems'>Adobe Systems Incorporated</organization>
<address>
<postal>
<street>345 Park Ave</street>
<city>San Jose</city>
<region>CA</region>
<code>95110</code>
<country>USA</country></postal>
<phone>+1-408-536-3024</phone>
<email>LMM@acm.org</email>
<uri>http://larry.masinter.net/</uri></address></author>
<date year='2005' month='January' />
<area>Applications</area>
<keyword>uniform resource identifier</keyword>
<keyword>URI</keyword>
<keyword>URL</keyword>
<keyword>URN</keyword>
<keyword>WWW</keyword>
<keyword>resource</keyword>
<abstract>
<t>
A Uniform Resource Identifier (URI) is a compact sequence of characters
that identifies an abstract or physical resource.  This specification
defines the generic URI syntax and a process for resolving URI references
that might be in relative form, along with guidelines and security
considerations for the use of URIs on the Internet.
The URI syntax defines a grammar that is a superset of all valid URIs,
allowing an implementation to parse the common components of a URI
reference without knowing the scheme-specific requirements of every
possible identifier.  This specification does not define a generative
grammar for URIs; that task is performed by the individual
specifications of each URI scheme.
</t></abstract></front>
<seriesInfo name='STD' value='66' />
<seriesInfo name='RFC' value='3986' />
<format type='TXT' octets='141811' target='ftp://ftp.isi.edu/in-notes/rfc3986.txt' />
<format type='HTML' octets='200858' target='http://xml.resource.org/public/rfc/html/rfc3986.html' />
<format type='XML' octets='165759' target='http://xml.resource.org/public/rfc/xml/rfc3986.xml' />
</reference>

<reference anchor="X509">
<front>
<title>Information technology - Open Systems Interconnection - The Directory:
Public-key and attribute certificate frameworks</title>
<author>
<organization>International Telecommunications Union</organization>
</author>
<date month="March" year="2000" />
</front>
<seriesInfo name="ITU-T" value="Recommendation X.509" />
<seriesInfo name="ISO" value="Standard 9594-8" />
</reference>

<reference anchor='XML' target='http://www.w3.org/TR/2008/REC-xml-20081126'>
<front>
<title>Extensible Markup Language (XML) 1.0 (Fifth Edition)</title>
<author initials='E.' surname='Maler' fullname='Eve Maler'>
    <organization />
</author>
<author initials='F.' surname='Yergeau' fullname='François Yergeau'>
    <organization />
</author>
<author initials='C.' surname='Sperberg-McQueen' fullname='C. M. Sperberg-McQueen'>
    <organization />
</author>
<author initials='J.' surname='Paoli' fullname='Jean Paoli'>
    <organization />
</author>
<author initials='T.' surname='Bray' fullname='Tim Bray'>
    <organization />
</author>
<date month='November' day='26' year='2008' />
</front>
<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-xml-20081126' />
<format type='HTML' target='http://www.w3.org/TR/2008/REC-xml-20081126' />
</reference>

<reference anchor='XML-GUIDE'>
<front>
<title abbrev='XML Within IETF Protocols'>
     Guidelines for the Use of Extensible Markup Language (XML) within IETF Protocols</title>
<author initials='S.' surname='Hollenbeck' fullname='Scott Hollenbeck'>
<organization>VeriSign, Inc.</organization>
<address>
<postal>
<street>21345 Ridgetop Circle</street>
<city>Dulles</city>
<region>VA</region>
<code>20166-6503</code>
<country>US</country></postal>
<phone>+1 703 948 3257</phone>
<email>shollenbeck@verisign.com</email></address></author>
<author initials='M.' surname='Rose' fullname='Marshall T. Rose'>
<organization>Dover Beach Consulting, Inc.</organization>
<address>
<postal>
<street>POB 255268</street>
<city>Sacramento</city>
<region>CA</region>
<code>95865-5268</code>
<country>US</country></postal>
<phone>+1 916 483 8878</phone>
<email>mrose@dbc.mtview.ca.us</email></address></author>
<author initials='L.' surname='Masinter' fullname='Larry Masinter'>
<organization>Adobe Systems Incorporated</organization>
<address>
<postal>
<street>Mail Stop W14</street>
<street>345 Park Ave.</street>
<city>San Jose</city>
<region>CA</region>
<code>95110</code>
<country>US</country></postal>
<phone>+1 408 536 3024</phone>
<email>LMM@acm.org</email>
<uri>http://larry.masinter.net</uri></address></author>
<date year='2003' day='23' month='January' />
<area>General</area>
<keyword>BCP</keyword>
<keyword>Best Current Practice</keyword>
<keyword>XML</keyword>
<keyword>Extensible Markup Language</keyword>
<abstract>
<t>The Extensible Markup Language (XML) is a framework for structuring
      data. While it evolved from Standard Generalized Markup Language (SGML)
      -- a markup language primarily focused on structuring documents -- XML
      has evolved to be a widely-used mechanism for representing structured
      data.</t>
<t>There are a wide variety of Internet protocols being developed; many
      have need for a representation for structured data relevant to their
      application.  There has been much interest in the use of XML as a
      representation method.  This document describes basic XML concepts,
      analyzes various alternatives in the use of XML, and provides guidelines
      for the use of XML within IETF standards-track protocols.</t></abstract>
<note title='Conventions Used In This Document'>
<t>This document recommends, as policy, what specifications for Internet
      protocols -- and, in particular, IETF standards track protocol documents
      -- should include as normative language within them.  The capitalized
      keywords "SHOULD", "MUST", "REQUIRED", etc. are used in the sense of how
      they would be used within other documents with the meanings as specified
      in BCP 14, RFC 2119 .</t></note></front>
<seriesInfo name='BCP' value='70' />
<seriesInfo name='RFC' value='3470' />
<format type='TXT' octets='64252' target='ftp://ftp.isi.edu/in-notes/rfc3470.txt' />
<format type='HTML' octets='112914' target='http://xml.resource.org/public/rfc/html/rfc3470.html' />
<format type='XML' octets='107496' target='http://xml.resource.org/public/rfc/xml/rfc3470.xml' />
</reference>

<reference anchor='XML-MEDIA'>
<front>
<title>XML Media Types</title>
<author initials='M.' surname='Murata' fullname='M. Murata'>
<organization /></author>
<author initials='S.' surname='St. Laurent' fullname='S. St. Laurent'>
<organization /></author>
<author initials='D.' surname='Kohn' fullname='D. Kohn'>
<organization /></author>
<date year='2001' month='January' />
<abstract>
<t>This document standardizes five new media types -- text/xml, application/xml, text/xml-external-parsed-entity, application/xml- external-parsed-entity, and application/xml-dtd -- for use in exchanging network entities that are related to the Extensible Markup Language (XML).  This document also standardizes a convention (using the suffix '+xml') for naming media types outside of these five types when those media types represent XML MIME (Multipurpose Internet Mail Extensions) entities. [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='3023' />
<format type='TXT' octets='86011' target='ftp://ftp.isi.edu/in-notes/rfc3023.txt' />
</reference>

<reference anchor="XML-NAMES" target='http://www.w3.org/TR/2009/REC-xml-names-20091208'>
<front>
<title>Namespaces in XML 1.0 (Third Edition)</title>
<author initials='H.' surname='Thompson' fullname='Henry S. Thompson'>
    <organization />
</author>
<author initials='D.' surname='Hollander' fullname='Dave Hollander'>
    <organization />
</author>
<author initials='A.' surname='Layman' fullname='Andrew Layman'>
    <organization />
</author>
<author initials='T.' surname='Bray' fullname='Tim Bray'>
    <organization />
</author>
<author initials='R.' surname='Tobin' fullname='Richard Tobin'>
    <organization />
</author>
<date month='December' day='8' year='2009' />
</front>
<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-xml-names-20091208' />
<format type='HTML' target='http://www.w3.org/TR/2009/REC-xml-names-20091208' />
</reference>

<reference anchor="XMPP-ADDR">
<front>
<title>Extensible Messaging and Presence Protocol (XMPP): Address Format</title>
<author initials='P' surname='Saint-Andre' fullname='Peter Saint-Andre'>
    <organization />
</author>
<date month='December' day='10' year='2010' />
<abstract><t>This document defines the address format for the Extensible Messaging and Presence Protocol (XMPP), including support for non-ASCII characters.  This document updates RFC 3920.</t></abstract>
</front>
<seriesInfo name='Internet-Draft' value='draft-ietf-xmpp-address-08' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-xmpp-address-08.txt' />
</reference>

<reference anchor="XMPP-IM">
<front>
<title>Extensible Messaging and Presence Protocol (XMPP): Instant Messaging and Presence</title>
<author initials='P' surname='Saint-Andre' fullname='Peter Saint-Andre'>
    <organization />
</author>
<date month='November' day='16' year='2010' />
<abstract><t>This document describes extensions to the core features of the Extensible Messaging and Presence Protocol (XMPP) that provide basic instant messaging (IM) and presence functionality in conformance with RFC 2779. This document obseletes RFC 3921.</t></abstract>
</front>
<seriesInfo name='Internet-Draft' value='draft-ietf-xmpp-3921bis-17' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-xmpp-3921bis-17.txt' />
</reference>

    </references>

    <references title="Informative References">

<reference anchor='AAA'>
<front>
<title>Guidance for Authentication, Authorization, and Accounting (AAA) Key Management</title>
<author initials='R.' surname='Housley' fullname='R. Housley'>
<organization /></author>
<author initials='B.' surname='Aboba' fullname='B. Aboba'>
<organization /></author>
<date year='2007' month='July' />
<abstract>
<t>This document provides guidance to designers of Authentication, Authorization, and Accounting (AAA) key management protocols.  The guidance is also useful to designers of systems and solutions that include AAA key management protocols.  Given the complexity and difficulty in designing secure, long-lasting key management algorithms and protocols by experts in the field, it is almost certainly inappropriate for IETF working groups without deep expertise in the area to be designing their own key management algorithms and protocols based on Authentication, Authorization, and Accounting (AAA) protocols.  The guidelines in this document apply to documents requesting publication as IETF RFCs.  Further, these guidelines will be useful to other standards development organizations (SDOs) that specify AAA key management.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract></front>
<seriesInfo name='BCP' value='132' />
<seriesInfo name='RFC' value='4962' />
<format type='TXT' octets='54927' target='http://www.rfc-editor.org/rfc/rfc4962.txt' />
</reference>

<reference anchor='ABNF'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker'>
<organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'>
<organization /></author>
<date year='2008' month='January' />
<abstract>
<t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF.  It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications. [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='STD' value='68' />
<seriesInfo name='RFC' value='5234' />
<format type='TXT' octets='26359' target='ftp://ftp.isi.edu/in-notes/rfc5234.txt' />
</reference>

<reference anchor='ACAP'>
<front>
<title abbrev='ACAP'>ACAP -- Application Configuration Access Protocol</title>
<author initials='C.' surname='Newman' fullname='Chris Newman'>
<organization>Innosoft International, Inc.</organization>
<address>
<postal>
<street>1050 Lakes Drive</street>
<city>West Covina</city>
<region>CA</region>
<code>91790</code>
<country>US</country></postal>
<email>chris.newman@innosoft.com</email></address></author>
<author initials='J.G.' surname='Myers' fullname='John Gardiner Myers'>
<organization>Netscape Communications</organization>
<address>
<postal>
<street>501 East Middlefield Road</street>
<street>Mail Stop MV-029</street>
<city>Mountain View</city>
<region>CA</region>
<code>94043</code>
<country>US</country></postal>
<email>jgmyers@netscape.com</email></address></author>
<date month='November' year='1997' />
<abstract>
<t>The Application Configuration Access Protocol (ACAP) is designed to support remote storage and access of program option, configuration and preference information.  The data store model is designed to allow a client relatively simple access to interesting data, to allow new information to be easily added without server re-configuration, and to promote the use of both standardized data and custom or proprietary data.  Key features include "inheritance" which can be used to manage default values for configuration settings and access control lists which allow interesting personal information to be shared and group information to be restricted.</t></abstract></front>
<seriesInfo name='RFC' value='2244' />
<format type='TXT' octets='154610' target='ftp://ftp.isi.edu/in-notes/rfc2244.txt' />
</reference>

<reference anchor='ANONYMOUS'>
<front>
<title>Anonymous Simple Authentication and Security Layer (SASL) Mechanism</title>
<author initials='K.' surname='Zeilenga' fullname='K. Zeilenga'>
<organization /></author>
<date year='2006' month='June' />
<abstract>
<t>On the Internet, it is common practice to permit anonymous access to various services. Traditionally, this has been done with a plain-text password mechanism using "anonymous" as the user name and using optional trace information, such as an email address, as the password. As plain-text login commands are not permitted in new IETF protocols, a new way to provide anonymous login is needed within the context of the Simple Authentication and Security Layer (SASL) framework. [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='4505' />
<format type='TXT' octets='16599' target='ftp://ftp.isi.edu/in-notes/rfc4505.txt' />
</reference>

<reference anchor="ASN.1">
<front>
<title>Recommendation X.208: Specification of Abstract Syntax Notation One (ASN.1)
</title>
<author>
<organization>CCITT</organization>
</author>
<date year="1988" />
</front>
</reference>

<reference anchor='DIGEST-MD5'>
<front>
<title>Using Digest Authentication as a SASL Mechanism</title>
<author initials='P.' surname='Leach' fullname='P. Leach'>
<organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'>
<organization /></author>
<date month='May' year='2000' /></front>
<seriesInfo name='RFC' value='2831' />
<format type='TXT' octets='58124' target='ftp://ftp.isi.edu/in-notes/rfc2831.txt' />
</reference>

<reference anchor='DNSSEC'>
<front>
<title>DNS Security Introduction and Requirements</title>
<author initials='R.' surname='Arends' fullname='R. Arends'>
<organization /></author>
<author initials='R.' surname='Austein' fullname='R. Austein'>
<organization /></author>
<author initials='M.' surname='Larson' fullname='M. Larson'>
<organization /></author>
<author initials='D.' surname='Massey' fullname='D. Massey'>
<organization /></author>
<author initials='S.' surname='Rose' fullname='S. Rose'>
<organization /></author>
<date year='2005' month='March' />
<abstract>
<t>The Domain Name System Security Extensions (DNSSEC) add data origin authentication and data integrity to the Domain Name System. This document introduces these extensions and describes their capabilities and limitations. This document also discusses the services that the DNS security extensions do and do not provide. Last, this document describes the interrelationships between the documents that collectively describe DNSSEC. [STANDARDS TRACK] </t></abstract></front>
<seriesInfo name='RFC' value='4033' />
<format type='TXT' octets='52445' target='ftp://ftp.isi.edu/in-notes/rfc4033.txt' />
</reference>

<reference anchor='DNS-TXT'>
<front>
<title abbrev='Storing Arbitrary Attributes in DNS'>Using the Domain Name System To Store Arbitrary String Attributes</title>
<author initials='R.' surname='Rosenbaum' fullname='Rich Rosenbaum'>
<organization>Digital Equipment Corporation</organization>
<address>
<postal>
<street>550 King Street</street>
<street>LKG2-2/Z7</street>
<city>Littleton</city>
<region>MA</region>
<code>01460-1289</code>
<country>US</country></postal>
<phone>+1 508 486 5922</phone>
<email>rosenbaum@lkg.dec.com</email></address></author>
<date year='1993' month='May' />
<abstract>
<t>While the Domain Name System (DNS),is generally used to store predefined types of information (e.g., addresses of hosts), it is possible to use it to store information that has not been previously classified.</t>
<t>This paper describes a simple means to associate arbitrary string information (ASCII text) with attributes that have not been defined by the DNS.  It uses DNS TXT resource records to store the information.  It requires no change to current DNS implementations.</t></abstract></front>
<seriesInfo name='RFC' value='1464' />
<format type='TXT' octets='7953' target='ftp://ftp.isi.edu/in-notes/rfc1464.txt' />
</reference>

<reference anchor='DOS'>
<front>
<title>Internet Denial-of-Service Considerations</title>
<author initials='M.' surname='Handley' fullname='M. Handley'>
<organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'>
<organization /></author>
<author>
<organization>IAB</organization></author>
<date year='2006' month='December' />
<abstract>
<t>This document provides an overview of possible avenues for denial-of-service (DoS) attack on Internet systems. The aim is to encourage protocol designers and network engineers towards designs that are more robust. We discuss partial solutions that reduce the effectiveness of attacks, and how some solutions might inadvertently open up alternative vulnerabilities. This memo provides information for the Internet community.</t></abstract></front>
<seriesInfo name='RFC' value='4732' />
<format type='TXT' octets='91844' target='ftp://ftp.isi.edu/in-notes/rfc4732.txt' />
</reference>

<reference anchor='E2E-REQS'>
<front>
<title>Requirements for End-to-End Encryption in the Extensible Messaging and Presence Protocol (XMPP)</title>
<author initials='P' surname='Saint-Andre' fullname='Peter Saint-Andre'>
    <organization />
</author>
<date month='March' day='8' year='2010' />
<abstract><t>This document describes requirements for end-to-end encryption in the Extensible Messaging and Presence Protocol (XMPP).</t></abstract>
</front>
<seriesInfo name='Internet-Draft' value='draft-ietf-xmpp-e2e-requirements-01' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-xmpp-e2e-requirements-01.txt' />
</reference>

<reference anchor='EMAIL-ARCH'>
<front>
<title>Internet Mail Architecture</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker'>
<organization /></author>
<date year='2009' month='July' />
<abstract>
<t>Over its thirty-five-year history, Internet Mail has changed significantly in scale and complexity, as it has become a global infrastructure service.  These changes have been evolutionary, rather than revolutionary, reflecting a strong desire to preserve both its installed base and its usefulness.  To collaborate productively on this large and complex system, all participants need to work from a common view of it and use a common language to describe its components and the interactions among them.  But the many differences in perspective currently make it difficult to know exactly what another participant means.  To serve as the necessary common frame of reference, this document describes the enhanced Internet Mail architecture, reflecting the current service.  This memo provides information for the Internet community.</t></abstract></front>
<seriesInfo name='RFC' value='5598' />
<format type='TXT' octets='115741' target='ftp://ftp.isi.edu/in-notes/rfc5598.txt' />
</reference>

<reference anchor='ETHERNET'>
<front>
<title>Information technology - Telecommunications and information exchange between systems - Local and metropolitan area networks - Specific requirements - Part 3: Carrier sense multiple access with collision detection (CSMA/CD) access method and physical layer specifications"</title>
<author>
<organization></organization>
</author>
<date month="September" year="1998" />
</front>
<seriesInfo name="IEEE" value="Standard 802.3" />
</reference>

<reference anchor='GSS-API'>
<front>
<title abbrev='GSS-API'>Generic Security Service Application Program Interface Version 2, Update 1</title>
<author initials='J.' surname='Linn' fullname='John Linn'>
<organization>RSA Laboratories</organization>
<address>
<postal>
<street>20 Crosby Drive</street>
<city>Bedford</city>
<region>MA</region>
<code>01730</code>
<country>US</country></postal>
<phone>+1 781 687 7817</phone>
<email>jlinn@rsasecurity.com</email></address></author>
<date year='2000' month='January' />
<abstract>
<t>The Generic Security Service Application Program Interface (GSS-API), Version 2, as defined in, provides security services to callers in a generic fashion, supportable with a range of underlying mechanisms and technologies and hence allowing source-level portability of applications to different environments. This specification defines GSS-API services and primitives at a level independent of underlying mechanism and programming language environment, and is to be complemented by other, related specifications:</t>
<t>documents defining specific parameter bindings for particular language environments</t>
<t>documents defining token formats, protocols, and procedures to be implemented in order to realize GSS-API services atop particular security mechanisms</t>
<t>This memo obsoletesmaking specific, incremental changes in response to implementation experience and liaison requests. It is intended, therefore, that this memo or a successor version thereto will become the basis for subsequent progression of the GSS-API specification on the standards track.</t></abstract></front>
<seriesInfo name='RFC' value='2743' />
<format type='TXT' octets='229418' target='ftp://ftp.isi.edu/in-notes/rfc2743.txt' />
</reference>

<reference anchor='HASHES'>
<front>
<title>Attacks on Cryptographic Hashes in Internet Protocols</title>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'>
<organization /></author>
<author initials='B.' surname='Schneier' fullname='B. Schneier'>
<organization /></author>
<date year='2005' month='November' />
<abstract>
<t>Recent announcements of better-than-expected collision attacks in popular hash algorithms have caused some people to question whether common Internet protocols need to be changed, and if so, how.  This document summarizes the use of hashes in many protocols, discusses how the collision attacks affect and do not affect the protocols, shows how to thwart known attacks on digital certificates, and discusses future directions for protocol designers.  This memo provides information for the Internet community.</t></abstract></front>
<seriesInfo name='RFC' value='4270' />
<format type='TXT' octets='26641' target='ftp://ftp.isi.edu/in-notes/rfc4270.txt' />
</reference>

<reference anchor='HTTP'>
<front>
<title abbrev='HTTP/1.1'>Hypertext Transfer Protocol -- HTTP/1.1</title>
<author initials='R.' surname='Fielding' fullname='Roy T.  Fielding'>
<organization abbrev='UC Irvine'>Department of Information and Computer Science</organization>
<address>
<postal>
<street>University of California, Irvine</street>
<city>Irvine</city>
<region>CA</region>
<code>92697-3425</code></postal>
<facsimile>+1(949)824-1715</facsimile>
<email>fielding@ics.uci.edu</email></address></author>
<author initials='J.' surname='Gettys' fullname='James Gettys'>
<organization abbrev='Compaq/W3C'>World Wide Web Consortium</organization>
<address>
<postal>
<street>MIT Laboratory for Computer Science, NE43-356</street>
<street>545 Technology Square</street>
<city>Cambridge</city>
<region>MA</region>
<code>02139</code></postal>
<facsimile>+1(617)258-8682</facsimile>
<email>jg@w3.org</email></address></author>
<author initials='J.' surname='Mogul' fullname='Jeffrey C.  Mogul'>
<organization abbrev='Compaq'>Compaq Computer Corporation</organization>
<address>
<postal>
<street>Western Research Laboratory</street>
<street>250 University Avenue</street>
<city>Palo Alto</city>
<region>CA</region>
<code>94305</code></postal>
<email>mogul@wrl.dec.com</email></address></author>
<author initials='H.' surname='Frystyk' fullname='Henrik Frystyk Nielsen'>
<organization abbrev='MIT/LCS'>World Wide Web Consortium</organization>
<address>
<postal>
<street>MIT Laboratory for Computer Science, NE43-356</street>
<street>545 Technology Square</street>
<city>Cambridge</city>
<region>MA</region>
<code>02139</code></postal>
<facsimile>+1(617)258-8682</facsimile>
<email>frystyk@w3.org</email></address></author>
<author initials='L.' surname='Masinter' fullname='Larry Masinter'>
<organization abbrev='Xerox'>Xerox Corporation</organization>
<address>
<postal>
<street>MIT Laboratory for Computer Science, NE43-356</street>
<street>3333 Coyote Hill Road</street>
<city>Palo Alto</city>
<region>CA</region>
<code>94034</code></postal>
<email>masinter@parc.xerox.com</email></address></author>
<author initials='P.' surname='Leach' fullname='Paul J.  Leach'>
<organization abbrev='Microsoft'>Microsoft Corporation</organization>
<address>
<postal>
<street>1 Microsoft Way</street>
<city>Redmond</city>
<region>WA</region>
<code>98052</code></postal>
<email>paulle@microsoft.com</email></address></author>
<author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
<organization abbrev='MIT/LCS'>World Wide Web Consortium</organization>
<address>
<postal>
<street>MIT Laboratory for Computer Science, NE43-356</street>
<street>545 Technology Square</street>
<city>Cambridge</city>
<region>MA</region>
<code>02139</code></postal>
<facsimile>+1(617)258-8682</facsimile>
<email>timbl@w3.org</email></address></author>
<date month='June' year='1999' />
<abstract>
<t>
   The Hypertext Transfer Protocol (HTTP) is an application-level
   protocol for distributed, collaborative, hypermedia information
   systems.  It is a generic, stateless, protocol which can be used for
   many tasks beyond its use for hypertext, such as name servers and
   distributed object management systems, through extension of its
   request methods, error codes and headers .  A feature of HTTP is
   the typing and negotiation of data representation, allowing systems
   to be built independently of the data being transferred.
</t>
<t>
   HTTP has been in use by the World-Wide Web global information
   initiative since 1990.  This specification defines the protocol
   referred to as "HTTP/1.1", and is an update to RFC 2068 .
</t></abstract></front>
<seriesInfo name='RFC' value='2616' />
<format type='TXT' octets='422317' target='ftp://ftp.isi.edu/in-notes/rfc2616.txt' />
<format type='PS' octets='5529857' target='ftp://ftp.isi.edu/in-notes/rfc2616.ps' />
<format type='PDF' octets='550558' target='ftp://ftp.isi.edu/in-notes/rfc2616.pdf' />
<format type='HTML' octets='498891' target='http://xml.resource.org/public/rfc/html/rfc2616.html' />
<format type='XML' octets='471630' target='http://xml.resource.org/public/rfc/xml/rfc2616.xml' />
</reference>

<reference anchor='IANA-GUIDE'>
<front>
<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
<author initials='T.' surname='Narten' fullname='T. Narten'>
<organization /></author>
<author initials='H.' surname='Alvestrand' fullname='H. Alvestrand'>
<organization /></author>
<date year='2008' month='May' />
<abstract>
<t>Many protocols make use of identifiers consisting of constants and other well-known values. Even after a protocol has been defined and deployment has begun, new values may need to be assigned (e.g., for a new option type in DHCP, or a new encryption or authentication transform for IPsec). To ensure that such quantities have consistent values and interpretations across all implementations, their assignment must be administered by a central authority. For IETF protocols, that role is provided by the Internet Assigned Numbers Authority (IANA).&lt;/t>&lt;t> In order for IANA to manage a given namespace prudently, it needs guidelines describing the conditions under which new values can be assigned or when modifications to existing values can be made. If IANA is expected to play a role in the management of a namespace, IANA must be given clear and concise instructions describing that role. This document discusses issues that should be considered in formulating a policy for assigning values to a namespace and provides guidelines for authors on the specific text that must be included in documents that place demands on IANA.&lt;/t>&lt;t> This document obsoletes RFC 2434. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract></front>
<seriesInfo name='BCP' value='26' />
<seriesInfo name='RFC' value='5226' />
<format type='TXT' octets='66160' target='ftp://ftp.isi.edu/in-notes/rfc5226.txt' />
</reference>

<reference anchor='IANA-PORTS'>
<front>
<title>Internet Assigned Numbers Authority (IANA) Procedures for the Management of the Transport Protocol Port Number and Service Name Registry</title>
<author initials='M' surname='Cotton' fullname='Michelle Cotton'>
    <organization />
</author>
<author initials='L' surname='Eggert' fullname='Lars Eggert'>
    <organization />
</author>
<author initials='J' surname='Touch' fullname='Joseph Touch'>
    <organization />
</author>
<author initials='M' surname='Westerlund' fullname='Magnus Westerlund'>
    <organization />
</author>
<author initials='S' surname='Cheshire' fullname='Stuart Cheshire'>
    <organization />
</author>
<date month='December' day='2' year='2010' />
<abstract><t>This document defines the procedures that the Internet Assigned Numbers Authority (IANA) uses when handling registration and other requests related to the transport protocol port number and service name registry.  It also discusses the rationale and principles behind these procedures and how they facilitate the long-term sustainability of the registry.  This document updates IANA's procedures by obsoleting Sections 8 and 9.1 of the IANA allocation guidelines [RFC2780], it updates the IANA allocation procedures for UDP-Lite [RFC3828], DCCP [RFC4340] and SCTP [RFC4960], it updates the DNS SRV specification [RFC2782] to clarify what a service name is and how it is registered.</t></abstract>
</front>
<seriesInfo name='Internet-Draft' value='draft-ietf-tsvwg-iana-ports-09' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tsvwg-iana-ports-09.txt' />
</reference>

<reference anchor='IMAP'>
<front>
<title>INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4rev1</title>
<author initials='M.' surname='Crispin' fullname='M. Crispin'>
<organization /></author>
<date year='2003' month='March' /></front>
<seriesInfo name='RFC' value='3501' />
<format type='TXT' octets='227640' target='ftp://ftp.isi.edu/in-notes/rfc3501.txt' />
</reference>

<reference anchor="IMP-REQS">
<front>
<title abbrev='Instant Messaging/Presence Protocol'>Instant Messaging / Presence Protocol Requirements</title>
<author initials='M.' surname='Day' fullname='Mark Day'>
<organization>SightPath, Inc.</organization>
<address>
<postal>
<street>135 Beaver Street</street>
<city>Waltham</city>
<region>MA</region>
<code>02452</code>
<country>US</country></postal>
<email>mday@alum.mit.edu</email></address></author>
<author initials='S.' surname='Aggarwal' fullname='Sonu Aggarwal'>
<organization>Microsoft Corporation</organization>
<address>
<postal>
<street>One Microsoft Way</street>
<city>Redmond</city>
<region>WA</region>
<code>98052</code>
<country>US</country></postal>
<email>sonuag@microsoft.com</email></address></author>
<author initials='J.' surname='Vincent' fullname='Jesse Vincent'>
<organization>Into Networks, Inc.</organization>
<address>
<postal>
<street>150 Cambridgepark Drive</street>
<city>Cambridge</city>
<region>MA</region>
<code>02140</code>
<country>US</country></postal>
<email>jesse@intonet.com</email></address></author>
<date month='February' year='2000' />
<abstract>
<t>Presence and Instant Messaging have recently emerged as a new medium of communications over the Internet.  Presence is a means for finding, retrieving, and subscribing to changes in the presence information (e.g.  "online" or "offline") of other users.  Instant messaging is a means for sending small, simple messages that are delivered immediately to online users.</t>
<t>Applications of presence and instant messaging currently use independent, non-standard and non-interoperable protocols developed by various vendors.  The goal of the Instant Messaging and Presence Protocol (IMPP) Working Group is to define a standard protocol so that independently developed applications of instant messaging and/or   presence can interoperate across the Internet.  This document defines a minimal set of requirements that IMPP must meet.</t></abstract></front>
<seriesInfo name='RFC' value='2779' />
<format type='TXT' octets='47420' target='ftp://ftp.isi.edu/in-notes/rfc2779.txt' />
</reference>

<reference anchor='INTEROP'>
<front>
<title>Formalizing IETF Interoperability Reporting</title>
<author initials='L' surname='Masinter' fullname='Larry Masinter'>
    <organization />
</author>
<date month='October' day='12' year='2005' />
<abstract><t>This document suggests another way of reforming IETF standards process by formalizing the mechanism for interoperability reporting, as a way of facilitating standards development. It establishes two kinds of reports: a 'Protocol Feature Set', which lays out the set of features from IETF specifications that constitute a protocol, and a 'Protocol Implementation Report', which is submitted by an individual or group to report on implementation and interoperability testing.</t></abstract>
</front>
<seriesInfo name='Internet-Draft' value='draft-ietf-newtrk-interop-reports-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-newtrk-interop-reports-00.txt' />
</reference>

<reference anchor='IRC'>
<front>
<title>Internet Relay Chat: Architecture</title>
<author initials='C.' surname='Kalt' fullname='C. Kalt'>
<organization /></author>
<date year='2000' month='April' />
<abstract>
<t>&lt;p>This document is an update describing the architecture of the current IRC protocol and the role of its different components. Other documents describe in detail the protocol used between the various components defined here. This memo provides information for the Internet community. &lt;/p></t></abstract></front>
<seriesInfo name='RFC' value='2810' />
<format type='TXT' octets='19087' target='ftp://ftp.isi.edu/in-notes/rfc2810.txt' />
</reference>

<reference anchor='IRI'>
<front>
<title>Internationalized Resource Identifiers (IRIs)</title>
<author initials='M.' surname='Duerst' fullname='M. Duerst'>
<organization /></author>
<author initials='M.' surname='Suignard' fullname='M. Suignard'>
<organization /></author>
<date year='2005' month='January' />
<abstract>
<t>&lt;p>This document defines a new protocol element, the Internationalized Resource Identifier (IRI), as a complement of the Uniform Resource Identifier (URI). An IRI is a sequence of characters from the Universal Character Set (Unicode/ISO 10646). A mapping from IRIs to URIs is defined, which means that IRIs can be used instead of URIs, where appropriate, to identify resources.&lt;/p>&lt;p> The approach of defining a new protocol element was chosen instead of extending or changing the definition of URIs. This was done in order to allow a clear distinction and to avoid incompatibilities with existing software. Guidelines are provided for the use and deployment of IRIs in various protocols, formats, and software components that currently deal with URIs.&lt;/p></t></abstract></front>
<seriesInfo name='RFC' value='3987' />
<format type='TXT' octets='111190' target='ftp://ftp.isi.edu/in-notes/rfc3987.txt' />
</reference>

<reference anchor='LDAP'>
<front>
<title>Lightweight Directory Access Protocol (LDAP): Technical Specification Road Map</title>
<author initials='K.' surname='Zeilenga' fullname='K. Zeilenga'>
<organization /></author>
<date year='2006' month='June' />
<abstract>
<t>The Lightweight Directory Access Protocol (LDAP) is an Internet protocol for accessing distributed directory services that act in accordance with X.500 data and service models.  This document provides a road map of the LDAP Technical Specification. [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='4510' />
<format type='TXT' octets='12354' target='http://www.rfc-editor.org/rfc/rfc4510.txt' />
</reference>

<reference anchor="LINKLOCAL">
<front>
<title>Dynamic Configuration of IPv4 Link-Local Addresses</title>
<author initials='S.' surname='Cheshire' fullname='S. Cheshire'>
<organization /></author>
<author initials='B.' surname='Aboba' fullname='B. Aboba'>
<organization /></author>
<author initials='E.' surname='Guttman' fullname='E. Guttman'>
<organization /></author>
<date year='2005' day='23' month='May' /></front>
<seriesInfo name='RFC' value='3927' />
<format type='TXT' octets='83102' target='ftp://ftp.isi.edu/in-notes/rfc3927.txt' />
</reference>

<reference anchor='MAILBOXES'>
<front>
<title abbrev='Mailbox Names'>MAILBOX NAMES FOR COMMON SERVICES, ROLES AND FUNCTIONS</title>
<author initials='D.' surname='Crocker' fullname='Dave Crocker'>
<organization>Internet Mail Consortium</organization>
<address>
<postal>
<street>127 Segre Ave.</street>
<street>Santa Cruz</street>
<country>CA</country></postal>
<phone>+1 408 246 8253</phone>
<email>dcrocker@imc.org</email></address></author>
<date year='1997' month='May' />
<area>Applications</area>
<keyword>mail</keyword>
<abstract>
<t>
   This specification enumerates and describes Internet mail addresses
   (mailbox name @ host reference) to be used when contacting personnel
   at an organization.  Mailbox names are provided for both operations
   and business functions.  Additional mailbox names and aliases are not
   prohibited, but organizations which support email exchanges with the
   Internet are encouraged to support AT LEAST each mailbox name for
   which the associated function exists within the organization.
</t></abstract></front>
<seriesInfo name='RFC' value='2142' />
<format type='TXT' octets='12195' target='ftp://ftp.isi.edu/in-notes/rfc2142.txt' />
<format type='HTML' octets='29012' target='http://xml.resource.org/public/rfc/html/rfc2142.html' />
<format type='XML' octets='16576' target='http://xml.resource.org/public/rfc/xml/rfc2142.xml' />
</reference>

<reference anchor='POP3'>
<front>
<title abbrev='POP3'>Post Office Protocol - Version 3</title>
<author initials='J.G.' surname='Myers' fullname='John G.  Myers'>
<organization>Carnegie-Mellon University</organization>
<address>
<postal>
<street>5000 Forbes Ave</street>
<city>Pittsburgh</city>
<region>PA</region>
<code>15213</code>
<country>US</country></postal>
<email>jgm+@cmu.edu</email></address></author>
<author initials='M.T.' surname='Rose' fullname='Marshall T.  Rose'>
<organization>Dover Beach Consulting, Inc.</organization>
<address>
<postal>
<street>420 Whisman Court</street>
<city>Mountain View</city>
<region>CA</region>
<code>94043-2186</code>
<country>US</country></postal>
<email>mrose@dbc.mtview.ca.us</email></address></author>
<date month='May' year='1996' /></front>
<seriesInfo name='STD' value='53' />
<seriesInfo name='RFC' value='1939' />
<format type='TXT' octets='47018' target='ftp://ftp.isi.edu/in-notes/rfc1939.txt' />
</reference>

<reference anchor='PROCESS'>
<front>
<title abbrev='Internet Standards Process'>The Internet Standards Process -- Revision 3</title>
<author initials='S.' surname='Bradner' fullname='Scott O. Bradner'>
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass. Ave.</street>
<city>Cambridge</city>
<region>MA</region>
<code>02138</code>
<country>US</country></postal>
<phone>+1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date year='1996' month='October' />
<abstract>
<t>This memo documents the process used by the Internet community for the standardization of protocols and procedures.  It defines the stages in the standardization process, the requirements for moving a document between stages and the types of documents used during this process.  It also addresses the intellectual property rights and copyright issues associated with the standards process.</t></abstract></front>
<seriesInfo name='BCP' value='9' />
<seriesInfo name='RFC' value='2026' />
<format type='TXT' octets='86731' target='ftp://ftp.isi.edu/in-notes/rfc2026.txt' />
</reference>

<reference anchor='REPORTS'>
<front>
<title>Guidance on Interoperation and Implementation Reports for Advancement to Draft Standard</title>
<author initials='L.' surname='Dusseault' fullname='L. Dusseault'>
<organization /></author>
<author initials='R.' surname='Sparks' fullname='R. Sparks'>
<organization /></author>
<date year='2009' month='September' />
<abstract>
<t>Advancing a protocol to Draft Standard requires documentation of the interoperation and implementation of the protocol.  Historic reports have varied widely in form and level of content and there is little guidance available to new report preparers.  This document updates the existing processes and provides more detail on what is appropriate in an interoperability and implementation report.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract></front>
<seriesInfo name='BCP' value='9' />
<seriesInfo name='RFC' value='5657' />
<format type='TXT' octets='29327' target='ftp://ftp.isi.edu/in-notes/rfc5657.txt' />
</reference>

<reference anchor="REST">
<front>
<title>Architectural Styles and the Design of Network-based Software Architectures</title>
<author initials="R." surname="Fielding" fullname="Roy Thomas Fielding">
  <organization>University of California, Irvine</organization>
</author>
</front>
<seriesInfo name="" value="2000" />
<format type="PDF" target="http://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf"/>
</reference> 

<reference anchor='RFC3920'>
<front>
<title abbrev='XMPP Core'>Extensible Messaging and Presence Protocol (XMPP): Core</title>
<author initials='P.' surname='Saint-Andre' fullname='Peter Saint-Andre' role='editor'>
<organization>Jabber Software Foundation</organization>
<address>
<email>stpeter@jabber.org</email></address></author>
<date year='2004' month='October' />
<area>Applications</area>
<workgroup>XMPP Working Group</workgroup>
<keyword>RFC</keyword>
<keyword>Request for Comments</keyword>
<keyword>I-D</keyword>
<keyword>Internet-Draft</keyword>
<keyword>XMPP</keyword>
<keyword>Extensible Messaging and Presence Protocol</keyword>
<keyword>Jabber</keyword>
<keyword>IM</keyword>
<keyword>Instant Messaging</keyword>
<keyword>Presence</keyword>
<keyword>XML</keyword>
<keyword>Extensible Markup Language</keyword>
<abstract>
<t>This memo defines the core features of the Extensible Messaging and Presence Protocol (XMPP), a protocol for streaming Extensible Markup Language (XML) elements in order to exchange structured information in close to real time between any two network endpoints.  While XMPP provides a generalized, extensible framework for exchanging XML data, it is used mainly for the purpose of building instant messaging and presence applications that meet the requirements of RFC 2779.</t></abstract></front>
<seriesInfo name='RFC' value='3920' />
<format type='TXT' octets='194313' target='ftp://ftp.isi.edu/in-notes/rfc3920.txt' />
<format type='HTML' octets='279912' target='http://xml.resource.org/public/rfc/html/rfc3920.html' />
<format type='XML' octets='234610' target='http://xml.resource.org/public/rfc/xml/rfc3920.xml' />
</reference>

<reference anchor='RFC3921'>
<front>
<title abbrev='XMPP IM'>Extensible Messaging and Presence Protocol (XMPP): Instant Messaging and Presence</title>
<author initials='P.' surname='Saint-Andre' fullname='Peter Saint-Andre' role='editor'>
<organization>Jabber Software Foundation</organization>
<address>
<email>stpeter@jabber.org</email></address></author>
<date year='2004' month='October' />
<area>Applications</area>
<workgroup>XMPP Working Group</workgroup>
<keyword>RFC</keyword>
<keyword>Request for Comments</keyword>
<keyword>I-D</keyword>
<keyword>Internet-Draft</keyword>
<keyword>XMPP</keyword>
<keyword>Extensible Messaging and Presence Protocol</keyword>
<keyword>Jabber</keyword>
<keyword>IM</keyword>
<keyword>Instant Messaging</keyword>
<keyword>Presence</keyword>
<keyword>XML</keyword>
<keyword>Extensible Markup Language</keyword>
<abstract>
<t>This memo describes extensions to and applications of the core features of the Extensible Messaging and Presence Protocol (XMPP) that provide the basic instant messaging (IM) and presence functionality defined in RFC 2779.</t></abstract></front>
<seriesInfo name='RFC' value='3921' />
<format type='TXT' octets='217527' target='ftp://ftp.isi.edu/in-notes/rfc3921.txt' />
<format type='HTML' octets='274538' target='http://xml.resource.org/public/rfc/html/rfc3921.html' />
<format type='XML' octets='234468' target='http://xml.resource.org/public/rfc/xml/rfc3921.xml' />
</reference>

<reference anchor='SASLPREP'>
<front>
<title>SASLprep: Stringprep Profile for User Names and Passwords</title>
<author initials='K.' surname='Zeilenga' fullname='K. Zeilenga'>
<organization /></author>
<date year='2005' month='February' />
<abstract>
<t>This document describes how to prepare Unicode strings representing user names and passwords for comparison.  The document defines the "SASLprep" profile of the "stringprep" algorithm to be used for both user names and passwords.  This profile is intended to be used by Simple Authentication and Security Layer (SASL) mechanisms (such as PLAIN, CRAM-MD5, and DIGEST-MD5), as well as other protocols exchanging simple user names and/or passwords. [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='4013' />
<format type='TXT' octets='13051' target='http://www.rfc-editor.org/rfc/rfc4013.txt' />
</reference>

<reference anchor='SEC-TERMS'>
<front>
<title>Internet Security Glossary, Version 2</title>
<author initials='R.' surname='Shirey' fullname='R. Shirey'>
<organization /></author>
<date year='2007' month='August' />
<abstract>
<t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security.  The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026).  The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t></abstract></front>
<seriesInfo name='RFC' value='4949' />
<format type='TXT' octets='867626' target='ftp://ftp.isi.edu/in-notes/rfc4949.txt' />
</reference>

<reference anchor='SMTP'>
<front>
<title>Simple Mail Transfer Protocol</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'>
<organization /></author>
<date year='2008' month='October' />
<abstract>
<t>This document is a specification of the basic protocol for Internet electronic mail transport.  It consolidates, updates, and clarifies several previous documents, making all or parts of most of them obsolete.  It covers the SMTP extension mechanisms and best practices for the contemporary Internet, but does not provide details about particular extensions.  Although SMTP was designed as a mail transport and delivery protocol, this specification also contains information that is important to its use as a "mail submission" protocol for "split-UA" (User Agent) mail reading systems and mobile environments. [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5321' />
<format type='TXT' octets='225929' target='ftp://ftp.isi.edu/in-notes/rfc5321.txt' />
</reference>

<reference anchor='SEC-GUIDE'>
<front>
<title>Guidelines for Writing RFC Text on Security Considerations</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'>
<organization /></author>
<author initials='B.' surname='Korver' fullname='B. Korver'>
<organization /></author>
<date year='2003' month='July' />
<abstract>
<t>All RFCs are required to have a Security Considerations section.  Historically, such sections have been relatively weak.  This document provides guidelines to RFC authors on how to write a good Security Considerations section.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract></front>
<seriesInfo name='BCP' value='72' />
<seriesInfo name='RFC' value='3552' />
<format type='TXT' octets='110393' target='ftp://ftp.isi.edu/in-notes/rfc3552.txt' />
</reference>

<reference anchor='TLS-EXT'>
<front>
<title>Transport Layer Security (TLS) Extensions: Extension Definitions</title>
<author initials='D' surname='3rd' fullname='Donald Eastlake 3rd'>
    <organization />
</author>
<date month='September' day='20' year='2010' />
<abstract><t>This document provides specifications for existing TLS extensions. It is a companion document for RFC 5246, "The Transport Layer Security (TLS) Protocol Version 1.2". The extensions specified are server_name, max_fragment_length, client_certificate_url, trusted_ca_keys, truncated_hmac, and status_request.</t></abstract>
</front>
<seriesInfo name='Internet-Draft' value='draft-ietf-tls-rfc4366-bis-12' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tls-rfc4366-bis-12.txt' />
</reference>

<reference anchor='TLS-RESUME'>
<front>
<title>Transport Layer Security (TLS) Session Resumption without Server-Side State</title>
<author initials='J.' surname='Salowey' fullname='J. Salowey'>
<organization /></author>
<author initials='H.' surname='Zhou' fullname='H. Zhou'>
<organization /></author>
<author initials='P.' surname='Eronen' fullname='P. Eronen'>
<organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'>
<organization /></author>
<date year='2008' month='January' />
<abstract>
<t>This document describes a mechanism that enables the Transport Layer Security (TLS) server to resume sessions and avoid keeping per-client session state.  The TLS server encapsulates the session state into a ticket and forwards it to the client.  The client can subsequently resume a session using the obtained ticket.  This document obsoletes RFC 4507. [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5077' />
<format type='TXT' octets='41989' target='http://www.rfc-editor.org/rfc/rfc5077.txt' />
</reference>

<reference anchor='URN-OID'>
<front>
<title>A URN Namespace of Object Identifiers</title>
<author initials='M.' surname='Mealling' fullname='M. Mealling'>
<organization /></author>
<date year='2001' month='February' />
<abstract>
<t>&lt;p>This document describes a Uniform Resource Name (URN) namespace that contains Object Identifiers (OIDs). This memo provides information for the Internet community. &lt;/p></t></abstract></front>
<seriesInfo name='RFC' value='3061' />
<format type='TXT' octets='8387' target='ftp://ftp.isi.edu/in-notes/rfc3061.txt' />
</reference>

<reference anchor="USINGTLS">
<front>
<title>Using TLS with IMAP, POP3 and ACAP</title>
<author initials='C.' surname='Newman' fullname='Chris Newman'>
<organization>Innosoft International, Inc.</organization>
<address>
<postal>
<street>1050 Lakes Drive</street>
<city>West Covina</city>
<region>CA</region>
<code>91790</code>
<country>US</country></postal>
<email>chris.newman@innosoft.com</email></address></author>
<date month='June' year='1999' /></front>
<seriesInfo name='RFC' value='2595' />
<format type='TXT' octets='32440' target='ftp://ftp.isi.edu/in-notes/rfc2595.txt' />
</reference>

<reference anchor='UUID'>
<front>
<title abbrev='UUID URN'>A Universally Unique IDentifier (UUID) URN Namespace</title>
<author initials='P.' surname='Leach' fullname='Paul J. Leach'>
<organization>Microsoft</organization>
<address>
<postal>
<street>1 Microsoft Way</street>
<city>Redmond</city>
<region>WA</region>
<code>98052</code>
<country>US</country></postal>
<phone>+1 425-882-8080</phone>
<email>paulle@microsoft.com</email></address></author>
<author initials='M.' surname='Mealling' fullname='Michael Mealling'>
<organization>Refactored Networks, LLC</organization>
<address>
<postal>
<street>1635 Old Hwy 41</street>
<street>Suite 112, Box 138</street>
<city>Kennesaw</city>
<region>GA</region>
<code>30152</code>
<country>US</country></postal>
<phone>+1-678-581-9656</phone>
<email>michael@refactored-networks.com</email>
<uri>http://www.refactored-networks.com</uri></address></author>
<author initials='R.' surname='Salz' fullname='Rich Salz'>
<organization>DataPower Technology, Inc.</organization>
<address>
<postal>
<street>1 Alewife Center</street>
<city>Cambridge</city>
<region>MA</region>
<code>02142</code>
<country>US</country></postal>
<phone>+1 617-864-0455</phone>
<email>rsalz@datapower.com</email>
<uri>http://www.datapower.com</uri></address></author>
<date year='2005' month='July' />
<keyword>URN, UUID</keyword>
<abstract>
<t>This specification defines a Uniform Resource Name namespace for
      UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally
      Unique IDentifier). A UUID is 128 bits long, and can
      guarantee uniqueness across space and time. UUIDs were originally
      used in the Apollo Network Computing System and later in the Open
      Software Foundation's (OSF) Distributed Computing Environment (DCE),
      and then in Microsoft Windows platforms.</t>
<t>This specification is derived from the DCE specification with the
      kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been	
      incorporated into this document.</t></abstract></front>
<seriesInfo name='RFC' value='4122' />
<format type='TXT' octets='59319' target='ftp://ftp.isi.edu/in-notes/rfc4122.txt' />
<format type='HTML' octets='81761' target='http://xml.resource.org/public/rfc/html/rfc4122.html' />
<format type='XML' octets='62848' target='http://xml.resource.org/public/rfc/xml/rfc4122.xml' />
</reference>

<reference anchor="XEP-0001">
  <front>
    <title>XMPP Extension Protocols</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="23" month="January" year="2008"/>
  </front>
  <seriesInfo name="XSF XEP" value="0001"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0001.html"/>
</reference>

<reference anchor="XEP-0016">
  <front>
    <title>Privacy Lists</title>
    <author initials="P." surname="Millard" fullname="Peter Millard">
      <organization/>
      <address/>
    </author>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="15" month="February" year="2007"/>
  </front>
  <seriesInfo name="XSF XEP" value="0016"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0016.html"/>
</reference>

<reference anchor="XEP-0045">
  <front>
    <title>Multi-User Chat</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="17" month="July" year="2007"/>
  </front>
  <seriesInfo name="XSF XEP" value="0045"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0045.html"/>
</reference>

<reference anchor="XEP-0060">
  <front>
    <title>Publish-Subscribe</title>
    <author initials="P." surname="Millard" fullname="Peter Millard">
      <organization/>
      <address>
        <email></email>
      </address>
    </author>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <author initials="R." surname="Meijer" fullname="Ralph Meijer">
      <organization/>
      <address>
        <email>ralphm@ik.nu</email>
      </address>
    </author>
    <date day="3" month="September" year="2008"/>
  </front>
  <seriesInfo name="XSF XEP" value="0060"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0060.html"/>
</reference>

<reference anchor="XEP-0071">
  <front>
    <title>XHTML-IM</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="3" month="September" year="2008"/>
  </front>
  <seriesInfo name="XSF XEP" value="0071"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0071.html"/>
</reference>

<reference anchor="XEP-0077">
  <front>
    <title>In-Band Registration</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="24" month="January" year="2006"/>
  </front>
  <seriesInfo name="XSF XEP" value="0077"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0077.html"/>
</reference>

<reference anchor="XEP-0086">
  <front>
    <title>Error Condition Mappings</title>
    <author initials="R." surname="Norris" fullname="Robert Norris">
      <organization/>
      <address>
        <email>rob@cataclysm.cx</email>
      </address>
    </author>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="17" month="February" year="2004"/>
  </front>
  <seriesInfo name="XSF XEP" value="0086"/>
  <format type="HTML" target="http://xmpp.org/extensions/xep-0086.html"/>
</reference>

<reference anchor="XEP-0100">
  <front>
    <title>Gateway Interaction</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <author initials="D." surname="Smith" fullname="Dave Smith">
      <organization/>
      <address>
        <email>dizzyd@jabber.org</email>
      </address>
    </author>
    <date day="05" month="October" year="2005"/>
  </front>
  <seriesInfo name="XSF XEP" value="0100"/>
  <format type="HTML" target="http://xmpp.org/extensions/xep-0100.html"/>
</reference>

<reference anchor="XEP-0114">
  <front>
    <title>Jabber Component Protocol</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="03" month="March" year="2005"/>
  </front>
  <seriesInfo name="XSF XEP" value="0114"/>
  <format type="HTML" target="http://xmpp.org/extensions/xep-0114.html"/>
</reference>

<reference anchor="XEP-0124">
  <front>
    <title>Bidirectional-streams Over Synchronous HTTP (BOSH)</title>
    <author initials="I." surname="Paterson" fullname="Ian Paterson">
      <organization/>
      <address>
        <email>ian.paterson@clientside.co.uk</email>
      </address>
    </author>
    <author initials="D." surname="Smith" fullname="Dave Smith">
      <organization/>
      <address>
        <email>dizzyd@jabber.org</email>
      </address>
    </author>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="30" month="April" year="2009"/>
  </front>
  <seriesInfo name="XSF XEP" value="0124"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0124.html"/>
</reference>

<reference anchor="XEP-0138">
  <front>
    <title>Stream Compression</title>
    <author initials="J." surname="Hildebrand" fullname="Joe Hildebrand">
      <organization/>
      <address>
        <email>jhildebr@cisco.com</email>
      </address>
    </author>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="27" month="May" year="2009"/>
  </front>
  <seriesInfo name="XSF XEP" value="0138"/>
  <format type="HTML" target="http://xmpp.org/extensions/xep-0138.html"/>
</reference>

<reference anchor="XEP-0156">
  <front>
    <title>Discovering Alternative XMPP Connection Methods</title>
    <author initials="J." surname="Hildebrand" fullname="Joe Hildebrand">
      <organization/>
      <address>
        <email>jhildebrand@jabber.com</email>
      </address>
    </author>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="12" month="June" year="2007"/>
  </front>
  <seriesInfo name="XSF XEP" value="0156"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0156.html"/>
</reference>

<reference anchor="XEP-0160">
  <front>
    <title>Best Practices for Handling Offline Messages</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="24" month="January" year="2006"/>
  </front>
  <seriesInfo name="XSF XEP" value="0160"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0160.html"/>
</reference>

<reference anchor="XEP-0174">
  <front>
    <title>Link-Local Messaging</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="26" month="November" year="2008"/>
  </front>
  <seriesInfo name="XSF XEP" value="0174"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0174.html"/>
</reference>

<reference anchor="XEP-0175">
  <front>
    <title>Best Practices for Use of SASL ANONYMOUS</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="7" month="November" year="2007"/>
  </front>
  <seriesInfo name="XSF XEP" value="0175"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0175.html"/>
</reference>

<reference anchor="XEP-0178">
  <front>
    <title>Best Practices for Use of SASL EXTERNAL with Certificates</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <author initials="P." surname="Millard" fullname="Peter Millard">
      <organization/>
      <address>
        <email></email>
      </address>
    </author>
    <date day="15" month="February" year="2007"/>
  </front>
  <seriesInfo name="XSF XEP" value="0178"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0178.html"/>
</reference>

<reference anchor="XEP-0191">
  <front>
    <title>Simple Communications Blocking</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email/>
      </address>
    </author>
    <date day="15" month="February" year="2007"/>
  </front>
  <seriesInfo name="XSF XEP" value="0191"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0191.html"/>
</reference>

<reference anchor="XEP-0198">
  <front>
    <title>Stream Management</title>
    <author initials="J." surname="Karneges" fullname="Justin Karneges">
      <organization/>
      <address>
        <email>justin@affinix.com</email>
      </address>
    </author>
    <author initials="J." surname="Hildebrand" fullname="Joe Hildebrand">
      <organization/>
      <address>
        <email>jhildebr@cisco.com</email>
      </address>
    </author>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email/>
      </address>
    </author>
    <author initials="F." surname="Forno" fullname="Fabio Forno">
      <organization/>
      <address>
        <email>fabio.forno@gmail.com</email>
      </address>
    </author>
    <date day="17" month="June" year="2009"/>
  </front>
  <seriesInfo name="XSF XEP" value="0198"/>
  <format type="HTML" target="http://xmpp.org/extensions/xep-0198.html"/>
</reference>

<reference anchor="XEP-0199">
  <front>
    <title>XMPP Ping</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email/>
      </address>
    </author>
    <date day="03" month="June" year="2009"/>
  </front>
  <seriesInfo name="XSF XEP" value="0199"/>
  <format type="HTML" target="http://xmpp.org/extensions/xep-0199.html"/>
</reference>

<reference anchor="XEP-0205">
  <front>
    <title>Best Practices to Discourage Denial of Service Attacks</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="7" month="January" year="2009"/>
  </front>
  <seriesInfo name="XSF XEP" value="0205"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0205.html"/>
</reference>

<reference anchor="XEP-0206">
  <front>
    <title>XMPP Over BOSH</title>
    <author initials="I." surname="Paterson" fullname="Ian Paterson">
      <organization/>
      <address>
        <email>ian.paterson@clientside.co.uk</email>
      </address>
    </author>
    <date day="29" month="October" year="2008"/>
  </front>
  <seriesInfo name="XSF XEP" value="0206"/>
  <format type="HTML" target="http://www.xmpp.org/extensions/xep-0206.html"/>
</reference>

<reference anchor="XEP-0220">
  <front>
    <title>Server Dialback</title>
    <author initials="J." surname="Miller" fullname="Jeremie Miller">
      <organization/>
      <address>
        <email>jer@jabber.org</email>
      </address>
    </author>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <author initials="P." surname="Hancke" fullname="Philipp Hancke">
      <organization/>
      <address>
        <email/>
      </address>
    </author>
    <date day="18" month="March" year="2010"/>
  </front>
  <seriesInfo name="XSF XEP" value="0220"/>
  <format type="HTML" target="http://xmpp.org/extensions/xep-0220.html"/>
</reference>

<reference anchor="XEP-0225">
  <front>
    <title>Component Connections</title>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <date day="06" month="October" year="2008"/>
  </front>
  <seriesInfo name="XSF XEP" value="0225"/>
  <format type="HTML" target="http://xmpp.org/extensions/xep-0225.html"/>
</reference>

<reference anchor="XEP-0233">
  <front>
    <title>Domain-Based Service Names in XMPP SASL Negotiation</title>
    <author initials="M." surname="Miller" fullname="Matthew Miller">
      <organization/>
      <address>
        <email>linuxwolf@outer-planes.net</email>
      </address>
    </author>
    <author initials="P." surname="Saint-Andre" fullname="Peter Saint-Andre">
      <organization/>
      <address>
        <email>stpeter@jabber.org</email>
      </address>
    </author>
    <author initials="J." surname="Hildebrand" fullname="Joe Hildebrand">
      <organization/>
      <address>
        <email>jhildebr@cisco.com</email>
      </address>
    </author>
    <date day="10" month="June" year="2010"/>
  </front>
  <seriesInfo name="XSF XEP" value="0233"/>
  <format type="HTML" target="http://xmpp.org/extensions/xep-0233.html"/>
</reference>

<reference anchor="XEP-0288">
  <front>
    <title>Bidirectional Server-to-Server Connections</title>
    <author initials="P." surname="Hancke" fullname="Philipp Hancke">
      <organization/>
      <address>
        <email/>
      </address>
    </author>
    <author initials="D." surname="Cridland" fullname="Dave Cridland">
      <organization/>
      <address>
        <email>dave.cridland@isode.com</email>
      </address>
    </author>
    <date day="04" month="October" year="2010"/>
  </front>
  <seriesInfo name="XSF XEP" value="0288"/>
  <format type="HTML" target="http://xmpp.org/extensions/xep-0288.html"/>
</reference>

<reference anchor='XML-FRAG'
           target='http://www.w3.org/TR/2001/CR-xml-fragment-20010212'>
<front>
<title>XML Fragment Interchange</title>
<author initials='P.' surname='Grosso' fullname='Paul Grosso'>
    <organization />
</author>
<author initials='D.' surname='Veillard' fullname='Daniel Veillard'>
    <organization />
</author>
<date month='February' day='12' year='2001' />
</front>
<seriesInfo name='World Wide Web Consortium CR' value='CR-xml-fragment-20010212' />
<format type='HTML' target='http://www.w3.org/TR/2001/CR-xml-fragment-20010212' />
</reference>

<reference anchor="XML-REG">
<front>
<title>The IETF XML Registry</title>
<author initials='M.' surname='Mealling' fullname='M. Mealling'>
<organization /></author>
<date month='January' year='2004' /></front>
<seriesInfo name='BCP' value='81' />
<seriesInfo name='RFC' value='3688' />
<format type='TXT' octets='17325' target='ftp://ftp.isi.edu/in-notes/rfc3688.txt' />
</reference>

<reference anchor='XML-SCHEMA'
           target='http://www.w3.org/TR/2004/REC-xmlschema-1-20041028'>
<front>
<title>XML Schema Part 1: Structures Second Edition</title>
<author initials='H.' surname='Thompson' fullname='Henry S. Thompson'>
    <organization />
</author>
<author initials='M.' surname='Maloney' fullname='Murray Maloney'>
    <organization />
</author>
<author initials='N.' surname='Mendelsohn' fullname='Noah Mendelsohn'>
    <organization />
</author>
<author initials='D.' surname='Beech' fullname='David Beech'>
    <organization />
</author>
<date month='October' day='28' year='2004' />
</front>
<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-xmlschema-1-20041028' />
<format type='HTML' target='http://www.w3.org/TR/2004/REC-xmlschema-1-20041028' />
</reference>

<reference anchor='XMPP-URI'>
<front>
<title>Internationalized Resource Identifiers (IRIs) and Uniform Resource Identifiers (URIs) for the Extensible Messaging and Presence Protocol (XMPP)</title>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'>
<organization /></author>
<date year='2008' month='February' />
<abstract>
<t>This document defines the use of Internationalized Resource Identifiers (IRIs) and Uniform Resource Identifiers (URIs) in identifying or interacting with entities that can communicate via the Extensible Messaging and Presence Protocol (XMPP). [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5122' />
<format type='TXT' octets='55566' target='ftp://ftp.isi.edu/in-notes/rfc5122.txt' />
</reference>

    </references>

    <section title="XML Schemas" anchor="schema">
      <t>The following schemas formally define various namespaces used in this document, in conformance with <xref target='XML-SCHEMA'/>.  Because validation of XML streams and stanzas is optional, these schemas are not normative and are provided for descriptive purposes only.</t>
      <section title="Stream Namespace" anchor="schemas-stream">
        <figure>
          <artwork><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='http://etherx.jabber.org/streams'
    xmlns='http://etherx.jabber.org/streams'
    elementFormDefault='unqualified'>

  <xs:import namespace='jabber:client'/>
  <xs:import namespace='jabber:server'/>
  <xs:import namespace='urn:ietf:params:xml:ns:xmpp-sasl'/>
  <xs:import namespace='urn:ietf:params:xml:ns:xmpp-streams'/>
  <xs:import namespace='urn:ietf:params:xml:ns:xmpp-tls'/>

  <xs:element name='stream'>
    <xs:complexType>
      <xs:sequence xmlns:client='jabber:client'
                   xmlns:server='jabber:server'>
        <xs:element ref='features' 
                    minOccurs='0' 
                    maxOccurs='1'/>
        <xs:any namespace='urn:ietf:params:xml:ns:xmpp-tls'
                minOccurs='0'
                maxOccurs='1'/>
        <xs:any namespace='urn:ietf:params:xml:ns:xmpp-sasl'
                minOccurs='0'
                maxOccurs='1'/>
        <xs:any namespace='##other'
                minOccurs='0'
                maxOccurs='unbounded'
                processContents='lax'/>
        <xs:choice minOccurs='0' maxOccurs='1'>
          <xs:choice minOccurs='0' maxOccurs='unbounded'>
            <xs:element ref='client:message'/>
            <xs:element ref='client:presence'/>
            <xs:element ref='client:iq'/>
          </xs:choice>
          <xs:choice minOccurs='0' maxOccurs='unbounded'>
            <xs:element ref='server:message'/>
            <xs:element ref='server:presence'/>
            <xs:element ref='server:iq'/>
          </xs:choice>
        </xs:choice>
        <xs:element ref='error' minOccurs='0' maxOccurs='1'/>
      </xs:sequence>
      <xs:attribute name='from' type='xs:string' use='optional'/>
      <xs:attribute name='id' type='xs:string' use='optional'/>
      <xs:attribute name='to' type='xs:string' use='optional'/>
      <xs:attribute name='version' type='xs:decimal' use='optional'/>
      <xs:attribute ref='xml:lang' use='optional'/>
      <xs:anyAttribute namespace='##other' processContents='lax'/> 
    </xs:complexType>
  </xs:element>

  <xs:element name='features'>
    <xs:complexType>
      <xs:sequence>
        <xs:any namespace='##other'
                minOccurs='0'
                maxOccurs='unbounded'
                processContents='lax'/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name='error'>
    <xs:complexType>
      <xs:sequence  xmlns:err='urn:ietf:params:xml:ns:xmpp-streams'>
        <xs:group   ref='err:streamErrorGroup'/>
        <xs:element ref='err:text'
                    minOccurs='0'
                    maxOccurs='1'/>
        <xs:any     namespace='##other'
                    minOccurs='0'
                    maxOccurs='1'
                    processContents='lax'/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

</xs:schema>
          ]]></artwork>
        </figure>
      </section>
      <section title="Stream Error Namespace" anchor="schemas-streamerror">
        <figure>
          <artwork><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:ietf:params:xml:ns:xmpp-streams'
    xmlns='urn:ietf:params:xml:ns:xmpp-streams'
    elementFormDefault='qualified'>

  <xs:element name='bad-format' type='empty'/>
  <xs:element name='bad-namespace-prefix' type='empty'/>
  <xs:element name='conflict' type='empty'/>
  <xs:element name='connection-timeout' type='empty'/>
  <xs:element name='host-gone' type='empty'/>
  <xs:element name='host-unknown' type='empty'/>
  <xs:element name='improper-addressing' type='empty'/>
  <xs:element name='internal-server-error' type='empty'/>
  <xs:element name='invalid-from' type='empty'/>
  <xs:element name='invalid-id' type='empty'/>
  <xs:element name='invalid-namespace' type='empty'/>
  <xs:element name='invalid-xml' type='empty'/>
  <xs:element name='not-authorized' type='empty'/>
  <xs:element name='not-well-formed' type='empty'/>
  <xs:element name='policy-violation' type='empty'/>
  <xs:element name='remote-connection-failed' type='empty'/>
  <xs:element name='reset' type='empty'/>
  <xs:element name='resource-constraint' type='empty'/>
  <xs:element name='restricted-xml' type='empty'/>
  <xs:element name='see-other-host' type='xs:string'/>
  <xs:element name='system-shutdown' type='empty'/>
  <xs:element name='undefined-condition' type='empty'/>
  <xs:element name='unsupported-encoding' type='empty'/>
  <xs:element name='unsupported-stanza-type' type='empty'/>
  <xs:element name='unsupported-version' type='empty'/>

  <xs:group name='streamErrorGroup'>
    <xs:choice>
      <xs:element ref='bad-format'/>
      <xs:element ref='bad-namespace-prefix'/>
      <xs:element ref='conflict'/>
      <xs:element ref='connection-timeout'/>
      <xs:element ref='host-gone'/>
      <xs:element ref='host-unknown'/>
      <xs:element ref='improper-addressing'/>
      <xs:element ref='internal-server-error'/>
      <xs:element ref='invalid-from'/>
      <xs:element ref='invalid-id'/>
      <xs:element ref='invalid-namespace'/>
      <xs:element ref='invalid-xml'/>
      <xs:element ref='not-authorized'/>
      <xs:element ref='not-well-formed'/>
      <xs:element ref='policy-violation'/>
      <xs:element ref='remote-connection-failed'/>
      <xs:element ref='reset'/>
      <xs:element ref='resource-constraint'/>
      <xs:element ref='restricted-xml'/>
      <xs:element ref='see-other-host'/>
      <xs:element ref='system-shutdown'/>
      <xs:element ref='undefined-condition'/>
      <xs:element ref='unsupported-encoding'/>
      <xs:element ref='unsupported-stanza-type'/>
      <xs:element ref='unsupported-version'/>
    </xs:choice>
  </xs:group>

  <xs:element name='text'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:string'>
          <xs:attribute ref='xml:lang' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
          ]]></artwork>
        </figure>
      </section>
      <section title="STARTTLS Namespace" anchor="schemas-starttls">
        <figure>
          <artwork><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:ietf:params:xml:ns:xmpp-tls'
    xmlns='urn:ietf:params:xml:ns:xmpp-tls'
    elementFormDefault='qualified'>

  <xs:element name='starttls'>
    <xs:complexType>
      <xs:choice minOccurs='0' maxOccurs='1'>
        <xs:element name='required' type='empty'/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name='proceed' type='empty'/>

  <xs:element name='failure' type='empty'/>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
          ]]></artwork>
        </figure>
      </section>
      <section title="SASL Namespace" anchor="schemas-sasl">
        <figure>
          <artwork><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:ietf:params:xml:ns:xmpp-sasl'
    xmlns='urn:ietf:params:xml:ns:xmpp-sasl'
    elementFormDefault='qualified'>

  <xs:element name='mechanisms'>
    <xs:complexType>
      <xs:sequence>
        <xs:element name='mechanism'
                    minOccurs='1'
                    maxOccurs='unbounded'
                    type='xs:NMTOKEN'/>
        <xs:any namespace='##other'
                minOccurs='0'
                maxOccurs='unbounded'
                processContents='lax'/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name='abort' type='empty'/>

  <xs:element name='auth'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:string'>
          <xs:attribute name='mechanism'
                        type='xs:NMTOKEN'
                        use='required'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='challenge' type='xs:string'/>

  <xs:element name='response' type='xs:string'/>

  <xs:element name='success' type='xs:string'/>

  <xs:element name='failure'>
    <xs:complexType>
      <xs:sequence>
        <xs:choice minOccurs='0'>
          <xs:element name='aborted' type='empty'/>
          <xs:element name='account-disabled' type='empty'/>
          <xs:element name='credentials-expired' type='empty'/>
          <xs:element name='encryption-required' type='empty'/>
          <xs:element name='incorrect-encoding' type='empty'/>
          <xs:element name='invalid-authzid' type='empty'/>
          <xs:element name='invalid-mechanism' type='empty'/>
          <xs:element name='malformed-request' type='empty'/>
          <xs:element name='mechanism-too-weak' type='empty'/>
          <xs:element name='not-authorized' type='empty'/>
          <xs:element name='temporary-auth-failure' type='empty'/>
        </xs:choice>
        <xs:element ref='text' minOccurs='0' maxOccurs='1'/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name='text'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:string'>
          <xs:attribute ref='xml:lang' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
          ]]></artwork>
        </figure>
      </section>
      <section title="Client Namespace" anchor="schemas-client">
        <figure>
          <artwork><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='jabber:client'
    xmlns='jabber:client'
    elementFormDefault='qualified'>

  <xs:import 
      namespace='urn:ietf:params:xml:ns:xmpp-stanzas'/>

  <xs:element name='message'>
     <xs:complexType>
        <xs:sequence>
          <xs:choice minOccurs='0' maxOccurs='unbounded'>
            <xs:element ref='subject'/>
            <xs:element ref='body'/>
            <xs:element ref='thread'/>
          </xs:choice>
          <xs:any     namespace='##other'
                      minOccurs='0'
                      maxOccurs='unbounded'
                      processContents='lax'/>
          <xs:element ref='error'
                      minOccurs='0'/>
        </xs:sequence>
        <xs:attribute name='from'
                      type='xs:string'
                      use='optional'/>
        <xs:attribute name='id'
                      type='xs:NMTOKEN'
                      use='optional'/>
        <xs:attribute name='to'
                      type='xs:string'
                      use='optional'/>
        <xs:attribute name='type' 
                      use='optional' 
                      default='normal'>
          <xs:simpleType>
            <xs:restriction base='xs:NMTOKEN'>
              <xs:enumeration value='chat'/>
              <xs:enumeration value='error'/>
              <xs:enumeration value='groupchat'/>
              <xs:enumeration value='headline'/>
              <xs:enumeration value='normal'/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
        <xs:attribute ref='xml:lang' use='optional'/>
     </xs:complexType>
  </xs:element>

  <xs:element name='body'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:string'>
          <xs:attribute ref='xml:lang' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='subject'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:string'>
          <xs:attribute ref='xml:lang' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='thread'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:NMTOKEN'>
          <xs:attribute name='parent'
                        type='xs:NMTOKEN'
                        use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='presence'>
    <xs:complexType>
      <xs:sequence>
        <xs:choice minOccurs='0' maxOccurs='unbounded'>
          <xs:element ref='show'/>
          <xs:element ref='status'/>
          <xs:element ref='priority'/>
        </xs:choice>
        <xs:any     namespace='##other'
                    minOccurs='0'
                    maxOccurs='unbounded'
                    processContents='lax'/>
        <xs:element ref='error'
                    minOccurs='0'/>
      </xs:sequence>
      <xs:attribute name='from'
                    type='xs:string'
                    use='optional'/>
      <xs:attribute name='id'
                    type='xs:NMTOKEN'
                    use='optional'/>
      <xs:attribute name='to'
                    type='xs:string'
                    use='optional'/>
      <xs:attribute name='type' use='optional'>
        <xs:simpleType>
          <xs:restriction base='xs:NMTOKEN'>
            <xs:enumeration value='error'/>
            <xs:enumeration value='probe'/>
            <xs:enumeration value='subscribe'/>
            <xs:enumeration value='subscribed'/>
            <xs:enumeration value='unavailable'/>
            <xs:enumeration value='unsubscribe'/>
            <xs:enumeration value='unsubscribed'/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute ref='xml:lang' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='show'>
    <xs:simpleType>
      <xs:restriction base='xs:NMTOKEN'>
        <xs:enumeration value='away'/>
        <xs:enumeration value='chat'/>
        <xs:enumeration value='dnd'/>
        <xs:enumeration value='xa'/>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>

  <xs:element name='status'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='string1024'>
          <xs:attribute ref='xml:lang' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name='string1024'>
    <xs:restriction base='xs:string'>
      <xs:minLength value='1'/>
      <xs:maxLength value='1024'/>
    </xs:restriction>
  </xs:simpleType>

  <xs:element name='priority' type='xs:byte'/>

  <xs:element name='iq'>
    <xs:complexType>
      <xs:sequence>
        <xs:any     namespace='##other'
                    minOccurs='0'
                    maxOccurs='1'
                    processContents='lax'/>
        <xs:element ref='error'
                    minOccurs='0'/>
      </xs:sequence>
      <xs:attribute name='from'
                    type='xs:string'
                    use='optional'/>
      <xs:attribute name='id'
                    type='xs:NMTOKEN'
                    use='required'/>
      <xs:attribute name='to'
                    type='xs:string'
                    use='optional'/>
      <xs:attribute name='type' use='required'>
        <xs:simpleType>
          <xs:restriction base='xs:NMTOKEN'>
            <xs:enumeration value='error'/>
            <xs:enumeration value='get'/>
            <xs:enumeration value='result'/>
            <xs:enumeration value='set'/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute ref='xml:lang' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='error'>
    <xs:complexType>
      <xs:sequence xmlns:err='urn:ietf:params:xml:ns:xmpp-stanzas'>
        <xs:group ref='err:stanzaErrorGroup'/>
        <xs:element ref='err:text'
                    minOccurs='0'/>
      </xs:sequence>
      <xs:attribute name='by' 
                    type='xs:string' 
                    use='optional'/>
      <xs:attribute name='type' use='required'>
        <xs:simpleType>
          <xs:restriction base='xs:NMTOKEN'>
            <xs:enumeration value='auth'/>
            <xs:enumeration value='cancel'/>
            <xs:enumeration value='continue'/>
            <xs:enumeration value='modify'/>
            <xs:enumeration value='wait'/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

</xs:schema>
          ]]></artwork>
        </figure>
      </section>
      <section title="Server Namespace" anchor="schemas-server">
        <figure>
          <artwork><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='jabber:server'
    xmlns='jabber:server'
    elementFormDefault='qualified'>

  <xs:import 
      namespace='urn:ietf:params:xml:ns:xmpp-stanzas'/>

  <xs:element name='message'>
     <xs:complexType>
        <xs:sequence>
          <xs:choice minOccurs='0' maxOccurs='unbounded'>
            <xs:element ref='subject'/>
            <xs:element ref='body'/>
            <xs:element ref='thread'/>
          </xs:choice>
          <xs:any namespace='##other'
                  minOccurs='0'
                  maxOccurs='unbounded'
                  processContents='lax'/>
          <xs:element ref='error'
                      minOccurs='0'/>
        </xs:sequence>
        <xs:attribute name='from'
                      type='xs:string'
                      use='required'/>
        <xs:attribute name='id'
                      type='xs:NMTOKEN'
                      use='optional'/>
        <xs:attribute name='to'
                      type='xs:string'
                      use='required'/>
        <xs:attribute name='type' 
                      use='optional' 
                      default='normal'>
          <xs:simpleType>
            <xs:restriction base='xs:NMTOKEN'>
              <xs:enumeration value='chat'/>
              <xs:enumeration value='error'/>
              <xs:enumeration value='groupchat'/>
              <xs:enumeration value='headline'/>
              <xs:enumeration value='normal'/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
        <xs:attribute ref='xml:lang' use='optional'/>
     </xs:complexType>
  </xs:element>

  <xs:element name='body'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:string'>
          <xs:attribute ref='xml:lang' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='subject'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:string'>
          <xs:attribute ref='xml:lang' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='thread'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:NMTOKEN'>
          <xs:attribute name='parent'
                        type='xs:NMTOKEN'
                        use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='subject'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:NMTOKEN'>
          <xs:attribute name='parent' 
                        type='xs:NMTOKEN'
                        use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='presence'>
    <xs:complexType>
      <xs:sequence>
        <xs:choice minOccurs='0' maxOccurs='unbounded'>
          <xs:element ref='show'/>
          <xs:element ref='status'/>
          <xs:element ref='priority'/>
        </xs:choice>
        <xs:any     namespace='##other'
                    minOccurs='0'
                    maxOccurs='unbounded'
                    processContents='lax'/>
        <xs:element ref='error'
                    minOccurs='0'/>
      </xs:sequence>
      <xs:attribute name='from'
                    type='xs:string'
                    use='required'/>
      <xs:attribute name='id'
                    type='xs:NMTOKEN'
                    use='optional'/>
      <xs:attribute name='to'
                    type='xs:string'
                    use='required'/>
      <xs:attribute name='type' use='optional'>
        <xs:simpleType>
          <xs:restriction base='xs:NMTOKEN'>
            <xs:enumeration value='error'/>
            <xs:enumeration value='probe'/>
            <xs:enumeration value='subscribe'/>
            <xs:enumeration value='subscribed'/>
            <xs:enumeration value='unavailable'/>
            <xs:enumeration value='unsubscribe'/>
            <xs:enumeration value='unsubscribed'/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute ref='xml:lang' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='show'>
    <xs:simpleType>
      <xs:restriction base='xs:NMTOKEN'>
        <xs:enumeration value='away'/>
        <xs:enumeration value='chat'/>
        <xs:enumeration value='dnd'/>
        <xs:enumeration value='xa'/>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>

  <xs:element name='status'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='string1024'>
          <xs:attribute ref='xml:lang' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name='string1024'>
    <xs:restriction base='xs:string'>
      <xs:minLength value='1'/>
      <xs:maxLength value='1024'/>
    </xs:restriction>
  </xs:simpleType>

  <xs:element name='priority' type='xs:byte' default='0'/>

  <xs:element name='iq'>
    <xs:complexType>
      <xs:sequence>
        <xs:any namespace='##other'
                minOccurs='0'
                maxOccurs='1'
                processContents='lax'/>
        <xs:element ref='error'
                    minOccurs='0'/>
      </xs:sequence>
      <xs:attribute name='from'
                    type='xs:string'
                    use='required'/>
      <xs:attribute name='id'
                    type='xs:NMTOKEN'
                    use='required'/>
      <xs:attribute name='to'
                    type='xs:string'
                    use='required'/>
      <xs:attribute name='type' use='required'>
        <xs:simpleType>
          <xs:restriction base='xs:NMTOKEN'>
            <xs:enumeration value='error'/>
            <xs:enumeration value='get'/>
            <xs:enumeration value='result'/>
            <xs:enumeration value='set'/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute ref='xml:lang' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='error'>
    <xs:complexType>
      <xs:sequence xmlns:err='urn:ietf:params:xml:ns:xmpp-stanzas'>
        <xs:group ref='err:stanzaErrorGroup'/>
        <xs:element ref='err:text'
                    minOccurs='0'/>
      </xs:sequence>
      <xs:attribute name='by' 
                    type='xs:string' 
                    use='optional'/>
      <xs:attribute name='type' use='required'>
        <xs:simpleType>
          <xs:restriction base='xs:NMTOKEN'>
            <xs:enumeration value='auth'/>
            <xs:enumeration value='cancel'/>
            <xs:enumeration value='continue'/>
            <xs:enumeration value='modify'/>
            <xs:enumeration value='wait'/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

</xs:schema>
          ]]></artwork>
        </figure>
      </section>
      <section title="Resource Binding Namespace" anchor="schemas-bind">
        <figure>
          <artwork><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:ietf:params:xml:ns:xmpp-bind'
    xmlns='urn:ietf:params:xml:ns:xmpp-bind'
    elementFormDefault='qualified'>

  <xs:element name='bind'>
    <xs:complexType>
      <xs:choice>
        <xs:element name='resource' type='resourceType'/>
        <xs:element name='jid' type='fullJIDType'/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name='fullJIDType'>
    <xs:restriction base='xs:string'>
      <xs:minLength value='8'/>
      <xs:maxLength value='3071'/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name='resourceType'>
    <xs:restriction base='xs:string'>
      <xs:minLength value='1'/>
      <xs:maxLength value='1023'/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
          ]]></artwork>
        </figure>
      </section>
      <section title="Stanza Error Namespace" anchor="schemas-stanzaerror">
        <figure>
          <artwork><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:ietf:params:xml:ns:xmpp-stanzas'
    xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'
    elementFormDefault='qualified'>

  <xs:element name='bad-request' type='empty'/>
  <xs:element name='conflict' type='empty'/>
  <xs:element name='feature-not-implemented' type='empty'/>
  <xs:element name='forbidden' type='empty'/>
  <xs:element name='gone' type='xs:string'/>
  <xs:element name='internal-server-error' type='empty'/>
  <xs:element name='item-not-found' type='empty'/>
  <xs:element name='jid-malformed' type='empty'/>
  <xs:element name='not-acceptable' type='empty'/>
  <xs:element name='not-allowed' type='empty'/>
  <xs:element name='not-authorized' type='empty'/>
  <xs:element name='policy-violation' type='empty'/>
  <xs:element name='recipient-unavailable' type='empty'/>
  <xs:element name='redirect' type='xs:string'/>
  <xs:element name='registration-required' type='empty'/>
  <xs:element name='remote-server-not-found' type='empty'/>
  <xs:element name='remote-server-timeout' type='empty'/>
  <xs:element name='resource-constraint' type='empty'/>
  <xs:element name='service-unavailable' type='empty'/>
  <xs:element name='subscription-required' type='empty'/>
  <xs:element name='undefined-condition' type='empty'/>
  <xs:element name='unexpected-request' type='empty'/>

  <xs:group name='stanzaErrorGroup'>
    <xs:choice>
      <xs:element ref='bad-request'/>
      <xs:element ref='conflict'/>
      <xs:element ref='feature-not-implemented'/>
      <xs:element ref='forbidden'/>
      <xs:element ref='gone'/>
      <xs:element ref='internal-server-error'/>
      <xs:element ref='item-not-found'/>
      <xs:element ref='jid-malformed'/>
      <xs:element ref='not-acceptable'/>
      <xs:element ref='not-authorized'/>
      <xs:element ref='not-allowed'/>
      <xs:element ref='policy-violation'/>
      <xs:element ref='recipient-unavailable'/>
      <xs:element ref='redirect'/>
      <xs:element ref='registration-required'/>
      <xs:element ref='remote-server-not-found'/>
      <xs:element ref='remote-server-timeout'/>
      <xs:element ref='resource-constraint'/>
      <xs:element ref='service-unavailable'/>
      <xs:element ref='subscription-required'/>
      <xs:element ref='undefined-condition'/>
      <xs:element ref='unexpected-request'/>
    </xs:choice>
  </xs:group>

  <xs:element name='text'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:string'>
          <xs:attribute ref='xml:lang' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
          ]]></artwork>
        </figure>
      </section>
    </section>

    <section title="Contact Addresses" anchor="contact">
      <t>Consistent with <xref target='MAILBOXES'/>, organization that offer XMPP services are encouraged to provide an Internet mailbox of "XMPP" for inquiries related to that service, where the host portion of the resulting mailto URI is the organization's domain, not the domain of the XMPP service itself (e.g., the XMPP service might be offered at im.example.com but the Internet mailbox would be &lt;xmpp@example.com&gt;).</t>
    </section>

    <section title="Account Provisioning" anchor="provisioning">
      <t>Account provisioning is out of scope for this specification.  Possible methods for account provisioning include account creation by a server administrator and in-band account registration using the 'jabber:iq:register' namespace as documented in <xref target="XEP-0077"/>.  An XMPP server implementation or administrative function MUST ensure that any JID assigned during account provisioning (including localpart, domainpart, resourcepart, and separator characters) conforms to the canonical format for XMPP addresses defined in <xref target='XMPP-ADDR'/>.</t>
    </section>

    <section title="Differences from RFC 3920" anchor="diffs">
      <t>Based on consensus derived from implementation and deployment experience as well as formal interoperability testing, the following substantive modifications were made from RFC 3920 (in addition to numerous changes of an editorial nature).</t>
      <t>
        <list style='symbols'>
          <t>Moved specification of the XMPP address format to a separate document.</t>
          <t>Recommended or mandated use of the 'from' and 'to' attributes on stream headers.</t>
          <t>More fully specified the stream closing handshake.</t>
          <t>Specified the recommended stream reconnection algorithm.</t>
          <t>Changed the name of the &lt;xml-not-well-formed/&gt; stream error condition to &lt;not-well-formed/&gt; for compliance with the XML specification.</t>
          <t>Removed the unnecessary and unused &lt;invalid-id/&gt; stream error (see RFC 3920 for historical documentation).</t>
          <t>Specified return of the &lt;restricted-xml/&gt; stream error in response to receipt of prohibited XML features.</t> 
          <t>More completely specified the format and handling of the &lt;see-other-host/&gt; stream error, including consistency with RFC 3986 and RFC 5952 with regard to IPv6 addresses (e.g., enclosing the IPv6 address in square brackets '[' and ']').</t>
          <t>Specified that the SASL SCRAM mechanism is a mandatory-to-implement technology for client-to-server streams.</t>
          <t>Specified that TLS plus the SASL PLAIN mechanism is a mandatory-to-implement technology for client-to-server streams.</t>
          <t>Specified that support for the SASL EXTERNAL mechanism is required for servers but only recommended for clients (since end-user X.509 certificates are difficult to obtain and not yet widely deployed).</t>
          <t>Removed the hard two-connection rule for server-to-server streams.</t>
          <t>More clearly specified the certificate profile for both public key certificates and issuer certificates.</t>
          <t>Added the &lt;reset/&gt; stream error (<xref target='streams-error-conditions-reset'/>) condition to handle expired/revoked certificates or the addition of security-critical features to an existing stream.</t>
          <t>Added the &lt;account-disabled/&gt;, &lt;credentials-expired/&gt;, &lt;encryption-required/&gt;, and &lt;malformed-request/&gt; SASL error conditions to handle error flows mistakenly left out of RFC 3920 or discussed in RFC 4422 but not in RFC 2222.</t>
          <t>Removed the unused &lt;payment-required/&gt; stanza error.</t>
          <t>Removed the unnecessary requirement for escaping of characters that map to certain predefined entities, since they do not need to be escaped in XML.</t>
          <t>Clarified the process of DNS SRV lookups and fallbacks.</t>
          <t>Clarified the handling of SASL security layers.</t>
          <t>Clarified that a SASL simple user name is the localpart, not the bare JID.</t>
          <t>Clarified the stream negotiation process and associated flow chart.</t>
          <t>Clarified the handling of stream features.</t>
          <t>Added a 'by' attribute to the &lt;error/&gt; element for stanza errors so that the entity that has detected the error can include its JID for diagnostic or tracking purposes.</t>
          <t>Clarified the handling of data that violates the well-formedness definitions for XML 1.0 and XML namespaces.</t>
          <t>Specified the security considerations in more detail, especially with regard to presence leaks and denial of service attacks.</t>
          <t>Moved documentation of the Server Dialback protocol from this specification to a separate specification maintained by the XMPP Standards Foundation.</t>
        </list>
      </t>
    </section>

    <section title="Acknowledgements" anchor="intro-ack">
      <t>This document is an update to, and derived from, RFC 3920.  This document would have been impossible without the work of the contributors and commenters acknowledged there.</t>
      <t>Hundreds of people have provided implementation feedback, bug reports, requests for clarification, and suggestions for improvement since publication of RFC 3920.  Although the document editor has endeavored to address all such feedback, he is solely responsible for any remaining errors and ambiguities.</t>
      <t>Special thanks are due to Kevin Smith, Matthew Wild, Dave Cridland, Philipp Hancke, Waqas Hussain, Florian Zeitz, Ben Campbell, Jehan Pages, Paul Aurich, Justin Karneges, Kurt Zeilenga, Simon Josefsson, Ralph Meijer, Curtis King, and others for their comments during Working Group Last Call.</t>
      <t>Thanks also to Yaron Sheffer and Elwyn Davies for their reviews on behalf of the Security Directorate and the General Area Review Team, respectively.</t>
      <t>The Working Group chairs were Ben Campbell and Joe Hildebrand.  The responsible Area Director was Gonzalo Camarillo.</t>
    </section>

  </back>

</rfc>
