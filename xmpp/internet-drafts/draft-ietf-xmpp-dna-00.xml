<?xml version='1.0' ?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>
<?rfc compact="yes"?>
<?rfc strict="yes"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<rfc category="std" docName="draft-ietf-xmpp-dna-00" ipr="trust200902">
  <front>
    <title abbrev='DNA'>Domain Name Assertions</title>
    <author initials='J.'
            surname='Lindberg'
            fullname='Jonas Lindberg'>
      <organization>Google</organization>
      <address>
        <email>jonasl@google.com</email>
      </address>
    </author>
    <author initials='S.'
            surname='Farrell' 
            fullname='Stephen Farrell'>
      <organization>NewBay Software</organization>
      <address>
        <email>sfarrell@newbay.com</email>
      </address>
    </author>
    <date year='2010' month='January' day='14'/>
    <keyword>Jabber</keyword>
    <keyword>XML</keyword>
    <keyword>XMPP</keyword>
    <keyword>delegation</keyword>
    <keyword>federation</keyword>
    <keyword>proof</keyword>
    <keyword>security</keyword>
    <abstract><t>An application-level approach to asserting and proving the delegated ownership of a domain name for XMPP.</t></abstract>
  </front>

  <middle>
    <section title='Introduction' anchor='intro'>
      <t>As large hosting providers begin providing XMPP services for multiple domains, several issues with previous mechanisms for server-to-server federation have become apparent.</t>
      <t>A large number of sockets are currently required between hosting providers.  Although servers may attempt to piggyback whenever possible, the possibility exists that 2*N*M sockets will be created (where N is the number of domains on one hosting provider, and M is the number of domains on another hosting provider).  The goal would be that the number of sockets was dependent on load or deployment considerations.</t>
      <t>In order to enable or require encryption, the hosting provider must create a separate socket for each hostname pair and have access to a X.509 certificate that is signed by a widely-trusted CA and includes both the public and private keys.  Customers of hosting providers might be uncomfortable with the level of trust this requires.</t>
      <t>This document lays out an approach known as Domain Name Assertions (DNA) that allows providers to effectively host XMPP services on behalf of other companies, and might be expanded later to support other protocols.</t>
    </section>

    <section title='Acknowledgements' anchor='acks'>
      <t>The original version of this specification was written by Joe Hildebrand and Sean Turner.</t>
    </section>

    <section title='Glossary' anchor='glossary'>
      <t>
        <list style='hanging'>
          <t hangText='Hosted domain'>An XMPP domain whose network services are delegated to a third party.</t>
          <t hangText='Hosting provider'>A business entity that provides services for one or more domains that it does not directly and fully control.</t>
          <t hangText='Self-hosted domain'>A domain whose owner acts as its hosting provider.</t>    
          <t hangText='Delegation'>A ceremony that acts as proof of the intent of the owner of a hosted domain to cede control to a hosting provider for a given protocol.</t>
          <t hangText='Widely-trusted CA'>For open communities, a Certificate Authority whose certificate that is trusted by multiple web browsers by default.  For closed communities, a Certificate Authority that is trusted by all members of that community.</t>
          <t hangText='Sender Domain'>The domain associated with the 'from' address on a stanza to be sent across a federation boundary.</t>
          <t hangText='Target Domain'>The domain associated with the 'to' address on a stanza to be sent across a federation boundary.</t>
          <t hangText='Originating Server'>The machine that wants to send a message from an entity at the Sender Domain to an entity at the Target Domain and thus is attempting to establish a connection between the two servers.</t>
          <t hangText='Receiving Server'>The machine to which the Originating Server has opened a connection for the purpose of sending a message from the Sender Domain to the Target Domain.</t>
          <t hangText='Asserting Entity'>A system element (such as a server) asserting a given domain name as an identity.</t>
          <t hangText='Validating Entity'>A system element (such as a client or server) that checks a given identity asserted by an asserting entity.</t>
          <t hangText='Asserted Domain'>A domain name asserted by either side of a conversation.  validating entities may require assertions to be backed up with proof.</t>
          <t hangText='Proof'>A secure mechanism through which a validating entity can ascertain that an asserting entity has authority for the asserted domain, either directly or indirectly (by delegation).</t>
        </list>
      </t>
    </section>

    <section title='Requirements' anchor='reqs'>
      <t>
        <list style='numbers'>
          <t>A hosting provider MUST be able to service domains for which it cannot obtain certificates signed by a widely-trusted CA.</t>
          <t>All network traffic (except for initial handshakes) MUST be encrypted in a manner not subject to man-in-the-middle attacks.</t>
          <t>The number of socket connections between hosting providers MUST NOT be a function of the number of domains hosted by either provider.</t>
          <t>Connections MUST be usable in either direction, if allowed by policy and deployment considerations.</t>
          <t>The owners of the hosted domain MUST NOT be required to give out private keying material associated with any certificate they own that has been signed by a widely-trusted CA.</t>
          <t>The owners of the hosted domain MUST be allowed to choose the frequency with which they wish to perform the delegation ceremony.</t>
          <t>The owners of the hosted domain MUST be allowed to revoke their delegation at any time.</t>
          <t>Multiple mechanisms for proving delegation MUST be possible.</t>
          <t>It MUST be possible for new assertions to be added to a stream at any point after the stream is fully established, but before the stream is closed</t>
        </list>
      </t>
    </section>

    <section title='Generic Use Cases' anchor='genericusecases'>
      <t>The DNA mechanism can be used for multiple different protocols.  In particular, client-to-server XMPP and server-to-server XMPP are discussed herein, but the general approach could be used for non-XMPP protocols such as SMTP or IMAP.  As such, the protocol syntax offered here is normative for XMPP, but merely illustrative for other protocols, which will need their own protocol bindings.</t>
      <t>The following domain names are used in the examples in this section:
      <list style='hanging'>
        <t hangText='asserted.tld'>The domain name being asserted.</t>
      </list>
      </t>
      <section title='Assertions' anchor='assertions'>
        <t>The asserting entity asserts a domain name through the use of an "assert" element.  Assertions MUST contain a "from" attribute naming the domain name that is being asserted.</t>
        <figure>
          <artwork><![CDATA[<assert xmlns='urn:ietf:params:xml:ns:dna' from='asserted.tld'/>]]></artwork>
        </figure>
      </section>

      <section title='Validation' anchor='valid'>
        <t>When the validating entity has been satisified that the asserting entity is authoritative for the domain name asserted, it MUST send a "valid" element.  At this point, the asserting entity MAY send stanzas to the validating entity containing from addresses in the asserted and validated domain.</t>
        <t>Validating entities SHOULD respond to a domain name assertion without asking for further proof when the domain name asserted is represented in the certificate offered by the asserting entity according to the rules set out in <xref target='rfc3920bis'/>.</t>
        <t>Validating entities MAY respond to a domain name assertion without asking for further proof when the domain name asserted is known to be associated with the asserting entity through some other secure means such as DNSSEC, caching, or local knowledge.  In the DNSSEC case, the server hostname in the SRV record used to connect SHOULD be looked for in the certificate offered by the asserting entity, according to the rules set out in <xref target='rfc3920bis'/>.</t>
        <figure>
          <artwork><![CDATA[<valid xmlns='urn:ietf:params:xml:ns:dna' to='asserted.tld'/>]]></artwork>
        </figure>
      </section>

      <section title='Invalidation' anchor='invalid'>
        <t>When the validating entity does not accept proof offered by the asserting entity, or it no longer trusts the proof (for example due to the proof timing out or being revoked), it sends the asserting entity an "invalid" element.  The asserting entity MUST NOT send any stanzas to the validating entity containing from addresses in the invalidated domain without performing another validation.</t>
        <t>Invalid responses MAY be given in direct response to an assertion if the validating entity has reason to believe that no proof is possible.  Examples that would cause this response include a blocking list or a negative cache.</t>
        <figure>
          <artwork><![CDATA[<invalid xmlns='urn:ietf:params:xml:ns:dna' to='asserted.tld'/>]]></artwork>
        </figure>
      </section>

      <section title='Requesting proof with a challenge' anchor='challenge'>
        <t>If an assertion cannot be validated immediately, the validating entity may ask for further proof.  Inside the "challenge" element, at least one form of proof that will be acceptable MUST be given to the asserting entity.  If an acceptable proof format is not available for the asserted domain, the validating entity MUST return an invalid response proactively.</t>
        <t>A "proof" element designates a type of proof that would be acceptable to the verifying entity.  The "type" attribute of the "proof" element MUST be a valid URI.  A registry of proof types will be created with the IANA (see <xref target='iana'/>).  Standard proof types will begin with "urn:ietf:params:dna:proof:". Custom proofs should be signaled with a "type" attribute value containing a full URI under the control of the defining party.  Proof types MUST be compared for equality using the rules for comparing URIs.</t>
        <t>Some proof types MAY require information or nonces from the validating entity.  If so, the specification for that proof type MUST specify extensions to the "proof" element in a new namespace.</t>
        <t>In some protocols, a challenge MAY be sent without an assertion, if the validating entity has reason to believe that the entity with which it is talking is authoritative for a given domain.</t>
        <figure>
          <artwork><![CDATA[<challenge xmlns='urn:ietf:params:xml:ns:dna' to='asserted.tld'>
  <proof xmlns='urn:ietf:params:dna:proof:attribute-cert'/>
  < type='http://example.com/proof/custom'/>
</challenge>]]></artwork>
        </figure>
      </section>

      <section title='No proof possible' anchor='impossible'>
        <t>If the validating entity requires proof, but will not accept proof by a means that the asserting entity has available for the asserted domain, the asserting entity MUST respond with an "impossible" element.  The validating entity MUST NOT send a "valid" or "invalid" element in response, and MUST NOT accept stanzas from the asserted domain on this connection unless some other assertion works in the future.</t>
        <t>The "impossible" element MAY be sent after full validation, if the asserting entity would like to retract the assertion.</t>
        <figure>
          <artwork><![CDATA[<impossible xmlns='urn:ietf:params:xml:ns:dna' from='asserted.tld'/>]]></artwork>
        </figure>
      </section>

      <section title='Proving a challenge' anchor='proof'>
        <t>If an asserting entity thinks it can prove a given assertion when challenged, it sends that proof in a "proof" element.  The REQUIRED "type" attribute specifies the chosen proof type, and the REQUIRED "from" attribute specifies the domain being proved.  Each proof type MUST specify the format of the contents of the "proof" element.  Suggestions for formats include Base64-encoded binary as character data or structured XML in a new namespace.</t>
        <figure>
          <artwork><![CDATA[<proof xmlns='urn:ietf:params:xml:ns:dna' 
       from='asserted.tld' 
       type='urn:ietf:params:dna:proof:attribute-cert'>
  (Base64-encoded attribute certificate)
</proof>]]></artwork>
        </figure>
      </section>
    </section>

    <section title='Attribute Certificate Proof' anchor='attribute-cert'>

      <t>When an asserting entity has been delegated responsibility for hosting a given domain, an Attribute Certificate MUST be used to prove the delegation. The proof type URI associated with attribute certificates SHALL be 'urn:ietf:params:dna:proof:attribute-cert' (EDITOR'S NOTE: We will work with IANA to come up with a good URN. This is just a placeholder.)</t>

      <t>The certificate that signed the attribute certificate MUST have been acceptable as proof of ownership of a given domain for the protocol in question, according to the rules in <xref target='rfc3920bis'/>. Validating entities SHOULD try prepending the asserted domain with "www." and re-checking for name matches before rejecting the signing certificate, in order to allow for easier deployments using existing web certificates as proof.</t>

      <t>Each protocol that is delegated will be assigned its own OID to identify a service and whether the entity can act as a server or client.  These values will be included in the Access Identifier attribute, from <xref target='I-D.ietf-pkix-3281update'/>.  This document defines the OIDs for XMPP.  Other documents may specify additional OIDs.</t>

      <t>The remaining paragraphs in this section profile the attribute certificate issuers public key certificate and the attribute certificate.</t>

      <section title='Attribute Certificate Issuer Profile'>
        <t>The following is a profile of the attribute certificate issuer's public key certificate, which is as per <xref target='I-D.ietf-pkix-3281update'/>:

        <list style='symbols'>
          <t>The issuer's certificate MUST conform to <xref target='RFC5280'/>.</t>
          <t>The issuer's certificate MUST have a keyUsage extension with the digitalSignature bit set.</t>
          <t>The issuer's certificate MUST NOT have a basicConstraints extension with the cA BOOLEAN set to TRUE.</t>
        </list>
        </t>
        <t>In addition to the <xref target='I-D.ietf-pkix-3281update'/> requirements, the subject name MUST be non-NULL in the attribute certificate issuer's public key certificate.</t>
      </section>

      <section title='Attribute Certificate Profile'>
        <t>The attribute certificate issued MUST conform to <xref target='I-D.ietf-pkix-3281update'/>.  There are options in that profile and the following profiles those options:
        <list style='symbols'>
          <t>The holder field MUST be the baseCertificateID.</t>

          <t>The attributes field MUST include the Access Identity attribute, as specified in Section 4.4.2 of <xref target='I-D.ietf-pkix-3281update'/>.  Both the service and ident fields' GeneralName choice MUST be registeredID.  The service and ident fields MUST be as defined in Section 5.3.  Other attributes MAY be included.</t>

          <t>The extensions field MUST include the non-critical noRevAvail extension, as defined in Section 4.3.6 of <xref target='I-D.ietf-pkix-3281update'/>, to indicate that no revocation information is available from the attribute certificate issuer.</t>

          <t>The extensions field MAY include:
          <list style='symbols'>
            <t>The authorityKeyIdentifier extension if the issuer has more than one key pair.</t>
            <t>The issuerAltName extension if the issuer's certificate includes the subjectAltName extension.  If included issuerAltName MUST be marked non-critical.</t>
          </list>
          </t>
        </list>
        </t>
      </section>

      <section title='Access Identity Values'>
        <t>The following paragraphs define the service and ident values for the delegated protocols.  Currently, only values for XMPP are defined.  A later version of this document or another document may specify additional values for other protocols.</t>

        <section title='XMPP'>
          <t>When XMPP is delegated the following procedures MUST be followed.</t>

          <t>The service field MUST be id-xmpp.  The following object identifier identifies that the AC holder supports XMPP:</t>

        <figure>
          <artwork><![CDATA[id-xmpp OBJECT IDENTIFIER ::= { TBD }]]></artwork>
        </figure>

        <t>The ident field MUST be either id-xmpp-client or id-xmpp-server.  Both id-xmpp-client and id-xmpp-server MAY appear in the same attribute certificate.  Note that the Access Identity attribute will be multi-valued when both id-xmpp-client and id-xmpp-server are present.</t>

        <t>The following object identifier identifies the AC holder as the XMPP client:</t>

        <figure>
          <artwork><![CDATA[id-xmpp-client OBJECT IDENTIFIER ::= { id-xmpp 0 }]]></artwork>
        </figure>

        <t>The following object identifier identifies the AC holder as the XMPP server:</t>

        <figure>
          <artwork><![CDATA[id-xmpp-server OBJECT IDENTIFIER ::= { id-xmpp 1 }]]></artwork>
        </figure>
        </section>
      </section>

      <section title='Attribute Certificate Signature Algorithms'>
        <t>The issuer MUST support signing attribute certificate with the PKCS #1 version 1.5 signature algorithm with SHA-256, as specified in <xref target='RFC4055'/>.</t>
      </section>

      <section title='Proof Encoding'>
        <t>The attribute certificate, the issuer's certificate, and all of the CA certificates in the trust chain of the signing certificate back to the trust anchor are encoded as a "certs-only" SMIME message, as per <xref target='I-D.ietf-smime-3851bis'/> (i.e, a degenerate SignedData with no content just certificates).  The resulting message is then Base64 encoded, as per Section 6.8 of <xref target='RFC2045'/>.   The end result is then transmitted as the character data of a "proof" element.</t>
      </section>
    </section>

    <section title='DNA for XMPP Federation' anchor='federation'>
      <t>Two XMPP servers, each of which hosts multiple domains that they do not directly control, desire to connect in order to exchange traffic for at least two of those domains (one on either side).</t>
      <t>The following domain names are used in the examples:
      <list style='hanging'>
        <t hangText='target.tld'>The domain portion of the JID in the to address of the stanza that caused this connection to be initiated.</t>
        <t hangText='othertarget.tld'>The domain portion of the JID in the to address of a stanza being sent across a stream that was originally started to talk to target.tld.</t>
        <t hangText='targetprovider.tld'>The hosting provider for target.tld.</t>
        <t hangText='server.targetprovider.tld'>A server with XMPP federation services at the target's hosting provider.</t>
        <t hangText='originator.tld'>The domain portion of the JID in the from address of the stanza that caused this connection to be initiated.</t>
        <t hangText='originatingprovider.tld'>The hosting provider for target.tld.</t>
        <t hangText='server.originatingprovider.tld'>A server with XMPP federation services at the originator's hosting provider.</t>
      </list>
      </t>

      <section title='DNS SRV lookups' anchor='dnssrv'>
        <t>In a delegated hosting scenario, DNS SRV records are REQUIRED, since otherwise the hosting provider will never be contacted for the target domain.  As specified by <xref target='rfc3920bis'/> the originating server looks up the target domain to find a list of receiving servers.  If the originating server already has a connection to the IP address represented by one of these servers (perhaps because it is communicating with another domain hosted by this provider), it MAY reuse that stream (see Stream Reuse).  If the originating server does not have a connection it wants to reuse, it performs the SRV algorithm to select an SRV record and makes a TCP connection to the server and port specified by the selected SRV record.</t>
        <t>Unless assured by a mechanism such as DNSSEC, the originating server MUST NOT trust the information received from the DNS SRV as proof that the target domain has been delegated to the receiving server.</t>
        <figure>
          <artwork><![CDATA[% dig +short -t SRV _xmpp-server._tcp.target.tld
0 1 5269 server.targetprovider.tld]]></artwork>
        </figure>
      </section>
      <section title='Certificates during Start-TLS' anchor='tls'>
        <t>The first step during stream negotiation MUST be Start-TLS.  The receiving server MUST offer a certificate signed by a widely-trusted CA.  The receiving server MUST require a client certificate.  The certificate offered by the originating server MUST be signed be a widely-trusted CA.  Both sides MUST check the certificate offered to it for validity (e.g. time period, signatures, and trust anchor), but MUST NOT disconnect when the certificate received does not contain a name matching its expectations.</t>
        <t>The names on these certificates SHOULD be associated with the relevant hosting provider, and need not be related to the domains being hosted.  If the certificates have the name of the server offered in the SRV record, it MAY be possible to use DNSSEC for proof in the future.</t>
        <figure>
          <artwork><![CDATA[CN=server.targetprovider.tld]]></artwork>
        </figure>
        <figure>
          <artwork><![CDATA[CN=server.originatingprovider.tld]]></artwork>
        </figure>
      </section>

      <section title='Discovering Support' anchor='disco'>
        <t>To and from addresses are REQUIRED in the stream:stream tag.  These represent the first domain pair associated with this stream, and are the domain names from the stanza that caused this connection to be established.</t>

        <t>To announce its support for DNA, the receiving server asserts its identity in the stream features following TLS negotiation.  </t>
        <figure>
          <artwork><![CDATA[<stream:features> 
  <assert xmlns='urn:ietf:params:xml:ns:dna' from='target.tld'/>
</stream:features>
]]></artwork>
        </figure>
      </section>

      <section title='Turning on DNA' anchor='initiation'>
        <t>If the originating server supports DNA, it looks for an assertion in the stream features.  If it finds none, it MAY fall back on another means of verifying the identiy of the target server, if allowed by local policy.</t>
        <t>Originating servers that support DNA talking to target servers that declare support for DNA MUST NOT send protocol other than DNA negotations until they are able to validate the assertion offered by the target server in the stream features.  The first validation proves to the originating server that it is talking to a server authoritative for the target domain, so that it is safe to use this domain in "to" addresses on this stream.</t>
        <t>Once an originating server completes this first validation it signals that it is willing and able to participate in bi-directional XMPP federation traffic, as long as all of the domains required have been asserted and validated at least once on this stream.</t>
        <t>If the originating server does not require more proof (due to a certificate match or DNSSEC-verified delegation), it may send a "valid" element without requesting proof first, as in all DNA interactions.</t>
        <figure>
          <artwork><![CDATA[<challenge xmlns='urn:ietf:params:xml:ns:dna' to='target.tld'>
  <proof type='urn:ietf:params:dna:proof:attribute-cert'/>
</challenge>
]]></artwork>
        </figure>
        <figure>
          <artwork><![CDATA[<proof xmlns='urn:ietf:params:xml:ns:dna'
       from='target.tld' 
       type='urn:ietf:params:dna:proof:attribute-cert'>
  (Base64-encoded attribute certificate)
</proof>]]></artwork>
        </figure>
        <figure>
          <artwork><![CDATA[<valid xmlns='urn:ietf:params:xml:ns:dna' to='target.tld'/>]]></artwork>
        </figure>
      </section>

      <section title='Asserting new domains' anchor='origin'>
        <t>Before either side sends stanzas on a given stream, it MUST ensure that the other side will accept those stanzas by asserting the domain in the "from" attribute of those stanzas, and waiting for a "valid" response before sending the stanzas in question.</t>
        <t>The originating server MUST therefore send its own assertion after accepting the target domain's assertion.</t>
        <figure>
          <artwork><![CDATA[<assert xmlns='urn:ietf:params:xml:ns:dna' from='originator.tld'/>]]></artwork>
        </figure>
      </section>

      <section title='Proactive challenges' anchor='proactive-challenge'>
        <t>Before either side sends stanzas on a given stream, it MUST ensure that the other side is authoriative for the domain in the "to" attribute on those stanzas.  If the sender has already accepted an assertion on this stream, and that assertion has not been revoked with an "impossible" element, no action is required.  Otherwise, the sender can proactively request proof for that domain by sending a challenge even though the other side has not sent an assertion for that domain yet.</t>
        <figure>
          <artwork><![CDATA[<challenge xmlns='urn:ietf:params:xml:ns:dna' to='othertarget.tld'>
  <proof type='urn:ietf:params:dna:proof:attribute-cert'/>
</challenge>]]></artwork>
        </figure>
      </section>

      <section title='Proactive validation' anchor='proactive-validation'>
        <t>When two hosting providers connect, they may have previous knowledge (perhaps from a cache) of which domains they will trust on the new connection.  If so, either side MAY send as many "valid" elements as desired, even though the other side has not sent assertions for those domain.</t>
        <t>The server receiving these proactive validations MUST NOT change its self-image (which domains it thinks it is authoritative for), but SHOULD NOT send assertions for these domains on this stream.  If the server receiving a proactive validation is no long authoritative for a given domain, it MUST send an "impossible" element, at which point the sender MUST remove the receiver from any cache and not send any stanzas on this stream to the given domain.</t>
        <t>Any cache of DNA information SHOULD be associated with the certificate offerred by the relevant server, and SHOULD be checked for revocation if possible, according to local policy.</t>
        <figure>
          <artwork><![CDATA[<valid xmlns='urn:ietf:params:xml:ns:dna' to='target1.tld'/>
<valid xmlns='urn:ietf:params:xml:ns:dna' to='target2.tld'/>
<valid xmlns='urn:ietf:params:xml:ns:dna' to='target3.tld'/>]]></artwork>
        </figure>
      </section>

      <section title='Reusing streams' anchor='reuse'>
        <t>DNA streams are bi-directional, and may have an aribtrary number of domains validated in either direction, at any point in the lifetime of the stream.  Before sending a stanza on a given stream, the sender MUST ensure that "valid" elements have been exchanged according to the above rules for both the "to" and "from" address, and that no "invalid" or "impossible" element has revoked an assertion.</t>
        <t>An "impossible" or "invalid" element SHOULD NOT cause the rest of the stream to become invalidated in either directions.  When these elements are seen, they SHOULD merely change the list of domains that are valid on that stream.  If no domains are valid on the stream, the stream MAY be closed immediately, or MAY be left open if desired.  If left open, the stream MUST NOT be used for stanza traffic until domains are asserted as needed for the desired domains.</t>
        <t>Domains that are marked as "invalid" or "impossible" SHOULD NOT be retried on the same stream unless new information has become available, in order to prevent assertion storms.</t>
      </section>

      <section title='Implementation notes' anchor='impl'>
        <t>If the first server-to-server validation exchange fails, the parties MAY keep the connection open (perhaps for a shorter than is usual) in case another domain pair would need a connection between these servers.</t>
        <t>Ensure that only one challenge is outstanding on a given connection for a given domain.  Ensure that only one assertion or one proof is outstanding on a given connection for a given domain.</t>
      </section>
    </section>

    <section title='DNA for XMPP client connections' anchor='clients'>
      <t>Hosting providers have a similar problem for client to server connections.  Clients need to ensure that they are talking to an authoritative server for the domain they intend to log in to.  Typically, this is done by examining the certificate offered by the server during TLS negotiation, according to the rules in <xref target='rfc3920bis'/>.  However, hosting providers will typically not have access to a valid certificate for the target domain and its associated private key.  DNA can be used for the hosting provider to prove that hosting services have been delegated to it.</t>

      <section title='Announcing Support' anchor='announce'>
        <t>To announce its support for DNA, the server asserts its identity in the stream features following TLS negotiation.  The server MUST offer the identity of the domain specified in the client's stream header "to" attribute.</t>
        <figure>
          <artwork><![CDATA[<stream:features> 
  <assert xmlns='urn:ietf:params:xml:ns:dna' from='target.tld'/>
</stream:features>]]></artwork>
        </figure>
      </section>

      <section title='Client challenges for proof' anchor='clientchallenge'>
        <t>To utilize the server's DNA assertion, the client performs Start-TLS per <xref target='rfc3920bis'/>, however, if the client does not find a name match on the offered certificate, it does not disconnect immediately.  Instead, if the server offers an assertion, it can use the name from that assertion to ask the server for proof of delegation.</t>
        <t>Subsequent protocol follows the generic use cases above, with the exception that alternate or additional domain names MUST NOT be asserted.  If the server returns an "impossible" element, the server MUST terminate the stream.  If the client sends an "invalid" element, the client MUST terminate the stream.</t>
        <figure>
          <artwork><![CDATA[<challenge xmlns='urn:ietf:params:xml:ns:dna' to='asserted.tld'>
  <proof type='urn:ietf:params:dna:proof:attribute-cert'/>
</challenge>]]></artwork>
        </figure>
      </section>
    </section>

    <section title="IANA Considerations" anchor="iana">
      <section title="XML Namespace Name for DNA" anchor="iana-ns-dna">
        <t>A URN sub-namespace for Domain Name Assertion (DNA) negotiation data in the Extensible Messaging and Presence Protocol (XMPP) is defined as follows.  (This namespace name adheres to the format defined in <!-- <xref target="XML-REG"/> -->.)</t>
        <t><list style='hanging'>
          <t hangText='URI:'>urn:ietf:params:xml:ns:dna</t>
          <t hangText='Specification:'>&rfc.number;</t>
          <t hangText='Description:'>This is the XML namespace name for Domain Name Assertion (DNA) negotiation data in the Extensible Messaging and Presence Protocol (XMPP) as defined by &rfc.number;.</t>
          <t hangText='Registrant Contact:'>IETF, XMPP Working Group, &lt;xmppwg@xmpp.org&gt;</t>
        </list></t>
      </section>

      <section title="URN space for standard DNA Proof Types">
        <t>A URN sub-namespace for DNA is defined as follows.  (This namespace name adheres to the format defined in <!-- <xref target="XML-REG"/> -->.)</t>
        <t><list style='hanging'>
          <t hangText='URI:'>urn:ietf:params:dna:proof</t>
          <t hangText='Specification:'>&rfc.number;</t>
          <t hangText='Description:'>This is the sub-namespace for standardized Domain Name Assertion (DNA) proof types as defined by &rfc.number;.</t>
          <t hangText='Registrant Contact:'>IETF, XMPP Working Group, &lt;xmppwg@xmpp.org&gt;</t>
        </list></t>
      </section>

      <section title='DNA Proof Registry'>
        <t>The URNs inside urn:ietf:params:dna:proof</t>
      </section>

      <section title='Object Identifiers'>
        <t>The following OIDs are defined in Section 5.3 of this document:
        <list style='symbols'>
          <t>id-xmpp</t>
          <t>id-xmpp-client</t>
          <t>id-xmpp-server</t>
        </list>
        </t>
      </section>
    </section>

    <section title='Internationalization Considerations' anchor='i18n'>
      <t>The domains offered MUST conform to all of the rules for "Domain Identitifiers", as specified in &rfc3920bis;, including (but not limited to) the rules for syntax, cannonicalization and comparison.</t>
    </section>

    <section title="Security Considerations" anchor="security">
      <t>TBD.</t>
    </section>
  </middle>
  <back>
    <references title="Normative References">
      <reference anchor="rfc3920bis">
        <front>
          <title>Extensible Messaging and Presence Protocol (XMPP): Core</title>
          <author initials='P' surname='Saint-Andre' fullname='Peter Saint-Andre'>
            <organization />
          </author>
        <date month='September' day='11' year='2009' />
        <abstract><t>This document defines the core features of the Extensible Messaging and Presence Protocol (XMPP), a technology for streaming Extensible Markup Language (XML) elements in order to exchange structured information in close to real time between any two or more network- aware entities. XMPP provides a generalize
d, extensible framework for incrementally exchanging XML data, upon which a variety of applications can be 
built. The framework includes methods for stream setup and teardown, channel encryption, authentication of 
a client to a server and of one server to another server, and primitives for push-style messages, publicati
on of network availability information ("presence"), and request-response interactions between any two XMPP
 entities. This document also specifies the format for XMPP addresses, which are fully internationalizable.
 This document obsoletes RFC 3920.</t></abstract>
        </front>
        <seriesInfo name='Internet-Draft' value='draft-ietf-xmpp-3920bis-02' />
        <format type='TXT'
                target='http://www.ietf.org/internet-drafts/draft-ietf-xmpp-3920bis-02.txt' />
      </reference>

      <reference anchor='I-D.ietf-pkix-3281update'>
        <front>
          <title>An Internet Attribute Certificate Profile for Authorization</title>
          <author initials='R' surname='Housley' fullname='Russ Housley'>
            <organization />
          </author>
          <author initials='S' surname='Farrell' fullname='Stephen Farrell'>
            <organization />
          </author>
          <author initials='S' surname='Turner' fullname='Sean Turner'>
            <organization />
          </author>
          <date month='April' day='27' year='2009' />
          <abstract><t>This specification defines a profile for the use of X.509 Attribute Certificates in Internet Protocols.  Attribute certificates may be used in a wide range of applications and environments covering a broad spectrum of interoperability goals and a broader spectrum of operational and assurance requirements.  The goal of this document is to establish a common baseline for generic applications requiring broad interoperability as well as limited special purpose requirements.  The profile places emphasis on attribute certificate support for Internet electronic mail, IPsec, and WWW security applications.  This document obsoletes RFC 3281.</t></abstract>
        </front>

        <seriesInfo name='Internet-Draft' value='draft-ietf-pkix-3281update-05' />
        <format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-pkix-3281update-05.txt' />
      </reference>

      <reference anchor='I-D.ietf-smime-3851bis'>
        <front>
          <title>Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.2 Message  Specification</title>
          <author initials='B' surname='Ramsdell' fullname='Blake Ramsdell'>
            <organization />
          </author>
          <author initials='S' surname='Turner' fullname='Sean Turner'>  
            <organization />
          </author>
          <date month='May' day='14' year='2009' />
      <abstract><t>This document defines Secure/Multipurpose Internet Mail Extensions (S/MIME) version 3.2.  S/MIME provides a consistent way to send and receive secure MIME data.  Digital signatures provide authentication, message integrity, and non-repudiation with proof of origin. Encryption provides data confidentiality.  Compression can be used to reduce data size.  This document obsoletes RFC 3851.</t></abstract>
      </front>
      <seriesInfo name='Internet-Draft' 
                  value='draft-ietf-smime-3851bis-11' />
      <format type='TXT'     
              target='http://www.ietf.org/internet-drafts/draft-ietf-smime-3851bis-11.txt' />
      </reference>

<reference anchor='RFC2045'>
<front>
<title abbrev='Internet Message Bodies'>Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</title>
<author initials='N.' surname='Freed' fullname='Ned Freed'>
<organization>Innosoft International, Inc.</organization>
<address>
<postal>
<street>1050 East Garvey Avenue South</street>
<city>West Covina</city>
<region>CA</region>
<code>91790</code>
<country>US</country></postal>
<phone>+1 818 919 3600</phone>
<facsimile>+1 818 919 3614</facsimile>
<email>ned@innosoft.com</email></address></author>
<author initials='N.S.' surname='Borenstein' fullname='Nathaniel S. Borenstein'>
<organization>First Virtual Holdings</organization>
<address>
<postal>
<street>25 Washington Avenue</street>
<city>Morristown</city>
<region>NJ</region>
<code>07960</code>
<country>US</country></postal>
<phone>+1 201 540 8967</phone>
<facsimile>+1 201 993 3032</facsimile>
<email>nsb@nsb.fv.com</email></address></author>
<date year='1996' month='November' />
<abstract>
<t>STD 11, RFC 822, defines a message representation protocol specifying considerable detail about US-ASCII message headers, and leaves the message content, or message body, as flat US-ASCII text.  This set of documents, collectively called the Multipurpose Internet Mail Extensions, or MIME, redefines the format of messages to allow for</t>
<t>(1)   textual message bodies in character sets other than US-ASCII,</t>
<t>(2)   an extensible set of different formats for non-textual message bodies,</t>
<t>(3)   multi-part message bodies, and</t>
<t>(4)   textual header information in character sets other than US-ASCII.</t>
<t>These documents are based on earlier work documented in RFC 934, STD 11, and RFC 1049, but extends and revises them.  Because RFC 822 said so little about message bodies, these documents are largely orthogonal to (rather than a revision of) RFC 822.</t>
<t>This initial document specifies the various headers used to describe the structure of MIME messages. The second document, RFC 2046, defines the general structure of the MIME media typing system and defines an initial set of media types. The third document, RFC 2047, describes extensions to RFC 822 to allow non-US-ASCII text data in Internet mail header fields. The fourth document, RFC 2048, specifies various IANA registration procedures for MIME-related facilities. The fifth and final document, RFC 2049, describes MIME conformance
  criteria as well as providing some illustrative examples of MIME message formats, acknowledgements, and the bibliography.</t>
<t>These documents are revisions of RFCs 1521, 1522, and 1590, which themselves were revisions of RFCs 1341 and 1342.  An appendix in RFC 2049 describes differences and changes from previous versions.</t></abstract></front>
<seriesInfo name='RFC' value='2045' />
<format type='TXT' octets='72932' target='ftp://ftp.isi.edu/in-notes/rfc2045.txt' />
</reference>

<reference anchor='RFC4055'>
<front>
<title>Additional Algorithms and Identifiers for RSA Cryptography for use in the Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'>
<organization /></author>
<author initials='B.' surname='Kaliski' fullname='B. Kaliski'>
<organization /></author>
<author initials='R.' surname='Housley' fullname='R. Housley'>
<organization /></author>
<date year='2005' month='June' />
<abstract>
<t>This document supplements RFC 3279.  It describes the conventions for using the RSA Probabilistic Signature Scheme (RSASSA-PSS) signature algorithm, the RSA Encryption Scheme - Optimal Asymmetric Encryption Padding (RSAES-OAEP) key transport algorithm and additional one-way hash functions with the Public-Key Cryptography Standards (PKCS) #1 version 1.5 signature algorithm in the Internet X.509 Public Key Infrastructure (PKI).  Encoding formats, algorithm identifiers, and parameter formats are specified. [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='4055' />
<format type='TXT' octets='57479' target='ftp://ftp.isi.edu/in-notes/rfc4055.txt' />
</reference>

<reference anchor='RFC5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author initials='D.' surname='Cooper' fullname='D. Cooper'>
<organization /></author>
<author initials='S.' surname='Santesson' fullname='S. Santesson'>
<organization /></author>
<author initials='S.' surname='Farrell' fullname='S. Farrell'>
<organization /></author>
<author initials='S.' surname='Boeyen' fullname='S. Boeyen'>
<organization /></author>
<author initials='R.' surname='Housley' fullname='R. Housley'>
<organization /></author>
<author initials='W.' surname='Polk' fullname='W. Polk'>
<organization /></author>
<date year='2008' month='May' />
<abstract>
<t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices. [STANDARDS TRACK]</t></abstract></front>
<seriesInfo name='RFC' value='5280' />
<format type='TXT' octets='352580' target='ftp://ftp.isi.edu/in-notes/rfc5280.txt' />
</reference>

    </references>

    <section title="RELAX NG XML Schema" anchor="schema">
      <figure>
        <artwork><![CDATA[
default namespace = "urn:ietf:params:xml:ns:dna"

# Intent: Internationalized Domain Name (simplisitic view)
domain = xsd:string { pattern = "(\p{L}|\p{N})(\p{L}|\p{N}|\p{M}|-)*"  
"(\.(\p{L}|\p{N})(\p{L}|\p{N}|\p{M}|-)*)*"}

assert = element assert {
  attribute from { domain }
}

valid = element valid {
  attribute to { domain }
}

invalid = element valid {
  attribute to { domain }
}

proof = element proof {
 attribute type { xsd:anyURI },
 attribute from { domain }?,
 text?
}

challenge = element challenge {
  proof+
}

start = assert | valid | invalid | proof | challenge
]]></artwork></figure>
    </section>
  </back>
</rfc>
